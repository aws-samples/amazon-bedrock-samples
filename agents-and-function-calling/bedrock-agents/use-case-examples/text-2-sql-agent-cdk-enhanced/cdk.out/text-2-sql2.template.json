{
 "Resources": {
  "SchemaBucket79EE2269": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "Tags": [
     {
      "Key": "aws-cdk:auto-delete-objects",
      "Value": "true"
     },
     {
      "Key": "aws-cdk:cr-owned:data/EV_WA/:6885267e",
      "Value": "true"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "text-2-sql2/SchemaBucket/Resource"
   }
  },
  "SchemaBucketPolicy557840E2": {
   "Type": "AWS::S3::BucketPolicy",
   "Properties": {
    "Bucket": {
     "Ref": "SchemaBucket79EE2269"
    },
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:PutBucketPolicy",
        "s3:GetBucket*",
        "s3:List*",
        "s3:DeleteObject*"
       ],
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::GetAtt": [
          "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
          "Arn"
         ]
        }
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "SchemaBucket79EE2269",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "SchemaBucket79EE2269",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "text-2-sql2/SchemaBucket/Policy/Resource"
   }
  },
  "SchemaBucketAutoDeleteObjectsCustomResource0F518746": {
   "Type": "Custom::S3AutoDeleteObjects",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "SchemaBucket79EE2269"
    }
   },
   "DependsOn": [
    "SchemaBucketPolicy557840E2"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "text-2-sql2/SchemaBucket/AutoDeleteObjectsCustomResource/Default"
   }
  },
  "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Version": "2012-10-17",
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ]
    },
    "ManagedPolicyArns": [
     {
      "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "text-2-sql2/Custom::S3AutoDeleteObjectsCustomResourceProvider/Role"
   }
  },
  "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "faa95a81ae7d7373f3e1f242268f904eb748d8d0fdd306e8a6fe515a1905a7d6.zip"
    },
    "Timeout": 900,
    "MemorySize": 128,
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
      "Arn"
     ]
    },
    "Runtime": {
     "Fn::FindInMap": [
      "LatestNodeRuntimeMap",
      {
       "Ref": "AWS::Region"
      },
      "value"
     ]
    },
    "Description": {
     "Fn::Join": [
      "",
      [
       "Lambda function for auto-deleting objects in ",
       {
        "Ref": "SchemaBucket79EE2269"
       },
       " S3 bucket."
      ]
     ]
    }
   },
   "DependsOn": [
    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092"
   ],
   "Metadata": {
    "aws:cdk:path": "text-2-sql2/Custom::S3AutoDeleteObjectsCustomResourceProvider/Handler",
    "aws:asset:path": "asset.faa95a81ae7d7373f3e1f242268f904eb748d8d0fdd306e8a6fe515a1905a7d6",
    "aws:asset:property": "Code"
   }
  },
  "DeployFilesAwsCliLayerF562E16D": {
   "Type": "AWS::Lambda::LayerVersion",
   "Properties": {
    "Content": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "b8ab94266984268614c3fb2824a1c3a55395746c48b28c003b08bc1d08688f3e.zip"
    },
    "Description": "/opt/awscli/aws"
   },
   "Metadata": {
    "aws:cdk:path": "text-2-sql2/DeployFiles/AwsCliLayer/Resource",
    "aws:asset:path": "asset.b8ab94266984268614c3fb2824a1c3a55395746c48b28c003b08bc1d08688f3e.zip",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Content"
   }
  },
  "DeployFilesCustomResource51EC1601": {
   "Type": "Custom::CDKBucketDeployment",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C81C01536",
      "Arn"
     ]
    },
    "SourceBucketNames": [
     {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     }
    ],
    "SourceObjectKeys": [
     "24a2aaac219be6707baae075f1a3320017f20988863f3dfa884ec0cf3c58a48d.zip"
    ],
    "DestinationBucketName": {
     "Ref": "SchemaBucket79EE2269"
    },
    "DestinationBucketKeyPrefix": "data/EV_WA/",
    "Prune": true,
    "OutputObjectKeys": true
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "text-2-sql2/DeployFiles/CustomResource/Default"
   }
  },
  "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "text-2-sql2/Custom::CDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C/ServiceRole/Resource"
   }
  },
  "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:GetObject*",
        "s3:GetBucket*",
        "s3:List*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":s3:::",
           {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
           }
          ]
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":s3:::",
           {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "s3:GetObject*",
        "s3:GetBucket*",
        "s3:List*",
        "s3:DeleteObject*",
        "s3:PutObject",
        "s3:PutObjectLegalHold",
        "s3:PutObjectRetention",
        "s3:PutObjectTagging",
        "s3:PutObjectVersionTagging",
        "s3:Abort*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "SchemaBucket79EE2269",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "SchemaBucket79EE2269",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF",
    "Roles": [
     {
      "Ref": "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "text-2-sql2/Custom::CDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C81C01536": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "9a1fcb4a7ecba81ad70e9d3fb241f6794497da945dae5f25924e4dd002b65f2d.zip"
    },
    "Environment": {
     "Variables": {
      "AWS_CA_BUNDLE": "/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem"
     }
    },
    "Handler": "index.handler",
    "Layers": [
     {
      "Ref": "DeployFilesAwsCliLayerF562E16D"
     }
    ],
    "Role": {
     "Fn::GetAtt": [
      "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265",
      "Arn"
     ]
    },
    "Runtime": "python3.11",
    "Timeout": 900
   },
   "DependsOn": [
    "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF",
    "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265"
   ],
   "Metadata": {
    "aws:cdk:path": "text-2-sql2/Custom::CDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C/Resource",
    "aws:asset:path": "asset.9a1fcb4a7ecba81ad70e9d3fb241f6794497da945dae5f25924e4dd002b65f2d",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "GlueRoleDEDFFD2C": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "glue.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSGlueServiceRole"
       ]
      ]
     },
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/AmazonS3FullAccess"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "text-2-sql2/GlueRole/Resource"
   }
  },
  "GlueDatabase": {
   "Type": "AWS::Glue::Database",
   "Properties": {
    "CatalogId": {
     "Ref": "AWS::AccountId"
    },
    "DatabaseInput": {
     "Name": "ev_wa"
    }
   },
   "Metadata": {
    "aws:cdk:path": "text-2-sql2/GlueDatabase"
   }
  },
  "MyCrawler": {
   "Type": "AWS::Glue::Crawler",
   "Properties": {
    "DatabaseName": "ev_wa",
    "Role": {
     "Fn::GetAtt": [
      "GlueRoleDEDFFD2C",
      "Arn"
     ]
    },
    "Schedule": {
     "ScheduleExpression": "cron(0/1 * * * ? *)"
    },
    "Targets": {
     "S3Targets": [
      {
       "Path": {
        "Fn::Join": [
         "",
         [
          "s3://",
          {
           "Ref": "SchemaBucket79EE2269"
          },
          "/data/EV_WA/"
         ]
        ]
       }
      }
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "text-2-sql2/MyCrawler"
   }
  },
  "ActionGroupFunctionServiceRole77660D62": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "text-2-sql2/ActionGroupFunction/ServiceRole/Resource"
   }
  },
  "ActionGroupFunctionServiceRoleDefaultPolicyA247E007": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "glue:StartJobRun",
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:aws:glue:us-east-1:",
          {
           "Ref": "AWS::AccountId"
          },
          ":job/*"
         ]
        ]
       }
      },
      {
       "Action": [
        "glue:GetDatabase",
        "glue:GetDatabases",
        "glue:GetTable",
        "glue:GetTables",
        "glue:BatchGetPartition",
        "glue:GetPartition",
        "glue:GetPartitions",
        "glue:BatchCreatePartition",
        "glue:CreatePartition",
        "glue:DeletePartition",
        "glue:UpdatePartition",
        "glue:BatchDeletePartition"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::Join": [
          "",
          [
           "arn:aws:glue:us-east-1:",
           {
            "Ref": "AWS::AccountId"
           },
           ":catalog"
          ]
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "arn:aws:glue:us-east-1:",
           {
            "Ref": "AWS::AccountId"
           },
           ":database/ev_wa"
          ]
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "arn:aws:glue:us-east-1:",
           {
            "Ref": "AWS::AccountId"
           },
           ":table/ev_wa/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "s3:PutObject",
        "s3:GetObject",
        "s3:ListBucket",
        "s3:CreateBucket",
        "s3:GetBucketLocation"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "SchemaBucket79EE2269",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "SchemaBucket79EE2269",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "athena:StartQueryExecution",
        "athena:GetQueryExecution",
        "athena:GetQueryResults",
        "athena:StopQueryExecution",
        "athena:GetWorkGroup"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:aws:athena:us-east-1:",
          {
           "Ref": "AWS::AccountId"
          },
          ":workgroup/primary"
         ]
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "ActionGroupFunctionServiceRoleDefaultPolicyA247E007",
    "Roles": [
     {
      "Ref": "ActionGroupFunctionServiceRole77660D62"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "text-2-sql2/ActionGroupFunction/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "ActionGroupFunctionFE14D1CB": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "45290291bd8e83e88a36be938e42b08b647cef8cce308a545e5768e47ae5af70.zip"
    },
    "Environment": {
     "Variables": {
      "outputLocation": {
       "Fn::Join": [
        "",
        [
         "s3://",
         {
          "Ref": "SchemaBucket79EE2269"
         },
         "/athena_result/"
        ]
       ]
      },
      "glue_database_name": "ev_wa",
      "region": "us-east-1",
      "bucket_name": {
       "Ref": "SchemaBucket79EE2269"
      }
     }
    },
    "Handler": "index.lambda_handler",
    "MemorySize": 512,
    "Role": {
     "Fn::GetAtt": [
      "ActionGroupFunctionServiceRole77660D62",
      "Arn"
     ]
    },
    "Runtime": "python3.9",
    "Timeout": 300
   },
   "DependsOn": [
    "ActionGroupFunctionServiceRoleDefaultPolicyA247E007",
    "ActionGroupFunctionServiceRole77660D62"
   ],
   "Metadata": {
    "aws:cdk:path": "text-2-sql2/ActionGroupFunction/Resource",
    "aws:asset:path": "asset.45290291bd8e83e88a36be938e42b08b647cef8cce308a545e5768e47ae5af70",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "ActionGroupFunctionLambdaInvocationPolicyc865ed35ebbfcb26461AD9E7": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "ActionGroupFunctionFE14D1CB",
      "Arn"
     ]
    },
    "Principal": "bedrock.amazonaws.com",
    "SourceAccount": {
     "Ref": "AWS::AccountId"
    },
    "SourceArn": {
     "Fn::GetAtt": [
      "MyAgentAgentResource30A5B35B",
      "AgentArn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "text-2-sql2/ActionGroupFunction/LambdaInvocationPolicy-c865ed35ebbfcb26"
   }
  },
  "ActionGroupFunctionAllowBedrockInvoke858CB725": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "ActionGroupFunctionFE14D1CB",
      "Arn"
     ]
    },
    "Principal": "bedrock.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:aws:bedrock:us-east-1:",
       {
        "Ref": "AWS::AccountId"
       },
       ":agent/*"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "text-2-sql2/ActionGroupFunction/AllowBedrockInvoke"
   }
  },
  "MyAgentRoleE8318EBB": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Condition": {
        "StringEquals": {
         "aws:SourceAccount": {
          "Ref": "AWS::AccountId"
         }
        },
        "ArnLike": {
         "aws:SourceArn": {
          "Fn::Join": [
           "",
           [
            "arn:",
            {
             "Ref": "AWS::Partition"
            },
            ":bedrock:",
            {
             "Ref": "AWS::Region"
            },
            ":",
            {
             "Ref": "AWS::AccountId"
            },
            ":agent/*"
           ]
          ]
         }
        }
       },
       "Effect": "Allow",
       "Principal": {
        "Service": "bedrock.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "RoleName": "AmazonBedrockExecutionRoleForAgents_text2sql2MyAgentAC35032F"
   },
   "Metadata": {
    "aws:cdk:path": "text-2-sql2/MyAgent/Role/Resource"
   }
  },
  "MyAgentRoleDefaultPolicy30DBC7AC": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "bedrock:InvokeModel*",
        "bedrock:GetFoundationModel"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":bedrock:",
          {
           "Ref": "AWS::Region"
          },
          "::foundation-model/anthropic.claude-3-5-sonnet-20240620-v1:0"
         ]
        ]
       }
      },
      {
       "Action": "lambda:InvokeFunction",
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "ActionGroupFunctionFE14D1CB",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "ActionGroupFunctionFE14D1CB",
             "Arn"
            ]
           },
           ":*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "MyAgentRoleDefaultPolicy30DBC7AC",
    "Roles": [
     {
      "Ref": "MyAgentRoleE8318EBB"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "text-2-sql2/MyAgent/Role/DefaultPolicy/Resource"
   }
  },
  "MyAgentAgentResource30A5B35B": {
   "Type": "AWS::Bedrock::Agent",
   "Properties": {
    "ActionGroups": [
     {
      "ActionGroupName": "UserInputAction",
      "ActionGroupState": "ENABLED",
      "ParentActionGroupSignature": "AMAZON.UserInput",
      "SkipResourceInUseCheckOnDelete": false
     },
     {
      "ActionGroupName": "CodeInterpreterAction",
      "ActionGroupState": "DISABLED",
      "ParentActionGroupSignature": "AMAZON.CodeInterpreter",
      "SkipResourceInUseCheckOnDelete": false
     },
     {
      "ActionGroupExecutor": {
       "Lambda": {
        "Fn::GetAtt": [
         "ActionGroupFunctionFE14D1CB",
         "Arn"
        ]
       }
      },
      "ActionGroupName": "QueryAthenaActionGroup",
      "ActionGroupState": "ENABLED",
      "ApiSchema": {
       "Payload": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n        \"title\": \"Database schema look up and query APIs\",\n        \"version\": \"1.0.0\",\n        \"description\": \"APIs for looking up database table schemas and making queries to database tables.\"\n    },\n    \"paths\": {\n        \"/getschema\": {\n            \"get\": {\n                \"summary\": \"Get a list of all tables and their schema in the database\",\n                \"description\": \"Get the list of all tables and their schema. Return all the table and schema information.\",\n                \"operationId\": \"getschema\",\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Gets the list of table names and their schemas in the database\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"type\": \"array\",\n                                    \"items\": {\n                                        \"type\": \"object\",\n                                        \"properties\": {\n                                            \"Table\": {\n                                                \"type\": \"string\",\n                                                \"description\": \"The name of the table in the database.\"\n                                            },\n                                            \"Schema\": {\n                                                \"type\": \"string\",\n                                                \"description\": \"The schema of the table in the database. Contains all columns needed for making queries.\"\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/querydatabase\": {\n            \"post\": {\n                \"summary\": \"API to send SQL query to the database table\",\n                \"description\": \"Send a SQL query to the database table to retrieve information pertaining to the users question . The API takes in only one SQL query at a time, sends the SQL statement and returns the query results from the table. This API should be called for each SQL query to a database table.\",\n                \"operationId\": \"querydatabase\",\n                \"requestBody\": {\n                    \"required\": true,\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"query\": {\n                                        \"type\": \"string\",\n                                        \"description\": \"SQL statement to query database table.\"\n                                    }\n                                },\n                                \"required\": [\n                                    \"query\"\n                                ]\n                            }\n                        }\n                    }\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Query sent successfully\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"type\": \"object\",\n                                    \"properties\": {\n                                        \"responsebody\": {\n                                            \"type\": \"string\",\n                                            \"description\": \"The query response from the database.\"\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    \"400\": {\n                        \"description\": \"Bad request. One or more required fields are missing or invalid.\"\n                    }\n                }\n            }\n        }\n    }\n}"
      },
      "Description": "Actions for getting the database schema and querying the Athena database for sample data or final query.",
      "SkipResourceInUseCheckOnDelete": false
     }
    ],
    "AgentName": "bedrock-agent-text2sql2-myagent-ac35032f",
    "AgentResourceRoleArn": {
     "Fn::GetAtt": [
      "MyAgentRoleE8318EBB",
      "Arn"
     ]
    },
    "AutoPrepare": true,
    "Description": "Agent for performing sql queries.",
    "FoundationModel": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":bedrock:",
       {
        "Ref": "AWS::Region"
       },
       "::foundation-model/anthropic.claude-3-5-sonnet-20240620-v1:0"
      ]
     ]
    },
    "IdleSessionTTLInSeconds": 3600,
    "Instruction": "As an advanced database querying agent, your primary task is to generate precise SQL queries concerning the ev_wa database, adhering to the following strict guidelines:\n\n1. Craft syntactically correct AWS Athena queries tailored to specific questions posed by users.\n2. Ensure queries are efficient by targeting only relevant columns instead of extracting all data from any table.\n3. Utilize only column names visible in the schema description to avoid referencing non-existent columns.\n4. Accurately identify the table each column belongs to and appropriately qualify column names with their respective table names as necessary.\n5. Always enclose table names and column names in DOUBLE quotes, as this is the required format for AWS Athena and helps prevent potential errors due to case sensitivity or special characters.\n6. For queries involving filters based on categorical data, first generate a sample SQL query (using DISTINCT) against relevant tables to familiarize yourself with the content of a particular column.\n7. After reviewing the schema of the entire ev_wa database and the columns of the tables, decide on your final SQL query to answer the question thoroughly. Remember, you might need to perform joins between tables to provide a comprehensive answer or provide an AWS S3 link for the response.\n\nConstructing effective and accurate queries requires a deep understanding of the relationships within the database. The following examples illustrate the kind of queries you should be able to construct based on the available data:\n\n- Table `vehicle_info` example query: SELECT \"VIN (1-10)\", \"Model Year\", \"Electric Vehicle Type\" FROM \"vehicle_info\" LIMIT 5;\n- Table `vehicle_economics` example query: SELECT \"VIN (1-10)\", \"Electric Range\", \"Base MSRP\", \"Clean Alternative Fuel Vehicle (CAFV) Eligibility\" FROM \"vehicle_economics\" LIMIT 5;\n- Table `geo_identifiers` example query: SELECT \"VIN (1-10)\", \"Legislative District\", \"DOL Vehicle ID\", \"Vehicle Location\", \"2020 Census Tract\" FROM \"geo_identifiers\" LIMIT 5;\n- Table `owner_location` example query: SELECT \"VIN (1-10)\", \"Postal Code\", \"Electric Utility\" FROM \"owner_location\" LIMIT 5;\n\nYour final SQL queries should be tailored to answer users' questions accurately, efficiently, and in adherence to the specified guidelines.",
    "SkipResourceInUseCheckOnDelete": false
   },
   "DependsOn": [
    "MyAgentRoleDefaultPolicy30DBC7AC"
   ],
   "Metadata": {
    "aws:cdk:path": "text-2-sql2/MyAgent/AgentResource"
   }
  },
  "AgentRoleF4A42D6B": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "bedrock.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "text-2-sql2/AgentRole/Resource"
   }
  },
  "AgentRoleDefaultPolicy1027F5D2": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:GetObject",
        "s3:ListBucket"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "SchemaBucket79EE2269",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "SchemaBucket79EE2269",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "AgentRoleDefaultPolicy1027F5D2",
    "Roles": [
     {
      "Ref": "AgentRoleF4A42D6B"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "text-2-sql2/AgentRole/DefaultPolicy/Resource"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/11RTW+DMAz9Lb2HFMppt1GmnTYJtdKuyASPZYSkikMrhPjvS0i/tEv88uw4z887vksznm7gQolo+0TJhs9HB6Jnnqpnyvm8H0WPjpXf+opiqIySYnrQ13u87IFwYZTXc4snZaYBteMx9XYnGBChI16EsDAFQ9MCn33HD5jQfqElaTQ7St0pdEa/j1q4wNyBL33GFdpBUni0MAkDnw9GYUis8SE4ooV1asT1vzdw0HjJIVlauCi0C2uwtUb03HNF5+UurBzJmeGAZEYrYuMn/Amnk5f6r6qy5ixbtMERtk7q7e1CXZy3VmHW2rstlOTFhUol1/HZrcPCUp7xPH3ZvPoVKWho6+WgBSfPmIBcFyeMJmdH4e286Z5X1Ww9CyWB4lKqyf0Yvc15lvEs3fySlIkdtZMD8kOMf0JpNxoWAgAA"
   },
   "Metadata": {
    "aws:cdk:path": "text-2-sql2/CDKMetadata/Default"
   },
   "Condition": "CDKMetadataAvailable"
  }
 },
 "Mappings": {
  "LatestNodeRuntimeMap": {
   "af-south-1": {
    "value": "nodejs22.x"
   },
   "ap-east-1": {
    "value": "nodejs22.x"
   },
   "ap-east-2": {
    "value": "nodejs22.x"
   },
   "ap-northeast-1": {
    "value": "nodejs22.x"
   },
   "ap-northeast-2": {
    "value": "nodejs22.x"
   },
   "ap-northeast-3": {
    "value": "nodejs22.x"
   },
   "ap-south-1": {
    "value": "nodejs22.x"
   },
   "ap-south-2": {
    "value": "nodejs22.x"
   },
   "ap-southeast-1": {
    "value": "nodejs22.x"
   },
   "ap-southeast-2": {
    "value": "nodejs22.x"
   },
   "ap-southeast-3": {
    "value": "nodejs22.x"
   },
   "ap-southeast-4": {
    "value": "nodejs22.x"
   },
   "ap-southeast-5": {
    "value": "nodejs22.x"
   },
   "ap-southeast-7": {
    "value": "nodejs22.x"
   },
   "ca-central-1": {
    "value": "nodejs22.x"
   },
   "ca-west-1": {
    "value": "nodejs22.x"
   },
   "cn-north-1": {
    "value": "nodejs22.x"
   },
   "cn-northwest-1": {
    "value": "nodejs22.x"
   },
   "eu-central-1": {
    "value": "nodejs22.x"
   },
   "eu-central-2": {
    "value": "nodejs22.x"
   },
   "eu-isoe-west-1": {
    "value": "nodejs18.x"
   },
   "eu-north-1": {
    "value": "nodejs22.x"
   },
   "eu-south-1": {
    "value": "nodejs22.x"
   },
   "eu-south-2": {
    "value": "nodejs22.x"
   },
   "eu-west-1": {
    "value": "nodejs22.x"
   },
   "eu-west-2": {
    "value": "nodejs22.x"
   },
   "eu-west-3": {
    "value": "nodejs22.x"
   },
   "il-central-1": {
    "value": "nodejs22.x"
   },
   "me-central-1": {
    "value": "nodejs22.x"
   },
   "me-south-1": {
    "value": "nodejs22.x"
   },
   "mx-central-1": {
    "value": "nodejs22.x"
   },
   "sa-east-1": {
    "value": "nodejs22.x"
   },
   "us-east-1": {
    "value": "nodejs22.x"
   },
   "us-east-2": {
    "value": "nodejs22.x"
   },
   "us-gov-east-1": {
    "value": "nodejs22.x"
   },
   "us-gov-west-1": {
    "value": "nodejs22.x"
   },
   "us-iso-east-1": {
    "value": "nodejs18.x"
   },
   "us-iso-west-1": {
    "value": "nodejs18.x"
   },
   "us-isob-east-1": {
    "value": "nodejs18.x"
   },
   "us-isob-west-1": {
    "value": "nodejs18.x"
   },
   "us-west-1": {
    "value": "nodejs22.x"
   },
   "us-west-2": {
    "value": "nodejs22.x"
   }
  }
 },
 "Conditions": {
  "CDKMetadataAvailable": {
   "Fn::Or": [
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "af-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-3"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-south-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-3"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-4"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ca-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ca-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-northwest-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-central-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-south-2"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-3"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "il-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "me-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "me-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "sa-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-1"
       ]
      }
     ]
    },
    {
     "Fn::Equals": [
      {
       "Ref": "AWS::Region"
      },
      "us-west-2"
     ]
    }
   ]
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}