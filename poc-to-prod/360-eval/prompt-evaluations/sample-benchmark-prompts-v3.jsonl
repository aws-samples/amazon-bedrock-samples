{"text_prompt": "Generate the proper function call as plain arguments dictionary to calculate the distance between points in coordinates x = 3, y = 4 and x = 6 and y = 8 using the function: def calculate_distance(**kwargs):\n    \"\"\"Calculate the Euclidean distance between two points in 2D space.\n    \n    Args:\n        **kwargs: Keyword arguments\n            - x1 (float): X-coordinate of the first point\n            - y1 (float): Y-coordinate of the first point\n            - x2 (float): X-coordinate of the second point\n            - y2 (float): Y-coordinate of the second point\n        \n    Returns:\n        float: The Euclidean distance between the two points\n    \"\"\"\n    required_params = ['x1', 'y1', 'x2', 'y2']\n    for param in required_params:\n        if param not in kwargs:\n            raise ValueError(f\"The '{param}' parameter is required\")\n    \n    x1, y1 = kwargs['x1'], kwargs['y1']\n    x2, y2 = kwargs['x2'], kwargs['y2']\n    \n    distance = ((x2 - x1)**2 + (y2 - y1)**2)**0.5\n    return distance\n\nCalculate the distance between points (3, 4) and (6, 8)", "expected_output_tokens": 250, "task": {"task_type" :"Function Calling", "task_criteria": "For Function Calling: Valid JSON structure with correct function parameters must be provided."}, "golden_answer": "{'x1': 3, 'y1': 4, 'x2': 6, 'y2': 8}", "model_id": "amazon.nova-pro-v1:0", "region": "us-east-1", "inference_profile": "standard", "input_token_cost": 0.0008, "output_token_cost": 0.0032}
{"text_prompt": "Generate the proper function call as plain arguments dictionary to validate email address john.doe@example.com using this function: def validate_email(**kwargs):\n    \"\"\"Validate if a string is a proper email address format.\n    \n    Args:\n        **kwargs: Keyword arguments\n            - email (str): The email address to validate\n            - check_domain (bool, optional): Whether to verify domain exists. Defaults to False.\n        \n    Returns:\n        dict: A dictionary with 'is_valid' (bool) and 'reason' (str, if invalid)\n    \"\"\"\n    if 'email' not in kwargs:\n        raise ValueError(\"The 'email' parameter is required\")\n    \n    email = kwargs['email']\n    check_domain = kwargs.get('check_domain', False)\n    \n    # Function implementation details\n    return {'is_valid': True, 'reason': ''}\n\nValidate this email: john.doe@example.com without domain checking", "expected_output_tokens": 250, "task": {"task_type" :"Function Calling", "task_criteria": "For Function Calling: Valid JSON structure with correct function parameters must be provided."}, "golden_answer": "{'email': 'john.doe@example.com', 'check_domain': False}", "model_id": "amazon.nova-pro-v1:0", "region": "us-east-1", "inference_profile": "standard", "input_token_cost": 0.0008, "output_token_cost": 0.0032}
{"text_prompt": "Generate the proper function call as plain arguments dictionary to convert 500 USD to EUR  using this function: def convert_currency(**kwargs):\n    \"\"\"Convert an amount from one currency to another.\n    \n    Args:\n        **kwargs: Keyword arguments\n            - amount (float): The amount to convert\n            - from_currency (str): The source currency code (e.g., 'USD')\n            - to_currency (str): The target currency code (e.g., 'EUR')\n            - date (str, optional): Date for historical rates in YYYY-MM-DD format\n        \n    Returns:\n        dict: A dictionary with 'converted_amount' and 'rate'\n    \"\"\"\n    required_params = ['amount', 'from_currency', 'to_currency']\n    for param in required_params:\n        if param not in kwargs:\n            raise ValueError(f\"The '{param}' parameter is required\")\n    \n    # Function implementation details\n    return {'converted_amount': 0.0, 'rate': 0.0}\n\nConvert 500 USD to EUR using today's rate", "expected_output_tokens": 250, "task": {"task_type" :"Function Calling", "task_criteria": "For Function Calling: Valid JSON structure with correct function parameters must be provided."}, "golden_answer": "{'amount': 500, 'from_currency': 'USD', 'to_currency': 'EUR'}", "model_id": "amazon.nova-pro-v1:0", "region": "us-east-1", "inference_profile": "standard", "input_token_cost": 0.0008, "output_token_cost": 0.0032}
{"text_prompt": "Generate the proper function call as plain arguments dictionary to analyze the sentiment of sentence 'The product exceeded my expectations and arrived ahead of schedule' using this function: def analyze_sentiment(**kwargs):\n    \"\"\"Analyze the sentiment of provided text.\n    \n    Args:\n        **kwargs: Keyword arguments\n            - text (str): The text to analyze\n            - language (str, optional): The language code. Defaults to 'en'.\n            - detailed (bool, optional): Whether to return detailed analysis. Defaults to False.\n        \n    Returns:\n        dict: A dictionary with sentiment scores and analysis\n    \"\"\"\n    if 'text' not in kwargs:\n        raise ValueError(\"The 'text' parameter is required\")\n    \n    # Function implementation details\n    return {'sentiment': 'positive', 'score': 0.8}\n\nAnalyze the sentiment of this review in English with detailed analysis: \"The product exceeded my expectations and arrived ahead of schedule.\"", "expected_output_tokens": 250, "task": {"task_type" :"Function Calling", "task_criteria": "For Function Calling: Valid JSON structure with correct function parameters must be provided."}, "golden_answer": "{'text': 'The product exceeded my expectations and arrived ahead of schedule.', 'language': 'en', 'detailed': True}", "model_id": "amazon.nova-pro-v1:0", "region": "us-east-1", "inference_profile": "standard", "input_token_cost": 0.0008, "output_token_cost": 0.0032}
{"text_prompt": "Generate the proper function call as plain arguments dictionary to schedule a meeting using this function: def schedule_meeting(**kwargs):\n    \"\"\"Schedule a meeting on a calendar.\n    \n    Args:\n        **kwargs: Keyword arguments\n            - title (str): Meeting title\n            - start_time (str): Start time in ISO format (YYYY-MM-DDTHH:MM:SS)\n            - duration_minutes (int): Duration in minutes\n            - attendees (list): List of attendee email addresses\n            - location (str, optional): Meeting location or URL\n            - description (str, optional): Meeting description\n        \n    Returns:\n        dict: Meeting details with confirmation ID\n    \"\"\"\n    required_params = ['title', 'start_time', 'duration_minutes', 'attendees']\n    for param in required_params:\n        if param not in kwargs:\n            raise ValueError(f\"The '{param}' parameter is required\")\n    \n    # Function implementation details\n    return {'meeting_id': '12345', 'status': 'scheduled'}\n\nSchedule a project kickoff meeting tomorrow at 2pm for 60 minutes with team@example.com and client@example.com in Conference Room A with the description \"Discuss project timeline and goals\"", "expected_output_tokens": 250, "task": {"task_type" :"Function Calling", "task_criteria": "For Function Calling: Valid JSON structure with correct function parameters must be provided."}, "golden_answer": "{'title': 'Project Kickoff Meeting', 'start_time': '2023-11-15T14:00:00', 'duration_minutes': 60, 'attendees': ['team@example.com', 'client@example.com'], 'location': 'Conference Room A', 'description': 'Discuss project timeline and goals'}", "model_id": "amazon.nova-pro-v1:0", "region": "us-east-1", "inference_profile": "standard", "input_token_cost": 0.0008, "output_token_cost": 0.0032}
{"text_prompt": "Generate the proper function call as plain arguments dictionary to convert 20 degrees Celsius to Fahrenheit using the function: def celsius_to_fahrenheit(**kwargs):\n    \"\"\"Convert temperature from Celsius to Fahrenheit.\n    \n    Args:\n        **kwargs: Keyword arguments\n            - celsius (float): Temperature in Celsius\n        \n    Returns:\n        float: Temperature in Fahrenheit\n    \"\"\"\n    if 'celsius' not in kwargs:\n        raise ValueError(\"The 'celsius' parameter is required\")\n    \n    celsius = kwargs['celsius']\n    fahrenheit = (celsius * 9/5) + 32\n    return fahrenheit", "expected_output_tokens": 250, "task": {"task_type" :"Function Calling", "task_criteria": "For Function Calling: Valid JSON structure with correct function parameters must be provided."}, "golden_answer": "{'celsius': 25}", "model_id": "amazon.nova-pro-v1:0", "region": "us-east-1", "inference_profile": "standard", "input_token_cost": 0.0008, "output_token_cost": 0.0032}
{"text_prompt": "Generate the proper function call as plain arguments dictionary to calculate BMI for a person who is 175 cm tall and weighs 70 kg using the function: def calculate_bmi(**kwargs):\n    \"\"\"Calculate Body Mass Index (BMI).\n    \n    Args:\n        **kwargs: Keyword arguments\n            - height_cm (float): Height in centimeters\n            - weight_kg (float): Weight in kilograms\n        \n    Returns:\n        float: BMI value\n    \"\"\"\n    if 'height_cm' not in kwargs or 'weight_kg' not in kwargs:\n        raise ValueError(\"Both 'height_cm' and 'weight_kg' parameters are required\")\n    \n    height_m = kwargs['height_cm'] / 100\n    bmi = kwargs['weight_kg'] / (height_m * height_m)\n    return round(bmi, 2)","expected_output_tokens": 250, "task": {"task_type" :"Function Calling", "task_criteria": "For Function Calling: Valid JSON structure with correct function parameters must be provided."}, "golden_answer": "{'height_cm': 175, 'weight_kg': 70}", "model_id": "amazon.nova-pro-v1:0", "region": "us-east-1", "inference_profile": "standard", "input_token_cost": 0.0008, "output_token_cost": 0.0032}
{"text_prompt": "Generate the proper function call as plain arguments dictionary to calculate a monthly mortgage payment for a $300,000 loan with 4.5% annual interest rate and 30-year term using the function: def calculate_mortgage_payment(**kwargs):\n    \"\"\"Calculate monthly mortgage payment.\n    \n    Args:\n        **kwargs: Keyword arguments\n            - principal (float): Loan amount in dollars\n            - annual_interest_rate (float): Annual interest rate as a percentage\n            - term_years (int): Length of mortgage in years\n        \n    Returns:\n        float: Monthly payment amount\n    \"\"\"\n    if 'principal' not in kwargs or 'annual_interest_rate' not in kwargs or 'term_years' not in kwargs:\n        raise ValueError(\"'principal', 'annual_interest_rate', and 'term_years' are all required\")\n    \n    p = kwargs['principal']\n    r = kwargs['annual_interest_rate'] / 100 / 12  # Monthly interest rate\n    n = kwargs['term_years'] * 12  # Number of payments\n    \n    payment = p * (r * (1 + r)**n) / ((1 + r)**n - 1)\n    return round(payment, 2)", "expected_output_tokens": 250, "task": {"task_type" :"Function Calling", "task_criteria": "For Function Calling: Valid JSON structure with correct function parameters must be provided."}, "golden_answer": "{'principal': 300000, 'annual_interest_rate': 4.5, 'term_years': 30}", "model_id": "amazon.nova-pro-v1:0","region": "us-east-1","inference_profile": "standard","input_token_cost": 0.0000006,"output_token_cost": 0.0000009}
{"text_prompt": "Generate the proper function call as plain arguments dictionary to create a password with 12 characters, including uppercase letters, lowercase letters, numbers, and special characters using the function: def generate_password(**kwargs):\n    \"\"\"Generate a secure random password.\n    \n    Args:\n        **kwargs: Keyword arguments\n            - length (int): Length of password\n            - include_uppercase (bool): Include uppercase letters\n            - include_lowercase (bool): Include lowercase letters\n            - include_numbers (bool): Include numeric digits\n            - include_special (bool): Include special characters\n        \n    Returns:\n        str: Generated password\n    \"\"\"\n    import random\n    import string\n    \n    if 'length' not in kwargs:\n        raise ValueError(\"The 'length' parameter is required\")\n    \n    chars = ''\n    if kwargs.get('include_uppercase', False):\n        chars += string.ascii_uppercase\n    if kwargs.get('include_lowercase', False):\n        chars += string.ascii_lowercase\n    if kwargs.get('include_numbers', False):\n        chars += string.digits\n    if kwargs.get('include_special', False):\n        chars += string.punctuation\n    \n    if not chars:\n        raise ValueError(\"At least one character type must be included\")\n    \n    return ''.join(random.choice(chars) for _ in range(kwargs['length']))", "expected_output_tokens": 250, "task": {"task_type" :"Function Calling", "task_criteria": "For Function Calling: Valid JSON structure with correct function parameters must be provided."}, "golden_answer": "{'length': 12, 'include_uppercase': True, 'include_lowercase': True, 'include_numbers': True, 'include_special': True}", "model_id": "amazon.nova-pro-v1:0", "region": "us-east-1", "inference_profile": "standard", "input_token_cost": 0.0008, "output_token_cost": 0.0032}
{"text_prompt": "Generate the proper function call as plain arguments dictionary to calculate the distance between New York (40.7128° N, 74.0060° W) and Los Angeles (34.0522° N, 118.2437° W) using the function: def calculate_distance(**kwargs):\n    \"\"\"Calculate the distance between two points using the Haversine formula.\n    \n    Args:\n        **kwargs: Keyword arguments\n            - lat1 (float): Latitude of point 1 in degrees\n            - lon1 (float): Longitude of point 1 in degrees\n            - lat2 (float): Latitude of point 2 in degrees\n            - lon2 (float): Longitude of point 2 in degrees\n        \n    Returns:\n        float: Distance in kilometers\n    \"\"\"\n    import math\n    \n    required_params = ['lat1', 'lon1', 'lat2', 'lon2']\n    for param in required_params:\n        if param not in kwargs:\n            raise ValueError(f\"The '{param}' parameter is required\")\n    \n    # Convert latitude and longitude from degrees to radians\n    lat1 = math.radians(kwargs['lat1'])\n    lon1 = math.radians(kwargs['lon1'])\n    lat2 = math.radians(kwargs['lat2'])\n    lon2 = math.radians(kwargs['lon2'])\n    \n    # Haversine formula\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n    a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon/2)**2\n    c = 2 * math.asin(math.sqrt(a))\n    r = 6371  # Radius of Earth in kilometers\n    \n    return round(c * r, 2)", "expected_output_tokens": 250, "task": {"task_type" :"Function Calling", "task_criteria": "For Function Calling: Valid JSON structure with correct function parameters must be provided."}, "golden_answer": "{'lat1': 40.7128, 'lon1': -74.0060, 'lat2': 34.0522, 'lon2': -118.2437}", "model_id": "amazon.nova-pro-v1:0", "region": "us-east-1", "inference_profile": "standard", "input_token_cost": 0.0008, "output_token_cost": 0.0032}
{"text_prompt": "Extract the company name, CEO, and founding year from this text: 'Quantum Dynamics Ltd. was established in 2015 by Dr. Sarah Johnson, who continues to serve as the CEO. The company specializes in quantum computing solutions.'", "expected_output_tokens": 250, "task": {"task_type" :"Data Extraction", "task_criteria": "Extract the relevant data from the body of text provided the less irrelevant data the better."}, "golden_answer": "Company Name: Quantum Dynamics Ltd.\nCEO: Dr. Sarah Johnson\nFounding Year: 2015", "model_id": "amazon.nova-pro-v1:0", "region": "us-east-1", "inference_profile": "standard", "input_token_cost": 0.0008, "output_token_cost": 0.0032}
{"text_prompt": "Extract the product name, price, and release date from this product announcement: 'The new GalaxyBook Pro will be available starting March 15, 2024, at a retail price of $1,299. This premium laptop features a 4K OLED display and 1TB SSD storage.'", "expected_output_tokens": 250, "task": {"task_type" :"Data Extraction", "task_criteria": "Extract the relevant data from the body of text provided the less irrelevant data the better."}, "golden_answer": "Product Name: GalaxyBook Pro\nPrice: $1,299\nRelease Date: March 15, 2024", "model_id": "amazon.nova-pro-v1:0", "region": "us-east-1", "inference_profile": "standard", "input_token_cost": 0.0008, "output_token_cost": 0.0032}
{"text_prompt": "Extract the movie title, director, and release year from this review: 'Directed by Christopher Nolan, \"Inception\" (2010) remains one of the most thought-provoking science fiction films of the past decade, blending stunning visuals with a complex narrative about dreams within dreams.'", "expected_output_tokens": 250, "task": {"task_type" :"Data Extraction", "task_criteria": "Extract the relevant data from the body of text provided the less irrelevant data the better."}, "golden_answer": "Movie Title: Inception\nDirector: Christopher Nolan\nRelease Year: 2010", "model_id": "amazon.nova-pro-v1:0", "region": "us-east-1", "inference_profile": "standard", "input_token_cost": 0.0008, "output_token_cost": 0.0032}
{"text_prompt": "Extract the conference name, location, and dates from this announcement: 'We are pleased to invite you to the International AI Summit taking place at the Zurich Convention Center from September 5-7, 2024. Early bird registration ends July 31.'", "expected_output_tokens": 250, "task": {"task_type" :"Data Extraction", "task_criteria": "Extract the relevant data from the body of text provided the less irrelevant data the better."}, "golden_answer": "Conference Name: International AI Summit\nLocation: Zurich Convention Center\nDates: September 5-7, 2024", "model_id": "amazon.nova-pro-v1:0", "region": "us-east-1", "inference_profile": "standard", "input_token_cost": 0.0008, "output_token_cost": 0.0032}
{"text_prompt": "Extract the restaurant name, cuisine type, and address from this review: 'We had an amazing dinner at La Maison Bleu, a French bistro located at 142 Riverside Avenue. The escargot and coq au vin were authentic and delicious.'", "expected_output_tokens": 250, "task": {"task_type" :"Data Extraction", "task_criteria": "Extract the relevant data from the body of text provided the less irrelevant data the better."}, "golden_answer": "Restaurant Name: La Maison Bleu\nCuisine Type: French\nAddress: 142 Riverside Avenue", "model_id": "amazon.nova-pro-v1:0", "region": "us-east-1", "inference_profile": "standard", "input_token_cost": 0.0008, "output_token_cost": 0.0032}
{"text_prompt": "Extract the book title, author, and publication year from this description: 'Published in 2019, \"The Silent Patient\" by Alex Michaelides quickly became a bestseller, captivating readers with its psychological thriller elements and unexpected twist ending.'", "expected_output_tokens": 250, "task": {"task_type" :"Data Extraction", "task_criteria": "Extract the relevant data from the body of text provided the less irrelevant data the better."}, "golden_answer": "Book Title: The Silent Patient\nAuthor: Alex Michaelides\nPublication Year: 2019", "model_id": "amazon.nova-pro-v1:0", "region": "us-east-1", "inference_profile": "standard", "input_token_cost": 0.0008, "output_token_cost": 0.0032}
{"text_prompt": "Extract the university name, location, and founding date from this information: 'Stanford University, located in Stanford, California, was founded in 1885 by Leland and Jane Stanford in memory of their only child, Leland Stanford Jr.'", "expected_output_tokens": 250, "task": {"task_type" :"Data Extraction", "task_criteria": "Extract the relevant data from the body of text provided the less irrelevant data the better."}, "golden_answer": "University Name: Stanford University\nLocation: Stanford, California\nFounding Date: 1885", "model_id": "amazon.nova-pro-v1:0", "region": "us-east-1", "inference_profile": "standard", "input_token_cost": 0.0008, "output_token_cost": 0.0032}
{"text_prompt": "Extract the smartphone model, storage capacity, and launch price from this specification: 'The iPhone 15 Pro with 256GB of storage was launched in September 2023 at a price point of $1,099, featuring the new A17 Pro chip and titanium frame.'", "expected_output_tokens": 250, "task": {"task_type" :"Data Extraction", "task_criteria": "Extract the relevant data from the body of text provided the less irrelevant data the better."}, "golden_answer": "Smartphone Model: iPhone 15 Pro\nStorage Capacity: 256GB\nLaunch Price: $1,099", "model_id": "amazon.nova-pro-v1:0", "region": "us-east-1", "inference_profile": "standard", "input_token_cost": 0.0008, "output_token_cost": 0.0032}
{"text_prompt": "Extract the concert artist, venue, and date from this event description: 'Grammy-winner Taylor Swift will bring her record-breaking Eras Tour to Madison Square Garden on August 12, 2024, with special guest Paramore opening the show.'", "expected_output_tokens": 250, "task": {"task_type" :"Data Extraction", "task_criteria": "Extract the relevant data from the body of text provided the less irrelevant data the better."}, "golden_answer": "Concert Artist: Taylor Swift\nVenue: Madison Square Garden\nDate: August 12, 2024", "model_id": "amazon.nova-pro-v1:0", "region": "us-east-1", "inference_profile": "standard", "input_token_cost": 0.0008, "output_token_cost": 0.0032}
{"text_prompt": "Extract the job title, required experience, and salary range from this posting: 'We're looking for a Senior Software Engineer with at least 5 years of experience in cloud infrastructure. The position offers a competitive salary range of $120,000-$150,000 based on experience.'", "expected_output_tokens": 250, "task": {"task_type" :"Data Extraction", "task_criteria": "Extract the relevant data from the body of text provided the less irrelevant data the better."}, "golden_answer": "Job Title: Senior Software Engineer\nRequired Experience: 5 years\nSalary Range: $120,000-$150,000", "model_id": "amazon.nova-pro-v1:0", "region": "us-east-1", "inference_profile": "standard", "input_token_cost": 0.0008, "output_token_cost": 0.0032}
{"text_prompt": "Format the following employee data as a markdown table with headers for ID, Name, Department, and Salary: 1, Alice Johnson, Marketing, $75,000; 2, Robert Chen, Engineering, $95,000; 3, Maria Garcia, Finance, $82,000", "expected_output_tokens": 600, "task": {"task_type" :"Data Formatting", "task_criteria": "Format the relevant data from the body of text provided according to the users specifications"}, "golden_answer": "| ID | Name | Department | Salary |\n|----|------|------------|--------|\n| 1 | Alice Johnson | Marketing | $75,000 |\n| 2 | Robert Chen | Engineering | $95,000 |\n| 3 | Maria Garcia | Finance | $82,000 |", "model_id": "amazon.nova-pro-v1:0", "region": "us-east-1", "inference_profile": "standard", "input_token_cost": 0.0008, "output_token_cost": 0.0032}
{"text_prompt": "Convert this list of product information into a JSON array: Product: Laptop XPS, Price: $1,299, Stock: 45; Product: Wireless Mouse, Price: $29.99, Stock: 122; Product: 4K Monitor, Price: $349.50, Stock: 37", "expected_output_tokens": 600, "task": {"task_type" :"Data Formatting", "task_criteria": "Format the relevant data from the body of text provided according to the users specifications"}, "golden_answer": "[\n  {\n    \"product\": \"Laptop XPS\",\n    \"price\": \"$1,299\",\n    \"stock\": 45\n  },\n  {\n    \"product\": \"Wireless Mouse\",\n    \"price\": \"$29.99\",\n    \"stock\": 122\n  },\n  {\n    \"product\": \"4K Monitor\",\n    \"price\": \"$349.50\",\n    \"stock\": 37\n  }\n]", "model_id": "amazon.nova-pro-v1:0", "region": "us-east-1", "inference_profile": "standard", "input_token_cost": 0.0008, "output_token_cost": 0.0032}
{"text_prompt": "Format the following project timeline milestones as a bulleted list with dates and descriptions: Project Start, January 15, 2024, Initial team assembly; Design Phase, February 10, 2024, Complete wireframes and mockups; Development Sprint 1, March 5, 2024, Core functionality implementation; Testing, April 20, 2024, Quality assurance and bug fixes; Launch, May 30, 2024, Public release and marketing campaign", "expected_output_tokens": 600, "task": {"task_type" :"Data Formatting", "task_criteria": "Format the relevant data from the body of text provided according to the users specifications"}, "golden_answer": "• January 15, 2024: Project Start - Initial team assembly\n• February 10, 2024: Design Phase - Complete wireframes and mockups\n• March 5, 2024: Development Sprint 1 - Core functionality implementation\n• April 20, 2024: Testing - Quality assurance and bug fixes\n• May 30, 2024: Launch - Public release and marketing campaign", "model_id": "amazon.nova-pro-v1:0", "region": "us-east-1", "inference_profile": "standard", "input_token_cost": 0.0008, "output_token_cost": 0.0032}
{"text_prompt": "Transform this customer survey data into a CSV format with headers: Name, Age, Rating, Feedback. Include data for: John Smith, 34, 4.5, Very satisfied with service; Emily Wong, 28, 3.0, Product quality could be improved; Michael Brown, 42, 5.0, Excellent customer support; Sarah Kim, 31, 2.5, Delivery was delayed twice", "expected_output_tokens": 600, "task": {"task_type" :"Data Formatting", "task_criteria": "Format the relevant data from the body of text provided according to the users specifications"}, "golden_answer": "Name,Age,Rating,Feedback\nJohn Smith,34,4.5,\"Very satisfied with service\"\nEmily Wong,28,3.0,\"Product quality could be improved\"\nMichael Brown,42,5.0,\"Excellent customer support\"\nSarah Kim,31,2.5,\"Delivery was delayed twice\"", "model_id": "amazon.nova-pro-v1:0", "region": "us-east-1", "inference_profile": "standard", "input_token_cost": 0.0008, "output_token_cost": 0.0032}
{"text_prompt": "Format these book references in APA style: 1) Title: The Psychology of Decision Making, Author: Daniel Kahneman, Year: 2011, Publisher: Farrar, Straus and Giroux; 2) Title: Algorithms to Live By, Authors: Brian Christian and Tom Griffiths, Year: 2016, Publisher: Henry Holt and Co.; 3) Title: Sapiens: A Brief History of Humankind, Author: Yuval Noah Harari, Year: 2014, Publisher: Harper", "expected_output_tokens": 600, "task": {"task_type" :"Data Formatting", "task_criteria": "Format the relevant data from the body of text provided according to the users specifications"}, "golden_answer": "Kahneman, D. (2011). The Psychology of Decision Making. Farrar, Straus and Giroux.\n\nChristian, B., & Griffiths, T. (2016). Algorithms to Live By. Henry Holt and Co.\n\nHarari, Y. N. (2014). Sapiens: A Brief History of Humankind. Harper.", "model_id": "amazon.nova-pro-v1:0", "region": "us-east-1", "inference_profile": "standard", "input_token_cost": 0.0008, "output_token_cost": 0.0032}
{"text_prompt": "Create an HTML table with the following student exam results: Student: Alex Chen, Math: 94, Science: 88, English: 91; Student: Priya Patel, Math: 85, Science: 92, English: 89; Student: Jordan Taylor, Math: 79, Science: 86, English: 95", "expected_output_tokens": 600, "task": {"task_type" :"Data Formatting", "task_criteria": "Format the relevant data from the body of text provided according to the users specifications"}, "golden_answer": "<table>\n  <thead>\n    <tr>\n      <th>Student</th>\n      <th>Math</th>\n      <th>Science</th>\n      <th>English</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Alex Chen</td>\n      <td>94</td>\n      <td>88</td>\n      <td>91</td>\n    </tr>\n    <tr>\n      <td>Priya Patel</td>\n      <td>85</td>\n      <td>92</td>\n      <td>89</td>\n    </tr>\n    <tr>\n      <td>Jordan Taylor</td>\n      <td>79</td>\n      <td>86</td>\n      <td>95</td>\n    </tr>\n  </tbody>\n</table>", "model_id": "amazon.nova-pro-v1:0", "region": "us-east-1", "inference_profile": "standard", "input_token_cost": 0.0008, "output_token_cost": 0.0032}
{"text_prompt": "Format the following city data as YAML: City: San Francisco, Population: 884,363, Area: 46.87 sq mi, Founded: 1776; City: Chicago, Population: 2,746,388, Area: 227.63 sq mi, Founded: 1833; City: Austin, Population: 964,177, Area: 271.8 sq mi, Founded: 1839", "expected_output_tokens": 600, "task": {"task_type" :"Data Formatting", "task_criteria": "Format the relevant data from the body of text provided according to the users specifications"}, "golden_answer": "cities:\n  - name: San Francisco\n    population: 884363\n    area: 46.87\n    area_unit: sq mi\n    founded: 1776\n  - name: Chicago\n    population: 2746388\n    area: 227.63\n    area_unit: sq mi\n    founded: 1833\n  - name: Austin\n    population: 964177\n    area: 271.8\n    area_unit: sq mi\n    founded: 1839", "model_id": "amazon.nova-pro-v1:0", "region": "us-east-1", "inference_profile": "standard", "input_token_cost": 0.0008, "output_token_cost": 0.0032}
{"text_prompt": "Create a structured XML document for the following product inventory data: Category: Electronics, Item: Smartphone, Brand: TechX, Model: X20, Price: $699; Category: Electronics, Item: Laptop, Brand: ComputeMax, Model: UltraBook 15, Price: $1299; Category: Appliances, Item: Refrigerator, Brand: CoolTech, Model: FreezeKing 500, Price: $899", "expected_output_tokens": 600, "task": {"task_type" :"Data Formatting", "task_criteria": "Format the relevant data from the body of text provided according to the users specifications"}, "golden_answer": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<inventory>\n  <product category=\"Electronics\">\n    <item>Smartphone</item>\n    <brand>TechX</brand>\n    <model>X20</model>\n    <price>$699</price>\n  </product>\n  <product category=\"Electronics\">\n    <item>Laptop</item>\n    <brand>ComputeMax</brand>\n    <model>UltraBook 15</model>\n    <price>$1299</price>\n  </product>\n  <product category=\"Appliances\">\n    <item>Refrigerator</item>\n    <brand>CoolTech</brand>\n    <model>FreezeKing 500</model>\n    <price>$899</price>\n  </product>\n</inventory>", "model_id": "amazon.nova-pro-v1:0", "region": "us-east-1", "inference_profile": "standard", "input_token_cost": 0.0008, "output_token_cost": 0.0032}
{"text_prompt": "Format these contact details into a vCard format: Name: Jennifer Wilson, Title: Marketing Director, Company: Bright Ideas Inc., Email: jwilson@brightideas.com, Phone: (555) 123-4567, Address: 789 Innovation Parkway, Suite 300, San Jose, CA 95110", "expected_output_tokens": 600, "task": {"task_type" :"Data Formatting", "task_criteria": "Format the relevant data from the body of text provided according to the users specifications"}, "golden_answer": "BEGIN:VCARD\nVERSION:3.0\nN:Wilson;Jennifer;;;\nFN:Jennifer Wilson\nTITLE:Marketing Director\nORG:Bright Ideas Inc.\nEMAIL:jwilson@brightideas.com\nTEL;TYPE=WORK,VOICE:(555) 123-4567\nADR;TYPE=WORK:;;789 Innovation Parkway, Suite 300;San Jose;CA;95110;\nEND:VCARD", "model_id": "amazon.nova-pro-v1:0", "region": "us-east-1", "inference_profile": "standard", "input_token_cost": 0.0008, "output_token_cost": 0.0032}
{"text_prompt": "Format the following meeting minutes as a properly structured document with sections for attendees, agenda items, discussions, and action items: Meeting: Q3 Planning, Date: July 15, 2024, Attendees: David Kim, Lisa Chen, Marcus Johnson, Priya Singh. Agenda Items: Budget Review, Project Timeline, New Initiatives. Discussions: Budget currently on track with 5% variance, Project timeline delayed by two weeks due to vendor issues, Three new initiatives proposed for Q4. Action Items: David to update budget forecast by July 22, Lisa to contact vendor about timeline concerns, Team to vote on new initiatives by July 30.", "expected_output_tokens": 600, "task": {"task_type" :"Data Formatting", "task_criteria": "Format the relevant data from the body of text provided according to the users specifications"}, "golden_answer": "# Q3 Planning Meeting Minutes\n**Date:** July 15, 2024\n\n## Attendees\n- David Kim\n- Lisa Chen\n- Marcus Johnson\n- Priya Singh\n\n## Agenda Items\n1. Budget Review\n2. Project Timeline\n3. New Initiatives\n\n## Discussions\n- Budget currently on track with 5% variance\n- Project timeline delayed by two weeks due to vendor issues\n- Three new initiatives proposed for Q4\n\n## Action Items\n- [ ] David to update budget forecast by July 22\n- [ ] Lisa to contact vendor about timeline concerns\n- [ ] Team to vote on new initiatives by July 30", "model_id": "amazon.nova-pro-v1:0", "region": "us-east-1", "inference_profile": "standard", "input_token_cost": 0.0008, "output_token_cost": 0.0032}
{"text_prompt": "Generate the proper function call as plain arguments dictionary to calculate the distance between points in coordinates x = 3, y = 4 and x = 6 and y = 8 using the function: def calculate_distance(**kwargs):\n    \"\"\"Calculate the Euclidean distance between two points in 2D space.\n    \n    Args:\n        **kwargs: Keyword arguments\n            - x1 (float): X-coordinate of the first point\n            - y1 (float): Y-coordinate of the first point\n            - x2 (float): X-coordinate of the second point\n            - y2 (float): Y-coordinate of the second point\n        \n    Returns:\n        float: The Euclidean distance between the two points\n    \"\"\"\n    required_params = ['x1', 'y1', 'x2', 'y2']\n    for param in required_params:\n        if param not in kwargs:\n            raise ValueError(f\"The '{param}' parameter is required\")\n    \n    x1, y1 = kwargs['x1'], kwargs['y1']\n    x2, y2 = kwargs['x2'], kwargs['y2']\n    \n    distance = ((x2 - x1)**2 + (y2 - y1)**2)**0.5\n    return distance\n\nCalculate the distance between points (3, 4) and (6, 8)", "expected_output_tokens": 250, "task": {"task_type" :"Function Calling", "task_criteria": "For Function Calling: Valid JSON structure with correct function parameters must be provided."}, "golden_answer": "{'x1': 3, 'y1': 4, 'x2': 6, 'y2': 8}", "model_id": "anthropic.claude-3-5-sonnet-20241022-v2:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.003, "output_token_cost": 0.015}
{"text_prompt": "Generate the proper function call as plain arguments dictionary to validate email address john.doe@example.com using this function: def validate_email(**kwargs):\n    \"\"\"Validate if a string is a proper email address format.\n    \n    Args:\n        **kwargs: Keyword arguments\n            - email (str): The email address to validate\n            - check_domain (bool, optional): Whether to verify domain exists. Defaults to False.\n        \n    Returns:\n        dict: A dictionary with 'is_valid' (bool) and 'reason' (str, if invalid)\n    \"\"\"\n    if 'email' not in kwargs:\n        raise ValueError(\"The 'email' parameter is required\")\n    \n    email = kwargs['email']\n    check_domain = kwargs.get('check_domain', False)\n    \n    # Function implementation details\n    return {'is_valid': True, 'reason': ''}\n\nValidate this email: john.doe@example.com without domain checking", "expected_output_tokens": 250, "task": {"task_type" :"Function Calling", "task_criteria": "For Function Calling: Valid JSON structure with correct function parameters must be provided."}, "golden_answer": "{'email': 'john.doe@example.com', 'check_domain': False}", "model_id": "anthropic.claude-3-5-sonnet-20241022-v2:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.003, "output_token_cost": 0.015}
{"text_prompt": "Generate the proper function call as plain arguments dictionary to convert 500 USD to EUR  using this function: def convert_currency(**kwargs):\n    \"\"\"Convert an amount from one currency to another.\n    \n    Args:\n        **kwargs: Keyword arguments\n            - amount (float): The amount to convert\n            - from_currency (str): The source currency code (e.g., 'USD')\n            - to_currency (str): The target currency code (e.g., 'EUR')\n            - date (str, optional): Date for historical rates in YYYY-MM-DD format\n        \n    Returns:\n        dict: A dictionary with 'converted_amount' and 'rate'\n    \"\"\"\n    required_params = ['amount', 'from_currency', 'to_currency']\n    for param in required_params:\n        if param not in kwargs:\n            raise ValueError(f\"The '{param}' parameter is required\")\n    \n    # Function implementation details\n    return {'converted_amount': 0.0, 'rate': 0.0}\n\nConvert 500 USD to EUR using today's rate", "expected_output_tokens": 250, "task": {"task_type" :"Function Calling", "task_criteria": "For Function Calling: Valid JSON structure with correct function parameters must be provided."}, "golden_answer": "{'amount': 500, 'from_currency': 'USD', 'to_currency': 'EUR'}", "model_id": "anthropic.claude-3-5-sonnet-20241022-v2:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.003, "output_token_cost": 0.015}
{"text_prompt": "Generate the proper function call as plain arguments dictionary to analyze the sentiment of sentence 'The product exceeded my expectations and arrived ahead of schedule' using this function: def analyze_sentiment(**kwargs):\n    \"\"\"Analyze the sentiment of provided text.\n    \n    Args:\n        **kwargs: Keyword arguments\n            - text (str): The text to analyze\n            - language (str, optional): The language code. Defaults to 'en'.\n            - detailed (bool, optional): Whether to return detailed analysis. Defaults to False.\n        \n    Returns:\n        dict: A dictionary with sentiment scores and analysis\n    \"\"\"\n    if 'text' not in kwargs:\n        raise ValueError(\"The 'text' parameter is required\")\n    \n    # Function implementation details\n    return {'sentiment': 'positive', 'score': 0.8}\n\nAnalyze the sentiment of this review in English with detailed analysis: \"The product exceeded my expectations and arrived ahead of schedule.\"", "expected_output_tokens": 250, "task": {"task_type" :"Function Calling", "task_criteria": "For Function Calling: Valid JSON structure with correct function parameters must be provided."}, "golden_answer": "{'text': 'The product exceeded my expectations and arrived ahead of schedule.', 'language': 'en', 'detailed': True}", "model_id": "anthropic.claude-3-5-sonnet-20241022-v2:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.003, "output_token_cost": 0.015}
{"text_prompt": "Generate the proper function call as plain arguments dictionary to schedule a meeting using this function: def schedule_meeting(**kwargs):\n    \"\"\"Schedule a meeting on a calendar.\n    \n    Args:\n        **kwargs: Keyword arguments\n            - title (str): Meeting title\n            - start_time (str): Start time in ISO format (YYYY-MM-DDTHH:MM:SS)\n            - duration_minutes (int): Duration in minutes\n            - attendees (list): List of attendee email addresses\n            - location (str, optional): Meeting location or URL\n            - description (str, optional): Meeting description\n        \n    Returns:\n        dict: Meeting details with confirmation ID\n    \"\"\"\n    required_params = ['title', 'start_time', 'duration_minutes', 'attendees']\n    for param in required_params:\n        if param not in kwargs:\n            raise ValueError(f\"The '{param}' parameter is required\")\n    \n    # Function implementation details\n    return {'meeting_id': '12345', 'status': 'scheduled'}\n\nSchedule a project kickoff meeting tomorrow at 2pm for 60 minutes with team@example.com and client@example.com in Conference Room A with the description \"Discuss project timeline and goals\"", "expected_output_tokens": 250, "task": {"task_type" :"Function Calling", "task_criteria": "For Function Calling: Valid JSON structure with correct function parameters must be provided."}, "golden_answer": "{'title': 'Project Kickoff Meeting', 'start_time': '2023-11-15T14:00:00', 'duration_minutes': 60, 'attendees': ['team@example.com', 'client@example.com'], 'location': 'Conference Room A', 'description': 'Discuss project timeline and goals'}", "model_id": "anthropic.claude-3-5-sonnet-20241022-v2:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.003, "output_token_cost": 0.015}
{"text_prompt": "Generate the proper function call as plain arguments dictionary to convert 20 degrees Celsius to Fahrenheit using the function: def celsius_to_fahrenheit(**kwargs):\n    \"\"\"Convert temperature from Celsius to Fahrenheit.\n    \n    Args:\n        **kwargs: Keyword arguments\n            - celsius (float): Temperature in Celsius\n        \n    Returns:\n        float: Temperature in Fahrenheit\n    \"\"\"\n    if 'celsius' not in kwargs:\n        raise ValueError(\"The 'celsius' parameter is required\")\n    \n    celsius = kwargs['celsius']\n    fahrenheit = (celsius * 9/5) + 32\n    return fahrenheit", "expected_output_tokens": 250, "task": {"task_type" :"Function Calling", "task_criteria": "For Function Calling: Valid JSON structure with correct function parameters must be provided."}, "golden_answer": "{'celsius': 25}", "model_id": "anthropic.claude-3-5-sonnet-20241022-v2:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.003, "output_token_cost": 0.015}
{"text_prompt": "Generate the proper function call as plain arguments dictionary to calculate BMI for a person who is 175 cm tall and weighs 70 kg using the function: def calculate_bmi(**kwargs):\n    \"\"\"Calculate Body Mass Index (BMI).\n    \n    Args:\n        **kwargs: Keyword arguments\n            - height_cm (float): Height in centimeters\n            - weight_kg (float): Weight in kilograms\n        \n    Returns:\n        float: BMI value\n    \"\"\"\n    if 'height_cm' not in kwargs or 'weight_kg' not in kwargs:\n        raise ValueError(\"Both 'height_cm' and 'weight_kg' parameters are required\")\n    \n    height_m = kwargs['height_cm'] / 100\n    bmi = kwargs['weight_kg'] / (height_m * height_m)\n    return round(bmi, 2)", "expected_output_tokens": 250, "task": {"task_type" :"Function Calling", "task_criteria": "For Function Calling: Valid JSON structure with correct function parameters must be provided."}, "golden_answer": "{'height_cm': 175, 'weight_kg': 70}", "model_id": "anthropic.claude-3-5-sonnet-20241022-v2:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.003, "output_token_cost": 0.015}
{"text_prompt": "Generate the proper function call as plain arguments dictionary to calculate a monthly mortgage payment for a $300,000 loan with 4.5% annual interest rate and 30-year term using the function: def calculate_mortgage_payment(**kwargs):\n    \"\"\"Calculate monthly mortgage payment.\n    \n    Args:\n        **kwargs: Keyword arguments\n            - principal (float): Loan amount in dollars\n            - annual_interest_rate (float): Annual interest rate as a percentage\n            - term_years (int): Length of mortgage in years\n        \n    Returns:\n        float: Monthly payment amount\n    \"\"\"\n    if 'principal' not in kwargs or 'annual_interest_rate' not in kwargs or 'term_years' not in kwargs:\n        raise ValueError(\"'principal', 'annual_interest_rate', and 'term_years' are all required\")\n    \n    p = kwargs['principal']\n    r = kwargs['annual_interest_rate'] / 100 / 12  # Monthly interest rate\n    n = kwargs['term_years'] * 12  # Number of payments\n    \n    payment = p * (r * (1 + r)**n) / ((1 + r)**n - 1)\n    return round(payment, 2)", "expected_output_tokens": 250, "task": {"task_type" :"Function Calling", "task_criteria": "For Function Calling: Valid JSON structure with correct function parameters must be provided."}, "golden_answer": "{'principal': 300000, 'annual_interest_rate': 4.5, 'term_years': 30}", "model_id": "anthropic.claude-3-5-sonnet-20241022-v2:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.003, "output_token_cost": 0.015}
{"text_prompt": "Generate the proper function call as plain arguments dictionary to create a password with 12 characters, including uppercase letters, lowercase letters, numbers, and special characters using the function: def generate_password(**kwargs):\n    \"\"\"Generate a secure random password.\n    \n    Args:\n        **kwargs: Keyword arguments\n            - length (int): Length of password\n            - include_uppercase (bool): Include uppercase letters\n            - include_lowercase (bool): Include lowercase letters\n            - include_numbers (bool): Include numeric digits\n            - include_special (bool): Include special characters\n        \n    Returns:\n        str: Generated password\n    \"\"\"\n    import random\n    import string\n    \n    if 'length' not in kwargs:\n        raise ValueError(\"The 'length' parameter is required\")\n    \n    chars = ''\n    if kwargs.get('include_uppercase', False):\n        chars += string.ascii_uppercase\n    if kwargs.get('include_lowercase', False):\n        chars += string.ascii_lowercase\n    if kwargs.get('include_numbers', False):\n        chars += string.digits\n    if kwargs.get('include_special', False):\n        chars += string.punctuation\n    \n    if not chars:\n        raise ValueError(\"At least one character type must be included\")\n    \n    return ''.join(random.choice(chars) for _ in range(kwargs['length']))", "expected_output_tokens": 250, "task": {"task_type" :"Function Calling", "task_criteria": "For Function Calling: Valid JSON structure with correct function parameters must be provided."}, "golden_answer": "{'length': 12, 'include_uppercase': True, 'include_lowercase': True, 'include_numbers': True, 'include_special': True}", "model_id": "anthropic.claude-3-5-sonnet-20241022-v2:0", "region": "us-west-2", "inference_profile": "standard","input_token_cost": 0.000003,"output_token_cost": 0.000015}
{"text_prompt": "Generate the proper function call as plain arguments dictionary to calculate the distance between New York (40.7128° N, 74.0060° W) and Los Angeles (34.0522° N, 118.2437° W) using the function: def calculate_distance(**kwargs):\n    \"\"\"Calculate the distance between two points using the Haversine formula.\n    \n    Args:\n        **kwargs: Keyword arguments\n            - lat1 (float): Latitude of point 1 in degrees\n            - lon1 (float): Longitude of point 1 in degrees\n            - lat2 (float): Latitude of point 2 in degrees\n            - lon2 (float): Longitude of point 2 in degrees\n        \n    Returns:\n        float: Distance in kilometers\n    \"\"\"\n    import math\n    \n    required_params = ['lat1', 'lon1', 'lat2', 'lon2']\n    for param in required_params:\n        if param not in kwargs:\n            raise ValueError(f\"The '{param}' parameter is required\")\n    \n    # Convert latitude and longitude from degrees to radians\n    lat1 = math.radians(kwargs['lat1'])\n    lon1 = math.radians(kwargs['lon1'])\n    lat2 = math.radians(kwargs['lat2'])\n    lon2 = math.radians(kwargs['lon2'])\n    \n    # Haversine formula\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n    a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon/2)**2\n    c = 2 * math.asin(math.sqrt(a))\n    r = 6371  # Radius of Earth in kilometers\n    \n    return round(c * r, 2)", "expected_output_tokens": 250, "task": {"task_type" :"Function Calling", "task_criteria": "For Function Calling: Valid JSON structure with correct function parameters must be provided."}, "golden_answer": "{'lat1': 40.7128, 'lon1': -74.0060, 'lat2': 34.0522, 'lon2': -118.2437}", "model_id": "anthropic.claude-3-5-sonnet-20241022-v2:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.003, "output_token_cost": 0.015}
{"text_prompt": "Extract the company name, CEO, and founding year from this text: 'Quantum Dynamics Ltd. was established in 2015 by Dr. Sarah Johnson, who continues to serve as the CEO. The company specializes in quantum computing solutions.'", "expected_output_tokens": 250, "task": {"task_type" :"Data Extraction", "task_criteria": "Extract the relevant data from the body of text provided the less irrelevant data the better."}, "golden_answer": "Company Name: Quantum Dynamics Ltd.\nCEO: Dr. Sarah Johnson\nFounding Year: 2015", "model_id": "anthropic.claude-3-5-sonnet-20241022-v2:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.003, "output_token_cost": 0.015}
{"text_prompt": "Extract the product name, price, and release date from this product announcement: 'The new GalaxyBook Pro will be available starting March 15, 2024, at a retail price of $1,299. This premium laptop features a 4K OLED display and 1TB SSD storage.'", "expected_output_tokens": 250, "task": {"task_type" :"Data Extraction", "task_criteria": "Extract the relevant data from the body of text provided the less irrelevant data the better."}, "golden_answer": "Product Name: GalaxyBook Pro\nPrice: $1,299\nRelease Date: March 15, 2024", "model_id": "anthropic.claude-3-5-sonnet-20241022-v2:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.003, "output_token_cost": 0.015}
{"text_prompt": "Extract the movie title, director, and release year from this review: 'Directed by Christopher Nolan, \"Inception\" (2010) remains one of the most thought-provoking science fiction films of the past decade, blending stunning visuals with a complex narrative about dreams within dreams.'", "expected_output_tokens": 250, "task": {"task_type" :"Data Extraction", "task_criteria": "Extract the relevant data from the body of text provided the less irrelevant data the better."}, "golden_answer": "Movie Title: Inception\nDirector: Christopher Nolan\nRelease Year: 2010", "model_id": "anthropic.claude-3-5-sonnet-20241022-v2:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.003, "output_token_cost": 0.015}
{"text_prompt": "Extract the conference name, location, and dates from this announcement: 'We are pleased to invite you to the International AI Summit taking place at the Zurich Convention Center from September 5-7, 2024. Early bird registration ends July 31.'", "expected_output_tokens": 250, "task": {"task_type" :"Data Extraction", "task_criteria": "Extract the relevant data from the body of text provided the less irrelevant data the better."}, "golden_answer": "Conference Name: International AI Summit\nLocation: Zurich Convention Center\nDates: September 5-7, 2024", "model_id": "anthropic.claude-3-5-sonnet-20241022-v2:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.003, "output_token_cost": 0.015}
{"text_prompt": "Extract the restaurant name, cuisine type, and address from this review: 'We had an amazing dinner at La Maison Bleu, a French bistro located at 142 Riverside Avenue. The escargot and coq au vin were authentic and delicious.'", "expected_output_tokens": 250, "task": {"task_type" :"Data Extraction", "task_criteria": "Extract the relevant data from the body of text provided the less irrelevant data the better."}, "golden_answer": "Restaurant Name: La Maison Bleu\nCuisine Type: French\nAddress: 142 Riverside Avenue", "model_id": "anthropic.claude-3-5-sonnet-20241022-v2:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.003, "output_token_cost": 0.015}
{"text_prompt": "Extract the book title, author, and publication year from this description: 'Published in 2019, \"The Silent Patient\" by Alex Michaelides quickly became a bestseller, captivating readers with its psychological thriller elements and unexpected twist ending.'", "expected_output_tokens": 250, "task": {"task_type" :"Data Extraction", "task_criteria": "Extract the relevant data from the body of text provided the less irrelevant data the better."}, "golden_answer": "Book Title: The Silent Patient\nAuthor: Alex Michaelides\nPublication Year: 2019", "model_id": "anthropic.claude-3-5-sonnet-20241022-v2:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.003, "output_token_cost": 0.015}
{"text_prompt": "Extract the university name, location, and founding date from this information: 'Stanford University, located in Stanford, California, was founded in 1885 by Leland and Jane Stanford in memory of their only child, Leland Stanford Jr.'", "expected_output_tokens": 250, "task": {"task_type" :"Data Extraction", "task_criteria": "Extract the relevant data from the body of text provided the less irrelevant data the better."}, "golden_answer": "University Name: Stanford University\nLocation: Stanford, California\nFounding Date: 1885", "model_id": "anthropic.claude-3-5-sonnet-20241022-v2:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.003, "output_token_cost": 0.015}
{"text_prompt": "Extract the smartphone model, storage capacity, and launch price from this specification: 'The iPhone 15 Pro with 256GB of storage was launched in September 2023 at a price point of $1,099, featuring the new A17 Pro chip and titanium frame.'", "expected_output_tokens": 250, "task": {"task_type" :"Data Extraction", "task_criteria": "Extract the relevant data from the body of text provided the less irrelevant data the better."}, "golden_answer": "Smartphone Model: iPhone 15 Pro\nStorage Capacity: 256GB\nLaunch Price: $1,099", "model_id": "anthropic.claude-3-5-sonnet-20241022-v2:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.003, "output_token_cost": 0.015}
{"text_prompt": "Extract the concert artist, venue, and date from this event description: 'Grammy-winner Taylor Swift will bring her record-breaking Eras Tour to Madison Square Garden on August 12, 2024, with special guest Paramore opening the show.'", "expected_output_tokens": 250, "task": {"task_type" :"Data Extraction", "task_criteria": "Extract the relevant data from the body of text provided the less irrelevant data the better."}, "golden_answer": "Concert Artist: Taylor Swift\nVenue: Madison Square Garden\nDate: August 12, 2024", "model_id": "anthropic.claude-3-5-sonnet-20241022-v2:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.003, "output_token_cost": 0.015}
{"text_prompt": "Extract the job title, required experience, and salary range from this posting: 'We're looking for a Senior Software Engineer with at least 5 years of experience in cloud infrastructure. The position offers a competitive salary range of $120,000-$150,000 based on experience.'", "expected_output_tokens": 250, "task": {"task_type" :"Data Extraction", "task_criteria": "Extract the relevant data from the body of text provided the less irrelevant data the better."}, "golden_answer": "Job Title: Senior Software Engineer\nRequired Experience: 5 years\nSalary Range: $120,000-$150,000", "model_id": "anthropic.claude-3-5-sonnet-20241022-v2:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.003, "output_token_cost": 0.015}
{"text_prompt": "Format the following employee data as a markdown table with headers for ID, Name, Department, and Salary: 1, Alice Johnson, Marketing, $75,000; 2, Robert Chen, Engineering, $95,000; 3, Maria Garcia, Finance, $82,000", "expected_output_tokens": 600, "task": {"task_type" :"Data Formatting", "task_criteria": "Format the relevant data from the body of text provided according to the users specifications"}, "golden_answer": "| ID | Name | Department | Salary |\n|----|------|------------|--------|\n| 1 | Alice Johnson | Marketing | $75,000 |\n| 2 | Robert Chen | Engineering | $95,000 |\n| 3 | Maria Garcia | Finance | $82,000 |", "model_id": "anthropic.claude-3-5-sonnet-20241022-v2:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.003, "output_token_cost": 0.015}
{"text_prompt": "Convert this list of product information into a JSON array: Product: Laptop XPS, Price: $1,299, Stock: 45; Product: Wireless Mouse, Price: $29.99, Stock: 122; Product: 4K Monitor, Price: $349.50, Stock: 37", "expected_output_tokens": 600, "task": {"task_type" :"Data Formatting", "task_criteria": "Format the relevant data from the body of text provided according to the users specifications"}, "golden_answer": "[\n  {\n    \"product\": \"Laptop XPS\",\n    \"price\": \"$1,299\",\n    \"stock\": 45\n  },\n  {\n    \"product\": \"Wireless Mouse\",\n    \"price\": \"$29.99\",\n    \"stock\": 122\n  },\n  {\n    \"product\": \"4K Monitor\",\n    \"price\": \"$349.50\",\n    \"stock\": 37\n  }\n]", "model_id": "anthropic.claude-3-5-sonnet-20241022-v2:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.003, "output_token_cost": 0.015}
{"text_prompt": "Format the following project timeline milestones as a bulleted list with dates and descriptions: Project Start, January 15, 2024, Initial team assembly; Design Phase, February 10, 2024, Complete wireframes and mockups; Development Sprint 1, March 5, 2024, Core functionality implementation; Testing, April 20, 2024, Quality assurance and bug fixes; Launch, May 30, 2024, Public release and marketing campaign", "expected_output_tokens": 600, "task": {"task_type" :"Data Formatting", "task_criteria": "Format the relevant data from the body of text provided according to the users specifications"}, "golden_answer": "• January 15, 2024: Project Start - Initial team assembly\n• February 10, 2024: Design Phase - Complete wireframes and mockups\n• March 5, 2024: Development Sprint 1 - Core functionality implementation\n• April 20, 2024: Testing - Quality assurance and bug fixes\n• May 30, 2024: Launch - Public release and marketing campaign", "model_id": "anthropic.claude-3-5-sonnet-20241022-v2:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.003, "output_token_cost": 0.015}
{"text_prompt": "Transform this customer survey data into a CSV format with headers: Name, Age, Rating, Feedback. Include data for: John Smith, 34, 4.5, Very satisfied with service; Emily Wong, 28, 3.0, Product quality could be improved; Michael Brown, 42, 5.0, Excellent customer support; Sarah Kim, 31, 2.5, Delivery was delayed twice", "expected_output_tokens": 600, "task": {"task_type" :"Data Formatting", "task_criteria": "Format the relevant data from the body of text provided according to the users specifications"}, "golden_answer": "Name,Age,Rating,Feedback\nJohn Smith,34,4.5,\"Very satisfied with service\"\nEmily Wong,28,3.0,\"Product quality could be improved\"\nMichael Brown,42,5.0,\"Excellent customer support\"\nSarah Kim,31,2.5,\"Delivery was delayed twice\"", "model_id": "anthropic.claude-3-5-sonnet-20241022-v2:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.003, "output_token_cost": 0.015}
{"text_prompt": "Format these book references in APA style: 1) Title: The Psychology of Decision Making, Author: Daniel Kahneman, Year: 2011, Publisher: Farrar, Straus and Giroux; 2) Title: Algorithms to Live By, Authors: Brian Christian and Tom Griffiths, Year: 2016, Publisher: Henry Holt and Co.; 3) Title: Sapiens: A Brief History of Humankind, Author: Yuval Noah Harari, Year: 2014, Publisher: Harper", "expected_output_tokens": 600, "task": {"task_type" :"Data Formatting", "task_criteria": "Format the relevant data from the body of text provided according to the users specifications"}, "golden_answer": "Kahneman, D. (2011). The Psychology of Decision Making. Farrar, Straus and Giroux.\n\nChristian, B., & Griffiths, T. (2016). Algorithms to Live By. Henry Holt and Co.\n\nHarari, Y. N. (2014). Sapiens: A Brief History of Humankind. Harper.", "model_id": "anthropic.claude-3-5-sonnet-20241022-v2:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.003, "output_token_cost": 0.015}
{"text_prompt": "Create an HTML table with the following student exam results: Student: Alex Chen, Math: 94, Science: 88, English: 91; Student: Priya Patel, Math: 85, Science: 92, English: 89; Student: Jordan Taylor, Math: 79, Science: 86, English: 95", "expected_output_tokens": 600, "task": {"task_type" :"Data Formatting", "task_criteria": "Format the relevant data from the body of text provided according to the users specifications"}, "golden_answer": "<table>\n  <thead>\n    <tr>\n      <th>Student</th>\n      <th>Math</th>\n      <th>Science</th>\n      <th>English</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Alex Chen</td>\n      <td>94</td>\n      <td>88</td>\n      <td>91</td>\n    </tr>\n    <tr>\n      <td>Priya Patel</td>\n      <td>85</td>\n      <td>92</td>\n      <td>89</td>\n    </tr>\n    <tr>\n      <td>Jordan Taylor</td>\n      <td>79</td>\n      <td>86</td>\n      <td>95</td>\n    </tr>\n  </tbody>\n</table>", "model_id": "anthropic.claude-3-5-sonnet-20241022-v2:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.003, "output_token_cost": 0.015}
{"text_prompt": "Format the following city data as YAML: City: San Francisco, Population: 884,363, Area: 46.87 sq mi, Founded: 1776; City: Chicago, Population: 2,746,388, Area: 227.63 sq mi, Founded: 1833; City: Austin, Population: 964,177, Area: 271.8 sq mi, Founded: 1839", "expected_output_tokens": 600, "task": {"task_type" :"Data Formatting", "task_criteria": "Format the relevant data from the body of text provided according to the users specifications"}, "golden_answer": "cities:\n  - name: San Francisco\n    population: 884363\n    area: 46.87\n    area_unit: sq mi\n    founded: 1776\n  - name: Chicago\n    population: 2746388\n    area: 227.63\n    area_unit: sq mi\n    founded: 1833\n  - name: Austin\n    population: 964177\n    area: 271.8\n    area_unit: sq mi\n    founded: 1839", "model_id": "anthropic.claude-3-5-sonnet-20241022-v2:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.003, "output_token_cost": 0.015}
{"text_prompt": "Create a structured XML document for the following product inventory data: Category: Electronics, Item: Smartphone, Brand: TechX, Model: X20, Price: $699; Category: Electronics, Item: Laptop, Brand: ComputeMax, Model: UltraBook 15, Price: $1299; Category: Appliances, Item: Refrigerator, Brand: CoolTech, Model: FreezeKing 500, Price: $899", "expected_output_tokens": 600, "task": {"task_type" :"Data Formatting", "task_criteria": "Format the relevant data from the body of text provided according to the users specifications"}, "golden_answer": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<inventory>\n  <product category=\"Electronics\">\n    <item>Smartphone</item>\n    <brand>TechX</brand>\n    <model>X20</model>\n    <price>$699</price>\n  </product>\n  <product category=\"Electronics\">\n    <item>Laptop</item>\n    <brand>ComputeMax</brand>\n    <model>UltraBook 15</model>\n    <price>$1299</price>\n  </product>\n  <product category=\"Appliances\">\n    <item>Refrigerator</item>\n    <brand>CoolTech</brand>\n    <model>FreezeKing 500</model>\n    <price>$899</price>\n  </product>\n</inventory>", "model_id": "anthropic.claude-3-5-sonnet-20241022-v2:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.003, "output_token_cost": 0.015}
{"text_prompt": "Format these contact details into a vCard format: Name: Jennifer Wilson, Title: Marketing Director, Company: Bright Ideas Inc., Email: jwilson@brightideas.com, Phone: (555) 123-4567, Address: 789 Innovation Parkway, Suite 300, San Jose, CA 95110", "expected_output_tokens": 600, "task": {"task_type" :"Data Formatting", "task_criteria": "Format the relevant data from the body of text provided according to the users specifications"}, "golden_answer": "BEGIN:VCARD\nVERSION:3.0\nN:Wilson;Jennifer;;;\nFN:Jennifer Wilson\nTITLE:Marketing Director\nORG:Bright Ideas Inc.\nEMAIL:jwilson@brightideas.com\nTEL;TYPE=WORK,VOICE:(555) 123-4567\nADR;TYPE=WORK:;;789 Innovation Parkway, Suite 300;San Jose;CA;95110;\nEND:VCARD", "model_id": "anthropic.claude-3-5-sonnet-20241022-v2:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.003, "output_token_cost": 0.015}
{"text_prompt": "Format the following meeting minutes as a properly structured document with sections for attendees, agenda items, discussions, and action items: Meeting: Q3 Planning, Date: July 15, 2024, Attendees: David Kim, Lisa Chen, Marcus Johnson, Priya Singh. Agenda Items: Budget Review, Project Timeline, New Initiatives. Discussions: Budget currently on track with 5% variance, Project timeline delayed by two weeks due to vendor issues, Three new initiatives proposed for Q4. Action Items: David to update budget forecast by July 22, Lisa to contact vendor about timeline concerns, Team to vote on new initiatives by July 30.", "expected_output_tokens": 600, "task": {"task_type" :"Data Formatting", "task_criteria": "Format the relevant data from the body of text provided according to the users specifications"}, "golden_answer": "# Q3 Planning Meeting Minutes\n**Date:** July 15, 2024\n\n## Attendees\n- David Kim\n- Lisa Chen\n- Marcus Johnson\n- Priya Singh\n\n## Agenda Items\n1. Budget Review\n2. Project Timeline\n3. New Initiatives\n\n## Discussions\n- Budget currently on track with 5% variance\n- Project timeline delayed by two weeks due to vendor issues\n- Three new initiatives proposed for Q4\n\n## Action Items\n- [ ] David to update budget forecast by July 22\n- [ ] Lisa to contact vendor about timeline concerns\n- [ ] Team to vote on new initiatives by July 30", "model_id": "anthropic.claude-3-5-sonnet-20241022-v2:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.003, "output_token_cost": 0.015}
{"text_prompt": "Generate the proper function call as plain arguments dictionary to calculate the distance between points in coordinates x = 3, y = 4 and x = 6 and y = 8 using the function: def calculate_distance(**kwargs):\n    \"\"\"Calculate the Euclidean distance between two points in 2D space.\n    \n    Args:\n        **kwargs: Keyword arguments\n            - x1 (float): X-coordinate of the first point\n            - y1 (float): Y-coordinate of the first point\n            - x2 (float): X-coordinate of the second point\n            - y2 (float): Y-coordinate of the second point\n        \n    Returns:\n        float: The Euclidean distance between the two points\n    \"\"\"\n    required_params = ['x1', 'y1', 'x2', 'y2']\n    for param in required_params:\n        if param not in kwargs:\n            raise ValueError(f\"The '{param}' parameter is required\")\n    \n    x1, y1 = kwargs['x1'], kwargs['y1']\n    x2, y2 = kwargs['x2'], kwargs['y2']\n    \n    distance = ((x2 - x1)**2 + (y2 - y1)**2)**0.5\n    return distance\n\nCalculate the distance between points (3, 4) and (6, 8)", "expected_output_tokens": 250, "task": {"task_type" :"Function Calling", "task_criteria": "For Function Calling: Valid JSON structure with correct function parameters must be provided."}, "golden_answer": "{'x1': 3, 'y1': 4, 'x2': 6, 'y2': 8}", "model_id": "mistral.mixtral-8x7b-instruct-v0:1", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00045, "output_token_cost": 0.0007}
{"text_prompt": "Generate the proper function call as plain arguments dictionary to validate email address john.doe@example.com using this function: def validate_email(**kwargs):\n    \"\"\"Validate if a string is a proper email address format.\n    \n    Args:\n        **kwargs: Keyword arguments\n            - email (str): The email address to validate\n            - check_domain (bool, optional): Whether to verify domain exists. Defaults to False.\n        \n    Returns:\n        dict: A dictionary with 'is_valid' (bool) and 'reason' (str, if invalid)\n    \"\"\"\n    if 'email' not in kwargs:\n        raise ValueError(\"The 'email' parameter is required\")\n    \n    email = kwargs['email']\n    check_domain = kwargs.get('check_domain', False)\n    \n    # Function implementation details\n    return {'is_valid': True, 'reason': ''}\n\nValidate this email: john.doe@example.com without domain checking", "expected_output_tokens": 250, "task": {"task_type" :"Function Calling", "task_criteria": "For Function Calling: Valid JSON structure with correct function parameters must be provided."}, "golden_answer": "{'email': 'john.doe@example.com', 'check_domain': False}", "model_id": "mistral.mixtral-8x7b-instruct-v0:1", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00045, "output_token_cost": 0.0007}
{"text_prompt": "Generate the proper function call as plain arguments dictionary to convert 500 USD to EUR  using this function: def convert_currency(**kwargs):\n    \"\"\"Convert an amount from one currency to another.\n    \n    Args:\n        **kwargs: Keyword arguments\n            - amount (float): The amount to convert\n            - from_currency (str): The source currency code (e.g., 'USD')\n            - to_currency (str): The target currency code (e.g., 'EUR')\n            - date (str, optional): Date for historical rates in YYYY-MM-DD format\n        \n    Returns:\n        dict: A dictionary with 'converted_amount' and 'rate'\n    \"\"\"\n    required_params = ['amount', 'from_currency', 'to_currency']\n    for param in required_params:\n        if param not in kwargs:\n            raise ValueError(f\"The '{param}' parameter is required\")\n    \n    # Function implementation details\n    return {'converted_amount': 0.0, 'rate': 0.0}\n\nConvert 500 USD to EUR using today's rate", "expected_output_tokens": 250, "task": {"task_type" :"Function Calling", "task_criteria": "For Function Calling: Valid JSON structure with correct function parameters must be provided."}, "golden_answer": "{'amount': 500, 'from_currency': 'USD', 'to_currency': 'EUR'}", "model_id": "mistral.mixtral-8x7b-instruct-v0:1", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00045, "output_token_cost": 0.0007}
{"text_prompt": "Generate the proper function call as plain arguments dictionary to analyze the sentiment of sentence 'The product exceeded my expectations and arrived ahead of schedule' using this function: def analyze_sentiment(**kwargs):\n    \"\"\"Analyze the sentiment of provided text.\n    \n    Args:\n        **kwargs: Keyword arguments\n            - text (str): The text to analyze\n            - language (str, optional): The language code. Defaults to 'en'.\n            - detailed (bool, optional): Whether to return detailed analysis. Defaults to False.\n        \n    Returns:\n        dict: A dictionary with sentiment scores and analysis\n    \"\"\"\n    if 'text' not in kwargs:\n        raise ValueError(\"The 'text' parameter is required\")\n    \n    # Function implementation details\n    return {'sentiment': 'positive', 'score': 0.8}\n\nAnalyze the sentiment of this review in English with detailed analysis: \"The product exceeded my expectations and arrived ahead of schedule.\"", "expected_output_tokens": 250, "task": {"task_type" :"Function Calling", "task_criteria": "For Function Calling: Valid JSON structure with correct function parameters must be provided."}, "golden_answer": "{'text': 'The product exceeded my expectations and arrived ahead of schedule.', 'language': 'en', 'detailed': True}", "model_id": "mistral.mixtral-8x7b-instruct-v0:1", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00045, "output_token_cost": 0.0007}
{"text_prompt": "Generate the proper function call as plain arguments dictionary to schedule a meeting using this function: def schedule_meeting(**kwargs):\n    \"\"\"Schedule a meeting on a calendar.\n    \n    Args:\n        **kwargs: Keyword arguments\n            - title (str): Meeting title\n            - start_time (str): Start time in ISO format (YYYY-MM-DDTHH:MM:SS)\n            - duration_minutes (int): Duration in minutes\n            - attendees (list): List of attendee email addresses\n            - location (str, optional): Meeting location or URL\n            - description (str, optional): Meeting description\n        \n    Returns:\n        dict: Meeting details with confirmation ID\n    \"\"\"\n    required_params = ['title', 'start_time', 'duration_minutes', 'attendees']\n    for param in required_params:\n        if param not in kwargs:\n            raise ValueError(f\"The '{param}' parameter is required\")\n    \n    # Function implementation details\n    return {'meeting_id': '12345', 'status': 'scheduled'}\n\nSchedule a project kickoff meeting tomorrow at 2pm for 60 minutes with team@example.com and client@example.com in Conference Room A with the description \"Discuss project timeline and goals\"", "expected_output_tokens": 250, "task": {"task_type" :"Function Calling", "task_criteria": "For Function Calling: Valid JSON structure with correct function parameters must be provided."}, "golden_answer": "{'title': 'Project Kickoff Meeting', 'start_time': '2023-11-15T14:00:00', 'duration_minutes': 60, 'attendees': ['team@example.com', 'client@example.com'], 'location': 'Conference Room A', 'description': 'Discuss project timeline and goals'}", "model_id": "mistral.mixtral-8x7b-instruct-v0:1", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00045, "output_token_cost": 0.0007}
{"text_prompt": "Generate the proper function call as plain arguments dictionary to convert 20 degrees Celsius to Fahrenheit using the function: def celsius_to_fahrenheit(**kwargs):\n    \"\"\"Convert temperature from Celsius to Fahrenheit.\n    \n    Args:\n        **kwargs: Keyword arguments\n            - celsius (float): Temperature in Celsius\n        \n    Returns:\n        float: Temperature in Fahrenheit\n    \"\"\"\n    if 'celsius' not in kwargs:\n        raise ValueError(\"The 'celsius' parameter is required\")\n    \n    celsius = kwargs['celsius']\n    fahrenheit = (celsius * 9/5) + 32\n    return fahrenheit", "expected_output_tokens": 250, "task": {"task_type" :"Function Calling", "task_criteria": "For Function Calling: Valid JSON structure with correct function parameters must be provided."}, "golden_answer": "{'celsius': 25}", "model_id": "mistral.mixtral-8x7b-instruct-v0:1", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00045, "output_token_cost": 0.0007}
{"text_prompt": "Generate the proper function call as plain arguments dictionary to calculate BMI for a person who is 175 cm tall and weighs 70 kg using the function: def calculate_bmi(**kwargs):\n    \"\"\"Calculate Body Mass Index (BMI).\n    \n    Args:\n        **kwargs: Keyword arguments\n            - height_cm (float): Height in centimeters\n            - weight_kg (float): Weight in kilograms\n        \n    Returns:\n        float: BMI value\n    \"\"\"", "expected_output_tokens": 250, "task": {"task_type" :"Function Calling", "task_criteria": "For Function Calling: Valid JSON structure with correct function parameters must be provided."}, "golden_answer": "{'height_cm': 175, 'weight_kg': 70}", "model_id": "mistral.mixtral-8x7b-instruct-v0:1", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00045, "output_token_cost": 0.0007}
{"text_prompt": "Generate the proper function call as plain arguments dictionary to calculate a monthly mortgage payment for a $300,000 loan with 4.5% annual interest rate and 30-year term using the function: def calculate_mortgage_payment(**kwargs):\n    \"\"\"Calculate monthly mortgage payment.\n    \n    Args:\n        **kwargs: Keyword arguments\n            - principal (float): Loan amount in dollars\n            - annual_interest_rate (float): Annual interest rate as a percentage\n            - term_years (int): Length of mortgage in years\n        \n    Returns:\n        float: Monthly payment amount\n    \"\"\"", "expected_output_tokens": 250, "task": {"task_type" :"Function Calling", "task_criteria": "For Function Calling: Valid JSON structure with correct function parameters must be provided."}, "golden_answer": "{'principal': 300000, 'annual_interest_rate': 4.5, 'term_years': 30}", "model_id": "mistral.mixtral-8x7b-instruct-v0:1", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00045, "output_token_cost": 0.0007}
{"text_prompt": "Generate the proper function call as plain arguments dictionary to create a password with 12 characters, including uppercase letters, lowercase letters, numbers, and special characters using the function: def generate_password(**kwargs):\n    \"\"\"Generate a secure random password.\n    \n    Args:\n        **kwargs: Keyword arguments\n            - length (int): Length of password\n            - include_uppercase (bool): Include uppercase letters\n            - include_lowercase (bool): Include lowercase letters\n            - include_numbers (bool): Include numeric digits\n            - include_special (bool): Include special characters\n        \n    Returns:\n        str: Generated password\n    \"\"\"", "expected_output_tokens": 250, "task": {"task_type" :"Function Calling", "task_criteria": "For Function Calling: Valid JSON structure with correct function parameters must be provided."}, "golden_answer": "{'length': 12, 'include_uppercase': True, 'include_lowercase': True, 'include_numbers': True, 'include_special': True}", "model_id": "mistral.mixtral-8x7b-instruct-v0:1", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00045, "output_token_cost": 0.0007}
{"text_prompt": "Generate the proper function call as plain arguments dictionary to calculate the distance between New York (40.7128° N, 74.0060° W) and Los Angeles (34.0522° N, 118.2437° W) using the function: def calculate_distance(**kwargs):\n    \"\"\"Calculate the distance between two points using the Haversine formula.\n    \n    Args:\n        **kwargs: Keyword arguments\n            - lat1 (float): Latitude of point 1 in degrees\n            - lon1 (float): Longitude of point 1 in degrees\n            - lat2 (float): Latitude of point 2 in degrees\n            - lon2 (float): Longitude of point 2 in degrees\n        \n    Returns:\n        float: Distance in kilometers\n    \"\"\"", "expected_output_tokens": 250, "task": {"task_type" :"Function Calling", "task_criteria": "For Function Calling: Valid JSON structure with correct function parameters must be provided."}, "golden_answer": "{'lat1': 40.7128, 'lon1': -74.0060, 'lat2': 34.0522, 'lon2': -118.2437}", "model_id": "mistral.mixtral-8x7b-instruct-v0:1", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00045, "output_token_cost": 0.0007}
{"text_prompt": "Extract the company name, CEO, and founding year from this text: 'Quantum Dynamics Ltd. was established in 2015 by Dr. Sarah Johnson, who continues to serve as the CEO. The company specializes in quantum computing solutions.'", "expected_output_tokens": 250, "task": {"task_type" :"Data Extraction", "task_criteria": "Extract the relevant data from the body of text provided the less irrelevant data the better."}, "golden_answer": "Company Name: Quantum Dynamics Ltd.\nCEO: Dr. Sarah Johnson\nFounding Year: 2015", "model_id": "mistral.mixtral-8x7b-instruct-v0:1", "region": "us-east-1", "inference_profile": "standard", "input_token_cost": 0.0086, "output_token_cost": 0.0259}
{"text_prompt": "Extract the product name, price, and release date from this product announcement: 'The new GalaxyBook Pro will be available starting March 15, 2024, at a retail price of $1,299. This premium laptop features a 4K OLED display and 1TB SSD storage.'", "expected_output_tokens": 250, "task": {"task_type" :"Data Extraction", "task_criteria": "Extract the relevant data from the body of text provided the less irrelevant data the better."}, "golden_answer": "Product Name: GalaxyBook Pro\nPrice: $1,299\nRelease Date: March 15, 2024", "model_id": "mistral.mixtral-8x7b-instruct-v0:1", "region": "us-east-1", "inference_profile": "standard", "input_token_cost": 0.0086, "output_token_cost": 0.0259}
{"text_prompt": "Extract the movie title, director, and release year from this review: 'Directed by Christopher Nolan, \"Inception\" (2010) remains one of the most thought-provoking science fiction films of the past decade, blending stunning visuals with a complex narrative about dreams within dreams.'", "expected_output_tokens": 250, "task": {"task_type" :"Data Extraction", "task_criteria": "Extract the relevant data from the body of text provided the less irrelevant data the better."}, "golden_answer": "Movie Title: Inception\nDirector: Christopher Nolan\nRelease Year: 2010", "model_id": "mistral.mixtral-8x7b-instruct-v0:1", "region": "us-east-1", "inference_profile": "standard", "input_token_cost": 0.0086, "output_token_cost": 0.0259}
{"text_prompt": "Extract the conference name, location, and dates from this announcement: 'We are pleased to invite you to the International AI Summit taking place at the Zurich Convention Center from September 5-7, 2024. Early bird registration ends July 31.'", "expected_output_tokens": 250, "task": {"task_type" :"Data Extraction", "task_criteria": "Extract the relevant data from the body of text provided the less irrelevant data the better."}, "golden_answer": "Conference Name: International AI Summit\nLocation: Zurich Convention Center\nDates: September 5-7, 2024", "model_id": "mistral.mixtral-8x7b-instruct-v0:1", "region": "us-east-1", "inference_profile": "standard", "input_token_cost": 0.0086, "output_token_cost": 0.0259}
{"text_prompt": "Extract the restaurant name, cuisine type, and address from this review: 'We had an amazing dinner at La Maison Bleu, a French bistro located at 142 Riverside Avenue. The escargot and coq au vin were authentic and delicious.'", "expected_output_tokens": 250, "task": {"task_type" :"Data Extraction", "task_criteria": "Extract the relevant data from the body of text provided the less irrelevant data the better."}, "golden_answer": "Restaurant Name: La Maison Bleu\nCuisine Type: French\nAddress: 142 Riverside Avenue", "model_id": "mistral.mixtral-8x7b-instruct-v0:1", "region": "us-east-1", "inference_profile": "standard", "input_token_cost": 0.0086, "output_token_cost": 0.0259}
{"text_prompt": "Extract the book title, author, and publication year from this description: 'Published in 2019, \"The Silent Patient\" by Alex Michaelides quickly became a bestseller, captivating readers with its psychological thriller elements and unexpected twist ending.'", "expected_output_tokens": 250, "task": {"task_type" :"Data Extraction", "task_criteria": "Extract the relevant data from the body of text provided the less irrelevant data the better."}, "golden_answer": "Book Title: The Silent Patient\nAuthor: Alex Michaelides\nPublication Year: 2019", "model_id": "mistral.mixtral-8x7b-instruct-v0:1", "region": "us-east-1", "inference_profile": "standard", "input_token_cost": 0.0086, "output_token_cost": 0.0259}
{"text_prompt": "Extract the university name, location, and founding date from this information: 'Stanford University, located in Stanford, California, was founded in 1885 by Leland and Jane Stanford in memory of their only child, Leland Stanford Jr.'", "expected_output_tokens": 250, "task": {"task_type" :"Data Extraction", "task_criteria": "Extract the relevant data from the body of text provided the less irrelevant data the better."}, "golden_answer": "University Name: Stanford University\nLocation: Stanford, California\nFounding Date: 1885", "model_id": "mistral.mixtral-8x7b-instruct-v0:1", "region": "us-east-1", "inference_profile": "standard", "input_token_cost": 0.0086, "output_token_cost": 0.0259}
{"text_prompt": "Extract the smartphone model, storage capacity, and launch price from this specification: 'The iPhone 15 Pro with 256GB of storage was launched in September 2023 at a price point of $1,099, featuring the new A17 Pro chip and titanium frame.'", "expected_output_tokens": 250, "task": {"task_type" :"Data Extraction", "task_criteria": "Extract the relevant data from the body of text provided the less irrelevant data the better."}, "golden_answer": "Smartphone Model: iPhone 15 Pro\nStorage Capacity: 256GB\nLaunch Price: $1,099", "model_id": "mistral.mixtral-8x7b-instruct-v0:1", "region": "us-east-1", "inference_profile": "standard", "input_token_cost": 0.0086, "output_token_cost": 0.0259}
{"text_prompt": "Extract the concert artist, venue, and date from this event description: 'Grammy-winner Taylor Swift will bring her record-breaking Eras Tour to Madison Square Garden on August 12, 2024, with special guest Paramore opening the show.'", "expected_output_tokens": 250, "task": {"task_type" :"Data Extraction", "task_criteria": "Extract the relevant data from the body of text provided the less irrelevant data the better."}, "golden_answer": "Concert Artist: Taylor Swift\nVenue: Madison Square Garden\nDate: August 12, 2024", "model_id": "mistral.mixtral-8x7b-instruct-v0:1", "region": "us-east-1", "inference_profile": "standard", "input_token_cost": 0.0086, "output_token_cost": 0.0259}
{"text_prompt": "Extract the job title, required experience, and salary range from this posting: 'We're looking for a Senior Software Engineer with at least 5 years of experience in cloud infrastructure. The position offers a competitive salary range of $120,000-$150,000 based on experience.'", "expected_output_tokens": 250, "task": {"task_type" :"Data Extraction", "task_criteria": "Extract the relevant data from the body of text provided the less irrelevant data the better."}, "golden_answer": "Job Title: Senior Software Engineer\nRequired Experience: 5 years\nSalary Range: $120,000-$150,000", "model_id": "mistral.mixtral-8x7b-instruct-v0:1", "region": "us-east-1", "inference_profile": "standard", "input_token_cost": 0.0086, "output_token_cost": 0.0259}
{"text_prompt": "Format the following employee data as a markdown table with headers for ID, Name, Department, and Salary: 1, Alice Johnson, Marketing, $75,000; 2, Robert Chen, Engineering, $95,000; 3, Maria Garcia, Finance, $82,000", "expected_output_tokens": 600, "task": {"task_type" :"Data Formatting", "task_criteria": "Format the relevant data from the body of text provided according to the users specifications"}, "golden_answer": "| ID | Name | Department | Salary |\n|----|------|------------|--------|\n| 1 | Alice Johnson | Marketing | $75,000 |\n| 2 | Robert Chen | Engineering | $95,000 |\n| 3 | Maria Garcia | Finance | $82,000 |", "model_id": "mistral.mixtral-8x7b-instruct-v0:1", "region": "us-east-1", "inference_profile": "standard", "input_token_cost": 0.0086, "output_token_cost": 0.0259}
{"text_prompt": "Convert this list of product information into a JSON array: Product: Laptop XPS, Price: $1,299, Stock: 45; Product: Wireless Mouse, Price: $29.99, Stock: 122; Product: 4K Monitor, Price: $349.50, Stock: 37", "expected_output_tokens": 600, "task": {"task_type" :"Data Formatting", "task_criteria": "Format the relevant data from the body of text provided according to the users specifications"}, "golden_answer": "[\n  {\n    \"product\": \"Laptop XPS\",\n    \"price\": \"$1,299\",\n    \"stock\": 45\n  },\n  {\n    \"product\": \"Wireless Mouse\",\n    \"price\": \"$29.99\",\n    \"stock\": 122\n  },\n  {\n    \"product\": \"4K Monitor\",\n    \"price\": \"$349.50\",\n    \"stock\": 37\n  }\n]", "model_id": "mistral.mixtral-8x7b-instruct-v0:1", "region": "us-east-1", "inference_profile": "standard", "input_token_cost": 0.0086, "output_token_cost": 0.0259}
{"text_prompt": "Format the following project timeline milestones as a bulleted list with dates and descriptions: Project Start, January 15, 2024, Initial team assembly; Design Phase, February 10, 2024, Complete wireframes and mockups; Development Sprint 1, March 5, 2024, Core functionality implementation; Testing, April 20, 2024, Quality assurance and bug fixes; Launch, May 30, 2024, Public release and marketing campaign", "expected_output_tokens": 600, "task": {"task_type" :"Data Formatting", "task_criteria": "Format the relevant data from the body of text provided according to the users specifications"}, "golden_answer": "• January 15, 2024: Project Start - Initial team assembly\n• February 10, 2024: Design Phase - Complete wireframes and mockups\n• March 5, 2024: Development Sprint 1 - Core functionality implementation\n• April 20, 2024: Testing - Quality assurance and bug fixes\n• May 30, 2024: Launch - Public release and marketing campaign", "model_id": "mistral.mixtral-8x7b-instruct-v0:1", "region": "us-east-1", "inference_profile": "standard", "input_token_cost": 0.0086, "output_token_cost": 0.0259}
{"text_prompt": "Transform this customer survey data into a CSV format with headers: Name, Age, Rating, Feedback. Include data for: John Smith, 34, 4.5, Very satisfied with service; Emily Wong, 28, 3.0, Product quality could be improved; Michael Brown, 42, 5.0, Excellent customer support; Sarah Kim, 31, 2.5, Delivery was delayed twice", "expected_output_tokens": 600, "task": {"task_type" :"Data Formatting", "task_criteria": "Format the relevant data from the body of text provided according to the users specifications"}, "golden_answer": "Name,Age,Rating,Feedback\nJohn Smith,34,4.5,\"Very satisfied with service\"\nEmily Wong,28,3.0,\"Product quality could be improved\"\nMichael Brown,42,5.0,\"Excellent customer support\"\nSarah Kim,31,2.5,\"Delivery was delayed twice\"", "model_id": "mistral.mixtral-8x7b-instruct-v0:1", "region": "us-east-1", "inference_profile": "standard", "input_token_cost": 0.0086, "output_token_cost": 0.0259}
{"text_prompt": "Format these book references in APA style: 1) Title: The Psychology of Decision Making, Author: Daniel Kahneman, Year: 2011, Publisher: Farrar, Straus and Giroux; 2) Title: Algorithms to Live By, Authors: Brian Christian and Tom Griffiths, Year: 2016, Publisher: Henry Holt and Co.; 3) Title: Sapiens: A Brief History of Humankind, Author: Yuval Noah Harari, Year: 2014, Publisher: Harper", "expected_output_tokens": 600, "task": {"task_type" :"Data Formatting", "task_criteria": "Format the relevant data from the body of text provided according to the users specifications"}, "golden_answer": "Kahneman, D. (2011). The Psychology of Decision Making. Farrar, Straus and Giroux.\n\nChristian, B., & Griffiths, T. (2016). Algorithms to Live By. Henry Holt and Co.\n\nHarari, Y. N. (2014). Sapiens: A Brief History of Humankind. Harper.", "model_id": "mistral.mixtral-8x7b-instruct-v0:1", "region": "us-east-1", "inference_profile": "standard", "input_token_cost": 0.0086, "output_token_cost": 0.0259}
{"text_prompt": "Create an HTML table with the following student exam results: Student: Alex Chen, Math: 94, Science: 88, English: 91; Student: Priya Patel, Math: 85, Science: 92, English: 89; Student: Jordan Taylor, Math: 79, Science: 86, English: 95", "expected_output_tokens": 600, "task": {"task_type" :"Data Formatting", "task_criteria": "Format the relevant data from the body of text provided according to the users specifications"}, "golden_answer": "<table>\n  <thead>\n    <tr>\n      <th>Student</th>\n      <th>Math</th>\n      <th>Science</th>\n      <th>English</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Alex Chen</td>\n      <td>94</td>\n      <td>88</td>\n      <td>91</td>\n    </tr>\n    <tr>\n      <td>Priya Patel</td>\n      <td>85</td>\n      <td>92</td>\n      <td>89</td>\n    </tr>\n    <tr>\n      <td>Jordan Taylor</td>\n      <td>79</td>\n      <td>86</td>\n      <td>95</td>\n    </tr>\n  </tbody>\n</table>", "model_id": "mistral.mixtral-8x7b-instruct-v0:1", "region": "us-east-1", "inference_profile": "standard", "input_token_cost": 0.0086, "output_token_cost": 0.0259}
{"text_prompt": "Format the following city data as YAML: City: San Francisco, Population: 884,363, Area: 46.87 sq mi, Founded: 1776; City: Chicago, Population: 2,746,388, Area: 227.63 sq mi, Founded: 1833; City: Austin, Population: 964,177, Area: 271.8 sq mi, Founded: 1839", "expected_output_tokens": 600, "task": {"task_type" :"Data Formatting", "task_criteria": "Format the relevant data from the body of text provided according to the users specifications"}, "golden_answer": "cities:\n  - name: San Francisco\n    population: 884363\n    area: 46.87\n    area_unit: sq mi\n    founded: 1776\n  - name: Chicago\n    population: 2746388\n    area: 227.63\n    area_unit: sq mi\n    founded: 1833\n  - name: Austin\n    population: 964177\n    area: 271.8\n    area_unit: sq mi\n    founded: 1839", "model_id": "mistral.mixtral-8x7b-instruct-v0:1", "region": "us-east-1", "inference_profile": "standard", "input_token_cost": 0.0086, "output_token_cost": 0.0259}
{"text_prompt": "Create a structured XML document for the following product inventory data: Category: Electronics, Item: Smartphone, Brand: TechX, Model: X20, Price: $699; Category: Electronics, Item: Laptop, Brand: ComputeMax, Model: UltraBook 15, Price: $1299; Category: Appliances, Item: Refrigerator, Brand: CoolTech, Model: FreezeKing 500, Price: $899", "expected_output_tokens": 600, "task": {"task_type" :"Data Formatting", "task_criteria": "Format the relevant data from the body of text provided according to the users specifications"}, "golden_answer": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<inventory>\n  <product category=\"Electronics\">\n    <item>Smartphone</item>\n    <brand>TechX</brand>\n    <model>X20</model>\n    <price>$699</price>\n  </product>\n  <product category=\"Electronics\">\n    <item>Laptop</item>\n    <brand>ComputeMax</brand>\n    <model>UltraBook 15</model>\n    <price>$1299</price>\n  </product>\n  <product category=\"Appliances\">\n    <item>Refrigerator</item>\n    <brand>CoolTech</brand>\n    <model>FreezeKing 500</model>\n    <price>$899</price>\n  </product>\n</inventory>", "model_id": "mistral.mixtral-8x7b-instruct-v0:1", "region": "us-east-1", "inference_profile": "standard", "input_token_cost": 0.0086, "output_token_cost": 0.0259}
{"text_prompt": "Format these contact details into a vCard format: Name: Jennifer Wilson, Title: Marketing Director, Company: Bright Ideas Inc., Email: jwilson@brightideas.com, Phone: (555) 123-4567, Address: 789 Innovation Parkway, Suite 300, San Jose, CA 95110", "expected_output_tokens": 600, "task": {"task_type" :"Data Formatting", "task_criteria": "Format the relevant data from the body of text provided according to the users specifications"}, "golden_answer": "BEGIN:VCARD\nVERSION:3.0\nN:Wilson;Jennifer;;;\nFN:Jennifer Wilson\nTITLE:Marketing Director\nORG:Bright Ideas Inc.\nEMAIL:jwilson@brightideas.com\nTEL;TYPE=WORK,VOICE:(555) 123-4567\nADR;TYPE=WORK:;;789 Innovation Parkway, Suite 300;San Jose;CA;95110;\nEND:VCARD", "model_id": "mistral.mixtral-8x7b-instruct-v0:1", "region": "us-east-1", "inference_profile": "standard", "input_token_cost": 0.0086, "output_token_cost": 0.0259}
{"text_prompt": "Format the following meeting minutes as a properly structured document with sections for attendees, agenda items, discussions, and action items: Meeting: Q3 Planning, Date: July 15, 2024, Attendees: David Kim, Lisa Chen, Marcus Johnson, Priya Singh. Agenda Items: Budget Review, Project Timeline, New Initiatives. Discussions: Budget currently on track with 5% variance, Project timeline delayed by two weeks due to vendor issues, Three new initiatives proposed for Q4. Action Items: David to update budget forecast by July 22, Lisa to contact vendor about timeline concerns, Team to vote on new initiatives by July 30.", "expected_output_tokens": 600, "task": {"task_type" :"Data Formatting", "task_criteria": "Format the relevant data from the body of text provided according to the users specifications"}, "golden_answer": "# Q3 Planning Meeting Minutes\n**Date:** July 15, 2024\n\n## Attendees\n- David Kim\n- Lisa Chen\n- Marcus Johnson\n- Priya Singh\n\n## Agenda Items\n1. Budget Review\n2. Project Timeline\n3. New Initiatives\n\n## Discussions\n- Budget currently on track with 5% variance\n- Project timeline delayed by two weeks due to vendor issues\n- Three new initiatives proposed for Q4\n\n## Action Items\n- [ ] David to update budget forecast by July 22\n- [ ] Lisa to contact vendor about timeline concerns\n- [ ] Team to vote on new initiatives by July 30", "model_id": "mistral.mixtral-8x7b-instruct-v0:1", "region": "us-east-1", "inference_profile": "standard", "input_token_cost": 0.0086, "output_token_cost": 0.0259}
{"text_prompt": "Generate the proper function call as plain arguments dictionary to calculate the distance between points in coordinates x = 3, y = 4 and x = 6 and y = 8 using the function: def calculate_distance(**kwargs):\n    \"\"\"Calculate the Euclidean distance between two points in 2D space.\n    \n    Args:\n        **kwargs: Keyword arguments\n            - x1 (float): X-coordinate of the first point\n            - y1 (float): Y-coordinate of the first point\n            - x2 (float): X-coordinate of the second point\n            - y2 (float): Y-coordinate of the second point\n        \n    Returns:\n        float: The Euclidean distance between the two points\n    \"\"\"\n    required_params = ['x1', 'y1', 'x2', 'y2']\n    for param in required_params:\n        if param not in kwargs:\n            raise ValueError(f\"The '{param}' parameter is required\")\n    \n    x1, y1 = kwargs['x1'], kwargs['y1']\n    x2, y2 = kwargs['x2'], kwargs['y2']\n    \n    distance = ((x2 - x1)**2 + (y2 - y1)**2)**0.5\n    return distance\n\nCalculate the distance between points (3, 4) and (6, 8)", "expected_output_tokens": 250, "task": {"task_type" :"Function Calling", "task_criteria": "For Function Calling: Valid JSON structure with correct function parameters must be provided."}, "golden_answer": "{'x1': 3, 'y1': 4, 'x2': 6, 'y2': 8}", "model_id": "us.anthropic.claude-3-5-haiku-20241022-v1:0", "region": "us-east-2", "inference_profile": "optimized", "input_token_cost": 0.0008, "output_token_cost": 0.004}
{"text_prompt": "Generate the proper function call as plain arguments dictionary to validate email address john.doe@example.com using this function: def validate_email(**kwargs):\n    \"\"\"Validate if a string is a proper email address format.\n    \n    Args:\n        **kwargs: Keyword arguments\n            - email (str): The email address to validate\n            - check_domain (bool, optional): Whether to verify domain exists. Defaults to False.\n        \n    Returns:\n        dict: A dictionary with 'is_valid' (bool) and 'reason' (str, if invalid)\n    \"\"\"\n    if 'email' not in kwargs:\n        raise ValueError(\"The 'email' parameter is required\")\n    \n    email = kwargs['email']\n    check_domain = kwargs.get('check_domain', False)\n    \n    # Function implementation details\n    return {'is_valid': True, 'reason': ''}\n\nValidate this email: john.doe@example.com without domain checking", "expected_output_tokens": 250, "task": {"task_type" :"Function Calling", "task_criteria": "For Function Calling: Valid JSON structure with correct function parameters must be provided."}, "golden_answer": "{'email': 'john.doe@example.com', 'check_domain': False}", "model_id": "us.anthropic.claude-3-5-haiku-20241022-v1:0", "region": "us-east-2", "inference_profile": "standard", "input_token_cost": 0.000001, "output_token_cost": 0.000015}
{"text_prompt": "Generate the proper function call as plain arguments dictionary to convert 500 USD to EUR  using this function: def convert_currency(**kwargs):\n    \"\"\"Convert an amount from one currency to another.\n    \n    Args:\n        **kwargs: Keyword arguments\n            - amount (float): The amount to convert\n            - from_currency (str): The source currency code (e.g., 'USD')\n            - to_currency (str): The target currency code (e.g., 'EUR')\n            - date (str, optional): Date for historical rates in YYYY-MM-DD format\n        \n    Returns:\n        dict: A dictionary with 'converted_amount' and 'rate'\n    \"\"\"\n    required_params = ['amount', 'from_currency', 'to_currency']\n    for param in required_params:\n        if param not in kwargs:\n            raise ValueError(f\"The '{param}' parameter is required\")\n    \n    # Function implementation details\n    return {'converted_amount': 0.0, 'rate': 0.0}\n\nConvert 500 USD to EUR using today's rate", "expected_output_tokens": 250, "task": {"task_type" :"Function Calling", "task_criteria": "For Function Calling: Valid JSON structure with correct function parameters must be provided."}, "golden_answer": "{'amount': 500, 'from_currency': 'USD', 'to_currency': 'EUR'}", "model_id": "us.anthropic.claude-3-5-haiku-20241022-v1:0", "region": "us-east-2", "inference_profile": "optimized", "input_token_cost": 0.0008, "output_token_cost": 0.004}
{"text_prompt": "Generate the proper function call as plain arguments dictionary to analyze the sentiment of sentence 'The product exceeded my expectations and arrived ahead of schedule' using this function: def analyze_sentiment(**kwargs):\n    \"\"\"Analyze the sentiment of provided text.\n    \n    Args:\n        **kwargs: Keyword arguments\n            - text (str): The text to analyze\n            - language (str, optional): The language code. Defaults to 'en'.\n            - detailed (bool, optional): Whether to return detailed analysis. Defaults to False.\n        \n    Returns:\n        dict: A dictionary with sentiment scores and analysis\n    \"\"\"\n    if 'text' not in kwargs:\n        raise ValueError(\"The 'text' parameter is required\")\n    \n    # Function implementation details\n    return {'sentiment': 'positive', 'score': 0.8}\n\nAnalyze the sentiment of this review in English with detailed analysis: \"The product exceeded my expectations and arrived ahead of schedule.\"", "expected_output_tokens": 250, "task": {"task_type" :"Function Calling", "task_criteria": "For Function Calling: Valid JSON structure with correct function parameters must be provided."}, "golden_answer": "{'text': 'The product exceeded my expectations and arrived ahead of schedule.', 'language': 'en', 'detailed': True}", "model_id": "us.anthropic.claude-3-5-haiku-20241022-v1:0", "region": "us-east-2", "inference_profile": "standard", "input_token_cost": 0.000001, "output_token_cost": 0.000015}
{"text_prompt": "Generate the proper function call as plain arguments dictionary to schedule a meeting using this function: def schedule_meeting(**kwargs):\n    \"\"\"Schedule a meeting on a calendar.\n    \n    Args:\n        **kwargs: Keyword arguments\n            - title (str): Meeting title\n            - start_time (str): Start time in ISO format (YYYY-MM-DDTHH:MM:SS)\n            - duration_minutes (int): Duration in minutes\n            - attendees (list): List of attendee email addresses\n            - location (str, optional): Meeting location or URL\n            - description (str, optional): Meeting description\n        \n    Returns:\n        dict: Meeting details with confirmation ID\n    \"\"\"\n    required_params = ['title', 'start_time', 'duration_minutes', 'attendees']\n    for param in required_params:\n        if param not in kwargs:\n            raise ValueError(f\"The '{param}' parameter is required\")\n    \n    # Function implementation details\n    return {'meeting_id': '12345', 'status': 'scheduled'}\n\nSchedule a project kickoff meeting tomorrow at 2pm for 60 minutes with team@example.com and client@example.com in Conference Room A with the description \"Discuss project timeline and goals\"", "expected_output_tokens": 250, "task": {"task_type" :"Function Calling", "task_criteria": "For Function Calling: Valid JSON structure with correct function parameters must be provided."}, "golden_answer": "{'title': 'Project Kickoff Meeting', 'start_time': '2023-11-15T14:00:00', 'duration_minutes': 60, 'attendees': ['team@example.com', 'client@example.com'], 'location': 'Conference Room A', 'description': 'Discuss project timeline and goals'}", "model_id": "us.anthropic.claude-3-5-haiku-20241022-v1:0", "region": "us-east-2", "inference_profile": "optimized", "input_token_cost": 0.0008, "output_token_cost": 0.004}
{"text_prompt": "Generate the proper function call as plain arguments dictionary to convert 20 degrees Celsius to Fahrenheit using the function: def celsius_to_fahrenheit(**kwargs):\n    \"\"\"Convert temperature from Celsius to Fahrenheit.\n    \n    Args:\n        **kwargs: Keyword arguments\n            - celsius (float): Temperature in Celsius\n        \n    Returns:\n        float: Temperature in Fahrenheit\n    \"\"\"\n    if 'celsius' not in kwargs:\n        raise ValueError(\"The 'celsius' parameter is required\")\n    \n    celsius = kwargs['celsius']\n    fahrenheit = (celsius * 9/5) + 32\n    return fahrenheit", "expected_output_tokens": 250, "task": {"task_type" :"Function Calling", "task_criteria": "For Function Calling: Valid JSON structure with correct function parameters must be provided."}, "golden_answer": "{'celsius': 25}", "model_id": "us.anthropic.claude-3-5-haiku-20241022-v1:0", "region": "us-east-2", "inference_profile": "optimized", "input_token_cost": 0.0008, "output_token_cost": 0.004}
{"text_prompt": "Generate the proper function call as plain arguments dictionary to calculate BMI for a person who is 175 cm tall and weighs 70 kg using the function: def calculate_bmi(**kwargs):\n    \"\"\"Calculate Body Mass Index (BMI).\n    \n    Args:\n        **kwargs: Keyword arguments\n            - height_cm (float): Height in centimeters\n            - weight_kg (float): Weight in kilograms\n        \n    Returns:\n        float: BMI value\n    \"\"\"\n    if 'height_cm' not in kwargs or 'weight_kg' not in kwargs:\n        raise ValueError(\"Both 'height_cm' and 'weight_kg' parameters are required\")\n    \n    height_m = kwargs['height_cm'] / 100\n    bmi = kwargs['weight_kg'] / (height_m * height_m)\n    return round(bmi, 2)", "expected_output_tokens": 250, "task": {"task_type" :"Function Calling", "task_criteria": "For Function Calling: Valid JSON structure with correct function parameters must be provided."},"golden_answer": "{'height_cm': 175, 'weight_kg': 70}","model_id": "us.anthropic.claude-3-5-haiku-20241022-v1:0","region": "us-east-2","inference_profile": "optimized","input_token_cost": 0.000001, "output_token_cost": 0.000015}
{"text_prompt": "Generate the proper function call as plain arguments dictionary to calculate a monthly mortgage payment for a $300,000 loan with 4.5% annual interest rate and 30-year term using the function: def calculate_mortgage_payment(**kwargs):\n    \"\"\"Calculate monthly mortgage payment.\n    \n    Args:\n        **kwargs: Keyword arguments\n            - principal (float): Loan amount in dollars\n            - annual_interest_rate (float): Annual interest rate as a percentage\n            - term_years (int): Length of mortgage in years\n        \n    Returns:\n        float: Monthly payment amount\n    \"\"\"\n    if 'principal' not in kwargs or 'annual_interest_rate' not in kwargs or 'term_years' not in kwargs:\n        raise ValueError(\"'principal', 'annual_interest_rate', and 'term_years' are all required\")\n    \n    p = kwargs['principal']\n    r = kwargs['annual_interest_rate'] / 100 / 12  # Monthly interest rate\n    n = kwargs['term_years'] * 12  # Number of payments\n    \n    payment = p * (r * (1 + r)**n) / ((1 + r)**n - 1)\n    return round(payment, 2)", "expected_output_tokens": 250, "task": {"task_type" :"Function Calling", "task_criteria": "For Function Calling: Valid JSON structure with correct function parameters must be provided."}, "golden_answer": "{'principal': 300000, 'annual_interest_rate': 4.5, 'term_years': 30}", "model_id": "us.anthropic.claude-3-5-haiku-20241022-v1:0", "region": "us-east-2", "inference_profile": "optimized", "input_token_cost": 0.0008, "output_token_cost": 0.004}
{"text_prompt": "Generate the proper function call as plain arguments dictionary to create a password with 12 characters, including uppercase letters, lowercase letters, numbers, and special characters using the function: def generate_password(**kwargs):\n    \"\"\"Generate a secure random password.\n    \n    Args:\n        **kwargs: Keyword arguments\n            - length (int): Length of password\n            - include_uppercase (bool): Include uppercase letters\n            - include_lowercase (bool): Include lowercase letters\n            - include_numbers (bool): Include numeric digits\n            - include_special (bool): Include special characters\n        \n    Returns:\n        str: Generated password\n    \"\"\"\n    import random\n    import string\n    \n    if 'length' not in kwargs:\n        raise ValueError(\"The 'length' parameter is required\")\n    \n    chars = ''\n    if kwargs.get('include_uppercase', False):\n        chars += string.ascii_uppercase\n    if kwargs.get('include_lowercase', False):\n        chars += string.ascii_lowercase\n    if kwargs.get('include_numbers', False):\n        chars += string.digits\n    if kwargs.get('include_special', False):\n        chars += string.punctuation\n    \n    if not chars:\n        raise ValueError(\"At least one character type must be included\")\n    \n    return ''.join(random.choice(chars) for _ in range(kwargs['length']))", "expected_output_tokens": 250, "task": {"task_type" :"Function Calling", "task_criteria": "For Function Calling: Valid JSON structure with correct function parameters must be provided."}, "golden_answer": "{'length': 12, 'include_uppercase': True, 'include_lowercase': True, 'include_numbers': True, 'include_special': True}", "model_id": "us.anthropic.claude-3-5-haiku-20241022-v1:0", "region": "us-east-2", "inference_profile": "optimized","input_token_cost": 0.000001,"output_token_cost": 0.000015}
{"text_prompt": "Generate the proper function call as plain arguments dictionary to calculate the distance between New York (40.7128° N, 74.0060° W) and Los Angeles (34.0522° N, 118.2437° W) using the function: def calculate_distance(**kwargs):\n    \"\"\"Calculate the distance between two points using the Haversine formula.\n    \n    Args:\n        **kwargs: Keyword arguments\n            - lat1 (float): Latitude of point 1 in degrees\n            - lon1 (float): Longitude of point 1 in degrees\n            - lat2 (float): Latitude of point 2 in degrees\n            - lon2 (float): Longitude of point 2 in degrees\n        \n    Returns:\n        float: Distance in kilometers\n    \"\"\"\n    import math\n    \n    required_params = ['lat1', 'lon1', 'lat2', 'lon2']\n    for param in required_params:\n        if param not in kwargs:\n            raise ValueError(f\"The '{param}' parameter is required\")\n    \n    # Convert latitude and longitude from degrees to radians\n    lat1 = math.radians(kwargs['lat1'])\n    lon1 = math.radians(kwargs['lon1'])\n    lat2 = math.radians(kwargs['lat2'])\n    lon2 = math.radians(kwargs['lon2'])\n    \n    # Haversine formula\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n    a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon/2)**2\n    c = 2 * math.asin(math.sqrt(a))\n    r = 6371  # Radius of Earth in kilometers\n    \n    return round(c * r, 2)", "expected_output_tokens": 250, "task": {"task_type" :"Function Calling", "task_criteria": "For Function Calling: Valid JSON structure with correct function parameters must be provided."}, "golden_answer": "{'lat1': 40.7128, 'lon1': -74.0060, 'lat2': 34.0522, 'lon2': -118.2437}", "model_id": "us.anthropic.claude-3-5-haiku-20241022-v1:0", "region": "us-east-2", "inference_profile": "optimized", "input_token_cost": 0.0008, "output_token_cost": 0.004}
{"text_prompt": "Extract the company name, CEO, and founding year from this text: 'Quantum Dynamics Ltd. was established in 2015 by Dr. Sarah Johnson, who continues to serve as the CEO. The company specializes in quantum computing solutions.'", "expected_output_tokens": 250, "task": {"task_type" :"Data Extraction", "task_criteria": "Extract the relevant data from the body of text provided the less irrelevant data the better."}, "golden_answer": "Company Name: Quantum Dynamics Ltd.\nCEO: Dr. Sarah Johnson\nFounding Year: 2015", "model_id": "us.anthropic.claude-3-5-haiku-20241022-v1:0", "region": "us-east-2", "inference_profile": "standard", "input_token_cost": 0.000001, "output_token_cost": 0.000015}
{"text_prompt": "Extract the product name, price, and release date from this product announcement: 'The new GalaxyBook Pro will be available starting March 15, 2024, at a retail price of $1,299. This premium laptop features a 4K OLED display and 1TB SSD storage.'", "expected_output_tokens": 250, "task": {"task_type" :"Data Extraction", "task_criteria": "Extract the relevant data from the body of text provided the less irrelevant data the better."}, "golden_answer": "Product Name: GalaxyBook Pro\nPrice: $1,299\nRelease Date: March 15, 2024", "model_id": "us.anthropic.claude-3-5-haiku-20241022-v1:0", "region": "us-east-2", "inference_profile": "optimized", "input_token_cost": 0.0008, "output_token_cost": 0.004}
{"text_prompt": "Extract the movie title, director, and release year from this review: 'Directed by Christopher Nolan, \"Inception\" (2010) remains one of the most thought-provoking science fiction films of the past decade, blending stunning visuals with a complex narrative about dreams within dreams.'", "expected_output_tokens": 250, "task": {"task_type" :"Data Extraction", "task_criteria": "Extract the relevant data from the body of text provided the less irrelevant data the better."}, "golden_answer": "Movie Title: Inception\nDirector: Christopher Nolan\nRelease Year: 2010", "model_id": "us.anthropic.claude-3-5-haiku-20241022-v1:0", "region": "us-east-2", "inference_profile": "standard", "input_token_cost": 0.000001, "output_token_cost": 0.000015}
{"text_prompt": "Extract the conference name, location, and dates from this announcement: 'We are pleased to invite you to the International AI Summit taking place at the Zurich Convention Center from September 5-7, 2024. Early bird registration ends July 31.'", "expected_output_tokens": 250, "task": {"task_type" :"Data Extraction", "task_criteria": "Extract the relevant data from the body of text provided the less irrelevant data the better."}, "golden_answer": "Conference Name: International AI Summit\nLocation: Zurich Convention Center\nDates: September 5-7, 2024", "model_id": "us.anthropic.claude-3-5-haiku-20241022-v1:0", "region": "us-east-2", "inference_profile": "optimized", "input_token_cost": 0.0008, "output_token_cost": 0.004}
{"text_prompt": "Extract the restaurant name, cuisine type, and address from this review: 'We had an amazing dinner at La Maison Bleu, a French bistro located at 142 Riverside Avenue. The escargot and coq au vin were authentic and delicious.'", "expected_output_tokens": 250, "task": {"task_type" :"Data Extraction", "task_criteria": "Extract the relevant data from the body of text provided the less irrelevant data the better."}, "golden_answer": "Restaurant Name: La Maison Bleu\nCuisine Type: French\nAddress: 142 Riverside Avenue", "model_id": "us.anthropic.claude-3-5-haiku-20241022-v1:0", "region": "us-east-2", "inference_profile": "standard", "input_token_cost": 0.000001, "output_token_cost": 0.000015}
{"text_prompt": "Extract the book title, author, and publication year from this description: 'Published in 2019, \"The Silent Patient\" by Alex Michaelides quickly became a bestseller, captivating readers with its psychological thriller elements and unexpected twist ending.'", "expected_output_tokens": 250, "task": {"task_type" :"Data Extraction", "task_criteria": "Extract the relevant data from the body of text provided the less irrelevant data the better."}, "golden_answer": "Book Title: The Silent Patient\nAuthor: Alex Michaelides\nPublication Year: 2019", "model_id": "us.anthropic.claude-3-5-haiku-20241022-v1:0", "region": "us-east-2", "inference_profile": "standard", "input_token_cost": 0.000001, "output_token_cost": 0.000015}
{"text_prompt": "Extract the university name, location, and founding date from this information: 'Stanford University, located in Stanford, California, was founded in 1885 by Leland and Jane Stanford in memory of their only child, Leland Stanford Jr.'", "expected_output_tokens": 250, "task": {"task_type" :"Data Extraction", "task_criteria": "Extract the relevant data from the body of text provided the less irrelevant data the better."}, "golden_answer": "University Name: Stanford University\nLocation: Stanford, California\nFounding Date: 1885", "model_id": "us.anthropic.claude-3-5-haiku-20241022-v1:0", "region": "us-east-2", "inference_profile": "optimized", "input_token_cost": 0.0008, "output_token_cost": 0.004}
{"text_prompt": "Extract the smartphone model, storage capacity, and launch price from this specification: 'The iPhone 15 Pro with 256GB of storage was launched in September 2023 at a price point of $1,099, featuring the new A17 Pro chip and titanium frame.'", "expected_output_tokens": 250, "task": {"task_type" :"Data Extraction", "task_criteria": "Extract the relevant data from the body of text provided the less irrelevant data the better."}, "golden_answer": "Smartphone Model: iPhone 15 Pro\nStorage Capacity: 256GB\nLaunch Price: $1,099", "model_id": "us.anthropic.claude-3-5-haiku-20241022-v1:0", "region": "us-east-2", "inference_profile": "standard", "input_token_cost": 0.000001, "output_token_cost": 0.000015}
{"text_prompt": "Extract the concert artist, venue, and date from this event description: 'Grammy-winner Taylor Swift will bring her record-breaking Eras Tour to Madison Square Garden on August 12, 2024, with special guest Paramore opening the show.'", "expected_output_tokens": 250, "task": {"task_type" :"Data Extraction", "task_criteria": "Extract the relevant data from the body of text provided the less irrelevant data the better."}, "golden_answer": "Concert Artist: Taylor Swift\nVenue: Madison Square Garden\nDate: August 12, 2024", "model_id": "us.anthropic.claude-3-5-haiku-20241022-v1:0", "region": "us-east-2", "inference_profile": "optimized", "input_token_cost": 0.0008, "output_token_cost": 0.004}
{"text_prompt": "Extract the job title, required experience, and salary range from this posting: 'We're looking for a Senior Software Engineer with at least 5 years of experience in cloud infrastructure. The position offers a competitive salary range of $120,000-$150,000 based on experience.'", "expected_output_tokens": 250, "task": {"task_type" :"Data Extraction", "task_criteria": "Extract the relevant data from the body of text provided the less irrelevant data the better."}, "golden_answer": "Job Title: Senior Software Engineer\nRequired Experience: 5 years\nSalary Range: $120,000-$150,000", "model_id": "us.anthropic.claude-3-5-haiku-20241022-v1:0", "region": "us-east-2", "inference_profile": "standard", "input_token_cost": 0.000001, "output_token_cost": 0.000015}
{"text_prompt": "Format the following employee data as a markdown table with headers for ID, Name, Department, and Salary: 1, Alice Johnson, Marketing, $75,000; 2, Robert Chen, Engineering, $95,000; 3, Maria Garcia, Finance, $82,000", "expected_output_tokens": 600, "task": {"task_type" :"Data Formatting", "task_criteria": "Format the relevant data from the body of text provided according to the users specifications"}, "golden_answer": "| ID | Name | Department | Salary |\n|----|------|------------|--------|\n| 1 | Alice Johnson | Marketing | $75,000 |\n| 2 | Robert Chen | Engineering | $95,000 |\n| 3 | Maria Garcia | Finance | $82,000 |", "model_id": "us.anthropic.claude-3-5-haiku-20241022-v1:0", "region": "us-east-2", "inference_profile": "standard", "input_token_cost": 0.000001, "output_token_cost": 0.000015}
{"text_prompt": "Convert this list of product information into a JSON array: Product: Laptop XPS, Price: $1,299, Stock: 45; Product: Wireless Mouse, Price: $29.99, Stock: 122; Product: 4K Monitor, Price: $349.50, Stock: 37", "expected_output_tokens": 600, "task": {"task_type" :"Data Formatting", "task_criteria": "Format the relevant data from the body of text provided according to the users specifications"}, "golden_answer": "[\n  {\n    \"product\": \"Laptop XPS\",\n    \"price\": \"$1,299\",\n    \"stock\": 45\n  },\n  {\n    \"product\": \"Wireless Mouse\",\n    \"price\": \"$29.99\",\n    \"stock\": 122\n  },\n  {\n    \"product\": \"4K Monitor\",\n    \"price\": \"$349.50\",\n    \"stock\": 37\n  }\n]", "model_id": "us.anthropic.claude-3-5-haiku-20241022-v1:0", "region": "us-east-2", "inference_profile": "optimized", "input_token_cost": 0.0008, "output_token_cost": 0.004}
{"text_prompt": "Format the following project timeline milestones as a bulleted list with dates and descriptions: Project Start, January 15, 2024, Initial team assembly; Design Phase, February 10, 2024, Complete wireframes and mockups; Development Sprint 1, March 5, 2024, Core functionality implementation; Testing, April 20, 2024, Quality assurance and bug fixes; Launch, May 30, 2024, Public release and marketing campaign", "expected_output_tokens": 600, "task": {"task_type" :"Data Formatting", "task_criteria": "Format the relevant data from the body of text provided according to the users specifications"}, "golden_answer": "• January 15, 2024: Project Start - Initial team assembly\n• February 10, 2024: Design Phase - Complete wireframes and mockups\n• March 5, 2024: Development Sprint 1 - Core functionality implementation\n• April 20, 2024: Testing - Quality assurance and bug fixes\n• May 30, 2024: Launch - Public release and marketing campaign", "model_id": "us.anthropic.claude-3-5-haiku-20241022-v1:0", "region": "us-east-2", "inference_profile": "standard", "input_token_cost": 0.000001, "output_token_cost": 0.000015}
{"text_prompt": "Transform this customer survey data into a CSV format with headers: Name, Age, Rating, Feedback. Include data for: John Smith, 34, 4.5, Very satisfied with service; Emily Wong, 28, 3.0, Product quality could be improved; Michael Brown, 42, 5.0, Excellent customer support; Sarah Kim, 31, 2.5, Delivery was delayed twice", "expected_output_tokens": 600, "task": {"task_type" :"Data Formatting", "task_criteria": "Format the relevant data from the body of text provided according to the users specifications"}, "golden_answer": "Name,Age,Rating,Feedback\nJohn Smith,34,4.5,\"Very satisfied with service\"\nEmily Wong,28,3.0,\"Product quality could be improved\"\nMichael Brown,42,5.0,\"Excellent customer support\"\nSarah Kim,31,2.5,\"Delivery was delayed twice\"", "model_id": "us.anthropic.claude-3-5-haiku-20241022-v1:0", "region": "us-east-2", "inference_profile": "optimized", "input_token_cost": 0.0008, "output_token_cost": 0.004}
{"text_prompt": "Format these book references in APA style: 1) Title: The Psychology of Decision Making, Author: Daniel Kahneman, Year: 2011, Publisher: Farrar, Straus and Giroux; 2) Title: Algorithms to Live By, Authors: Brian Christian and Tom Griffiths, Year: 2016, Publisher: Henry Holt and Co.; 3) Title: Sapiens: A Brief History of Humankind, Author: Yuval Noah Harari, Year: 2014, Publisher: Harper", "expected_output_tokens": 600, "task": {"task_type" :"Data Formatting", "task_criteria": "Format the relevant data from the body of text provided according to the users specifications"}, "golden_answer": "Kahneman, D. (2011). The Psychology of Decision Making. Farrar, Straus and Giroux.\n\nChristian, B., & Griffiths, T. (2016). Algorithms to Live By. Henry Holt and Co.\n\nHarari, Y. N. (2014). Sapiens: A Brief History of Humankind. Harper.", "model_id": "us.anthropic.claude-3-5-haiku-20241022-v1:0", "region": "us-east-2", "inference_profile": "standard", "input_token_cost": 0.000001, "output_token_cost": 0.000015}
{"text_prompt": "Create an HTML table with the following student exam results: Student: Alex Chen, Math: 94, Science: 88, English: 91; Student: Priya Patel, Math: 85, Science: 92, English: 89; Student: Jordan Taylor, Math: 79, Science: 86, English: 95", "expected_output_tokens": 600, "task": {"task_type" :"Data Formatting", "task_criteria": "Format the relevant data from the body of text provided according to the users specifications"}, "golden_answer": "<table>\n  <thead>\n    <tr>\n      <th>Student</th>\n      <th>Math</th>\n      <th>Science</th>\n      <th>English</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Alex Chen</td>\n      <td>94</td>\n      <td>88</td>\n      <td>91</td>\n    </tr>\n    <tr>\n      <td>Priya Patel</td>\n      <td>85</td>\n      <td>92</td>\n      <td>89</td>\n    </tr>\n    <tr>\n      <td>Jordan Taylor</td>\n      <td>79</td>\n      <td>86</td>\n      <td>95</td>\n    </tr>\n  </tbody>\n</table>", "model_id": "us.anthropic.claude-3-5-haiku-20241022-v1:0", "region": "us-east-2", "inference_profile": "optimized", "input_token_cost": 0.0008, "output_token_cost": 0.004}
{"text_prompt": "Format the following city data as YAML: City: San Francisco, Population: 884,363, Area: 46.87 sq mi, Founded: 1776; City: Chicago, Population: 2,746,388, Area: 227.63 sq mi, Founded: 1833; City: Austin, Population: 964,177, Area: 271.8 sq mi, Founded: 1839", "expected_output_tokens": 600, "task": {"task_type" :"Data Formatting", "task_criteria": "Format the relevant data from the body of text provided according to the users specifications"}, "golden_answer": "cities:\n  - name: San Francisco\n    population: 884363\n    area: 46.87\n    area_unit: sq mi\n    founded: 1776\n  - name: Chicago\n    population: 2746388\n    area: 227.63\n    area_unit: sq mi\n    founded: 1833\n  - name: Austin\n    population: 964177\n    area: 271.8\n    area_unit: sq mi\n    founded: 1839", "model_id": "us.anthropic.claude-3-5-haiku-20241022-v1:0", "region": "us-east-2", "inference_profile": "standard", "input_token_cost": 0.000001, "output_token_cost": 0.000015}
{"text_prompt": "Create a structured XML document for the following product inventory data: Category: Electronics, Item: Smartphone, Brand: TechX, Model: X20, Price: $699; Category: Electronics, Item: Laptop, Brand: ComputeMax, Model: UltraBook 15, Price: $1299; Category: Appliances, Item: Refrigerator, Brand: CoolTech, Model: FreezeKing 500, Price: $899", "expected_output_tokens": 600, "task": {"task_type" :"Data Formatting", "task_criteria": "Format the relevant data from the body of text provided according to the users specifications"}, "golden_answer": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<inventory>\n  <product category=\"Electronics\">\n    <item>Smartphone</item>\n    <brand>TechX</brand>\n    <model>X20</model>\n    <price>$699</price>\n  </product>\n  <product category=\"Electronics\">\n    <item>Laptop</item>\n    <brand>ComputeMax</brand>\n    <model>UltraBook 15</model>\n    <price>$1299</price>\n  </product>\n  <product category=\"Appliances\">\n    <item>Refrigerator</item>\n    <brand>CoolTech</brand>\n    <model>FreezeKing 500</model>\n    <price>$899</price>\n  </product>\n</inventory>", "model_id": "us.anthropic.claude-3-5-haiku-20241022-v1:0", "region": "us-east-2", "inference_profile": "optimized", "input_token_cost": 0.0008, "output_token_cost": 0.004}
{"text_prompt": "Format these contact details into a vCard format: Name: Jennifer Wilson, Title: Marketing Director, Company: Bright Ideas Inc., Email: jwilson@brightideas.com, Phone: (555) 123-4567, Address: 789 Innovation Parkway, Suite 300, San Jose, CA 95110", "expected_output_tokens": 600, "task": {"task_type" :"Data Formatting", "task_criteria": "Format the relevant data from the body of text provided according to the users specifications"}, "golden_answer": "BEGIN:VCARD\nVERSION:3.0\nN:Wilson;Jennifer;;;\nFN:Jennifer Wilson\nTITLE:Marketing Director\nORG:Bright Ideas Inc.\nEMAIL:jwilson@brightideas.com\nTEL;TYPE=WORK,VOICE:(555) 123-4567\nADR;TYPE=WORK:;;789 Innovation Parkway, Suite 300;San Jose;CA;95110;\nEND:VCARD", "model_id": "us.anthropic.claude-3-5-haiku-20241022-v1:0", "region": "us-east-2", "inference_profile": "standard", "input_token_cost": 0.000001, "output_token_cost": 0.000015}
{"text_prompt": "Format the following meeting minutes as a properly structured document with sections for attendees, agenda items, discussions, and action items: Meeting: Q3 Planning, Date: July 15, 2024, Attendees: David Kim, Lisa Chen, Marcus Johnson, Priya Singh. Agenda Items: Budget Review, Project Timeline, New Initiatives. Discussions: Budget currently on track with 5% variance, Project timeline delayed by two weeks due to vendor issues, Three new initiatives proposed for Q4. Action Items: David to update budget forecast by July 22, Lisa to contact vendor about timeline concerns, Team to vote on new initiatives by July 30.", "expected_output_tokens": 600, "task": {"task_type" :"Data Formatting", "task_criteria": "Format the relevant data from the body of text provided according to the users specifications"}, "golden_answer": "# Q3 Planning Meeting Minutes\n**Date:** July 15, 2024\n\n## Attendees\n- David Kim\n- Lisa Chen\n- Marcus Johnson\n- Priya Singh\n\n## Agenda Items\n1. Budget Review\n2. Project Timeline\n3. New Initiatives\n\n## Discussions\n- Budget currently on track with 5% variance\n- Project timeline delayed by two weeks due to vendor issues\n- Three new initiatives proposed for Q4\n\n## Action Items\n- [ ] David to update budget forecast by July 22\n- [ ] Lisa to contact vendor about timeline concerns\n- [ ] Team to vote on new initiatives by July 30", "model_id": "us.anthropic.claude-3-5-haiku-20241022-v1:0", "region": "us-east-2", "inference_profile": "optimized", "input_token_cost": 0.0008, "output_token_cost": 0.004}
{"text_prompt": "Generate the proper function call as plain arguments dictionary to calculate the distance between points in coordinates x = 3, y = 4 and x = 6 and y = 8 using the function: def calculate_distance(**kwargs):\n    \"\"\"Calculate the Euclidean distance between two points in 2D space.\n    \n    Args:\n        **kwargs: Keyword arguments\n            - x1 (float): X-coordinate of the first point\n            - y1 (float): Y-coordinate of the first point\n            - x2 (float): X-coordinate of the second point\n            - y2 (float): Y-coordinate of the second point\n        \n    Returns:\n        float: The Euclidean distance between the two points\n    \"\"\"\n    required_params = ['x1', 'y1', 'x2', 'y2']\n    for param in required_params:\n        if param not in kwargs:\n            raise ValueError(f\"The '{param}' parameter is required\")\n    \n    x1, y1 = kwargs['x1'], kwargs['y1']\n    x2, y2 = kwargs['x2'], kwargs['y2']\n    \n    distance = ((x2 - x1)**2 + (y2 - y1)**2)**0.5\n    return distance\n\nCalculate the distance between points (3, 4) and (6, 8)", "expected_output_tokens": 250, "task": {"task_type" :"Function Calling", "task_criteria": "For Function Calling: Valid JSON structure with correct function parameters must be provided."}, "golden_answer": "{'x1': 3, 'y1': 4, 'x2': 6, 'y2': 8}", "model_id": "openai/gpt-4o-mini", "region": "us-east-2", "inference_profile": "standard", "input_token_cost": 0.00000075, "output_token_cost": 0.00001}
{"text_prompt": "Generate the proper function call as plain arguments dictionary to validate email address john.doe@example.com using this function: def validate_email(**kwargs):\n    \"\"\"Validate if a string is a proper email address format.\n    \n    Args:\n        **kwargs: Keyword arguments\n            - email (str): The email address to validate\n            - check_domain (bool, optional): Whether to verify domain exists. Defaults to False.\n        \n    Returns:\n        dict: A dictionary with 'is_valid' (bool) and 'reason' (str, if invalid)\n    \"\"\"\n    if 'email' not in kwargs:\n        raise ValueError(\"The 'email' parameter is required\")\n    \n    email = kwargs['email']\n    check_domain = kwargs.get('check_domain', False)\n    \n    # Function implementation details\n    return {'is_valid': True, 'reason': ''}\n\nValidate this email: john.doe@example.com without domain checking", "expected_output_tokens": 250, "task": {"task_type" :"Function Calling", "task_criteria": "For Function Calling: Valid JSON structure with correct function parameters must be provided."}, "golden_answer": "{'email': 'john.doe@example.com', 'check_domain': False}", "model_id": "openai/gpt-4o-mini", "region": "us-east-2", "inference_profile": "standard", "input_token_cost": 0.00000075, "output_token_cost": 0.00001}
{"text_prompt": "Generate the proper function call as plain arguments dictionary to convert 500 USD to EUR  using this function: def convert_currency(**kwargs):\n    \"\"\"Convert an amount from one currency to another.\n    \n    Args:\n        **kwargs: Keyword arguments\n            - amount (float): The amount to convert\n            - from_currency (str): The source currency code (e.g., 'USD')\n            - to_currency (str): The target currency code (e.g., 'EUR')\n            - date (str, optional): Date for historical rates in YYYY-MM-DD format\n        \n    Returns:\n        dict: A dictionary with 'converted_amount' and 'rate'\n    \"\"\"\n    required_params = ['amount', 'from_currency', 'to_currency']\n    for param in required_params:\n        if param not in kwargs:\n            raise ValueError(f\"The '{param}' parameter is required\")\n    \n    # Function implementation details\n    return {'converted_amount': 0.0, 'rate': 0.0}\n\nConvert 500 USD to EUR using today's rate", "expected_output_tokens": 250, "task": {"task_type" :"Function Calling", "task_criteria": "For Function Calling: Valid JSON structure with correct function parameters must be provided."}, "golden_answer": "{'amount': 500, 'from_currency': 'USD', 'to_currency': 'EUR'}", "model_id": "openai/gpt-4o-mini", "region": "us-east-2", "inference_profile": "standard", "input_token_cost": 0.00000075, "output_token_cost": 0.00001}
{"text_prompt": "Generate the proper function call as plain arguments dictionary to analyze the sentiment of sentence 'The product exceeded my expectations and arrived ahead of schedule' using this function: def analyze_sentiment(**kwargs):\n    \"\"\"Analyze the sentiment of provided text.\n    \n    Args:\n        **kwargs: Keyword arguments\n            - text (str): The text to analyze\n            - language (str, optional): The language code. Defaults to 'en'.\n            - detailed (bool, optional): Whether to return detailed analysis. Defaults to False.\n        \n    Returns:\n        dict: A dictionary with sentiment scores and analysis\n    \"\"\"\n    if 'text' not in kwargs:\n        raise ValueError(\"The 'text' parameter is required\")\n    \n    # Function implementation details\n    return {'sentiment': 'positive', 'score': 0.8}\n\nAnalyze the sentiment of this review in English with detailed analysis: \"The product exceeded my expectations and arrived ahead of schedule.\"", "expected_output_tokens": 250, "task": {"task_type" :"Function Calling", "task_criteria": "For Function Calling: Valid JSON structure with correct function parameters must be provided."}, "golden_answer": "{'text': 'The product exceeded my expectations and arrived ahead of schedule.', 'language': 'en', 'detailed': True}", "model_id": "openai/gpt-4o-mini", "region": "us-east-2", "inference_profile": "standard", "input_token_cost": 0.00000075, "output_token_cost": 0.00001}
{"text_prompt": "Generate the proper function call as plain arguments dictionary to schedule a meeting using this function: def schedule_meeting(**kwargs):\n    \"\"\"Schedule a meeting on a calendar.\n    \n    Args:\n        **kwargs: Keyword arguments\n            - title (str): Meeting title\n            - start_time (str): Start time in ISO format (YYYY-MM-DDTHH:MM:SS)\n            - duration_minutes (int): Duration in minutes\n            - attendees (list): List of attendee email addresses\n            - location (str, optional): Meeting location or URL\n            - description (str, optional): Meeting description\n        \n    Returns:\n        dict: Meeting details with confirmation ID\n    \"\"\"\n    required_params = ['title', 'start_time', 'duration_minutes', 'attendees']\n    for param in required_params:\n        if param not in kwargs:\n            raise ValueError(f\"The '{param}' parameter is required\")\n    \n    # Function implementation details\n    return {'meeting_id': '12345', 'status': 'scheduled'}\n\nSchedule a project kickoff meeting tomorrow at 2pm for 60 minutes with team@example.com and client@example.com in Conference Room A with the description \"Discuss project timeline and goals\"", "expected_output_tokens": 250, "task": {"task_type" :"Function Calling", "task_criteria": "For Function Calling: Valid JSON structure with correct function parameters must be provided."}, "golden_answer": "{'title': 'Project Kickoff Meeting', 'start_time': '2023-11-15T14:00:00', 'duration_minutes': 60, 'attendees': ['team@example.com', 'client@example.com'], 'location': 'Conference Room A', 'description': 'Discuss project timeline and goals'}", "model_id": "openai/gpt-4o-mini", "region": "us-east-2", "inference_profile": "standard", "input_token_cost": 0.00000075, "output_token_cost": 0.00001}
{"text_prompt": "Generate the proper function call as plain arguments dictionary to convert 20 degrees Celsius to Fahrenheit using the function: def celsius_to_fahrenheit(**kwargs):\n    \"\"\"Convert temperature from Celsius to Fahrenheit.\n    \n    Args:\n        **kwargs: Keyword arguments\n            - celsius (float): Temperature in Celsius\n        \n    Returns:\n        float: Temperature in Fahrenheit\n    \"\"\"\n    if 'celsius' not in kwargs:\n        raise ValueError(\"The 'celsius' parameter is required\")\n    \n    celsius = kwargs['celsius']\n    fahrenheit = (celsius * 9/5) + 32\n    return fahrenheit", "expected_output_tokens": 250, "task": {"task_type" :"Function Calling", "task_criteria": "For Function Calling: Valid JSON structure with correct function parameters must be provided."}, "golden_answer": "{'celsius': 25}", "model_id": "openai/gpt-4o-mini", "region": "us-east-2", "inference_profile": "standard", "input_token_cost": 0.00000075, "output_token_cost": 0.00001}
{"text_prompt": "Generate the proper function call as plain arguments dictionary to calculate BMI for a person who is 175 cm tall and weighs 70 kg using the function: def calculate_bmi(**kwargs):\n    \"\"\"Calculate Body Mass Index (BMI).\n    \n    Args:\n        **kwargs: Keyword arguments\n            - height_cm (float): Height in centimeters\n            - weight_kg (float): Weight in kilograms\n        \n    Returns:\n        float: BMI value\n    \"\"\"", "expected_output_tokens": 250, "task": {"task_type" :"Function Calling", "task_criteria": "For Function Calling: Valid JSON structure with correct function parameters must be provided."}, "golden_answer": "{'height_cm': 175, 'weight_kg': 70}", "model_id": "openai/gpt-4o-mini", "region": "us-east-2", "inference_profile": "standard", "input_token_cost": 0.00000075, "output_token_cost": 0.00001}
{"text_prompt": "Generate the proper function call as plain arguments dictionary to calculate a monthly mortgage payment for a $300,000 loan with 4.5% annual interest rate and 30-year term using the function: def calculate_mortgage_payment(**kwargs):\n    \"\"\"Calculate monthly mortgage payment.\n    \n    Args:\n        **kwargs: Keyword arguments\n            - principal (float): Loan amount in dollars\n            - annual_interest_rate (float): Annual interest rate as a percentage\n            - term_years (int): Length of mortgage in years\n        \n    Returns:\n        float: Monthly payment amount\n    \"\"\"", "expected_output_tokens": 250, "task": {"task_type" :"Function Calling", "task_criteria": "For Function Calling: Valid JSON structure with correct function parameters must be provided."}, "golden_answer": "{'principal': 300000, 'annual_interest_rate': 4.5, 'term_years': 30}", "model_id": "openai/gpt-4o-mini", "region": "us-east-2", "inference_profile": "standard", "input_token_cost": 0.00000075, "output_token_cost": 0.00001}
{"text_prompt": "Generate the proper function call as plain arguments dictionary to create a password with 12 characters, including uppercase letters, lowercase letters, numbers, and special characters using the function: def generate_password(**kwargs):\n    \"\"\"Generate a secure random password.\n    \n    Args:\n        **kwargs: Keyword arguments\n            - length (int): Length of password\n            - include_uppercase (bool): Include uppercase letters\n            - include_lowercase (bool): Include lowercase letters\n            - include_numbers (bool): Include numeric digits\n            - include_special (bool): Include special characters\n        \n    Returns:\n        str: Generated password\n    \"\"\"", "expected_output_tokens": 250, "task": {"task_type" :"Function Calling", "task_criteria": "For Function Calling: Valid JSON structure with correct function parameters must be provided."}, "golden_answer": "{'length': 12, 'include_uppercase': True, 'include_lowercase': True, 'include_numbers': True, 'include_special': True}", "model_id": "openai/gpt-4o-mini", "region": "us-east-2", "inference_profile": "standard", "input_token_cost": 0.00000075, "output_token_cost": 0.00001}
{"text_prompt": "Generate the proper function call as plain arguments dictionary to calculate the distance between New York (40.7128° N, 74.0060° W) and Los Angeles (34.0522° N, 118.2437° W) using the function: def calculate_distance(**kwargs):\n    \"\"\"Calculate the distance between two points using the Haversine formula.\n    \n    Args:\n        **kwargs: Keyword arguments\n            - lat1 (float): Latitude of point 1 in degrees\n            - lon1 (float): Longitude of point 1 in degrees\n            - lat2 (float): Latitude of point 2 in degrees\n            - lon2 (float): Longitude of point 2 in degrees\n        \n    Returns:\n        float: Distance in kilometers\n    \"\"\"", "expected_output_tokens": 250, "task": {"task_type" :"Function Calling", "task_criteria": "For Function Calling: Valid JSON structure with correct function parameters must be provided."}, "golden_answer": "{'lat1': 40.7128, 'lon1': -74.0060, 'lat2': 34.0522, 'lon2': -118.2437}", "model_id": "openai/gpt-4o-mini", "region": "us-east-2", "inference_profile": "standard", "input_token_cost": 0.00000075, "output_token_cost": 0.00001}
{"text_prompt": "Extract the company name, CEO, and founding year from this text: 'Quantum Dynamics Ltd. was established in 2015 by Dr. Sarah Johnson, who continues to serve as the CEO. The company specializes in quantum computing solutions.'", "expected_output_tokens": 250, "task": {"task_type" :"Data Extraction", "task_criteria": "Extract the relevant data from the body of text provided the less irrelevant data the better."}, "golden_answer": "Company Name: Quantum Dynamics Ltd.\nCEO: Dr. Sarah Johnson\nFounding Year: 2015", "model_id": "openai/gpt-4o-mini", "region": "us-east-2", "inference_profile": "standard", "input_token_cost": 0.00000075, "output_token_cost": 0.00001}
{"text_prompt": "Extract the product name, price, and release date from this product announcement: 'The new GalaxyBook Pro will be available starting March 15, 2024, at a retail price of $1,299. This premium laptop features a 4K OLED display and 1TB SSD storage.'", "expected_output_tokens": 250, "task": {"task_type" :"Data Extraction", "task_criteria": "Extract the relevant data from the body of text provided the less irrelevant data the better."}, "golden_answer": "Product Name: GalaxyBook Pro\nPrice: $1,299\nRelease Date: March 15, 2024", "model_id": "openai/gpt-4o-mini", "region": "us-east-2", "inference_profile": "standard", "input_token_cost": 0.00000075, "output_token_cost": 0.00001}
{"text_prompt": "Extract the movie title, director, and release year from this review: 'Directed by Christopher Nolan, \"Inception\" (2010) remains one of the most thought-provoking science fiction films of the past decade, blending stunning visuals with a complex narrative about dreams within dreams.'", "expected_output_tokens": 250, "task": {"task_type" :"Data Extraction", "task_criteria": "Extract the relevant data from the body of text provided the less irrelevant data the better."}, "golden_answer": "Movie Title: Inception\nDirector: Christopher Nolan\nRelease Year: 2010", "model_id": "openai/gpt-4o-mini", "region": "us-east-2", "inference_profile": "standard", "input_token_cost": 0.00000075, "output_token_cost": 0.00001}
{"text_prompt": "Extract the conference name, location, and dates from this announcement: 'We are pleased to invite you to the International AI Summit taking place at the Zurich Convention Center from September 5-7, 2024. Early bird registration ends July 31.'", "expected_output_tokens": 250, "task": {"task_type" :"Data Extraction", "task_criteria": "Extract the relevant data from the body of text provided the less irrelevant data the better."}, "golden_answer": "Conference Name: International AI Summit\nLocation: Zurich Convention Center\nDates: September 5-7, 2024", "model_id": "openai/gpt-4o-mini", "region": "us-east-2", "inference_profile": "standard", "input_token_cost": 0.00000075, "output_token_cost": 0.00001}
{"text_prompt": "Extract the restaurant name, cuisine type, and address from this review: 'We had an amazing dinner at La Maison Bleu, a French bistro located at 142 Riverside Avenue. The escargot and coq au vin were authentic and delicious.'", "expected_output_tokens": 250, "task": {"task_type" :"Data Extraction", "task_criteria": "Extract the relevant data from the body of text provided the less irrelevant data the better."}, "golden_answer": "Restaurant Name: La Maison Bleu\nCuisine Type: French\nAddress: 142 Riverside Avenue", "model_id": "openai/gpt-4o-mini", "region": "us-east-2", "inference_profile": "standard", "input_token_cost": 0.00000075, "output_token_cost": 0.00001}
{"text_prompt": "Extract the book title, author, and publication year from this description: 'Published in 2019, \"The Silent Patient\" by Alex Michaelides quickly became a bestseller, captivating readers with its psychological thriller elements and unexpected twist ending.'", "expected_output_tokens": 250, "task": {"task_type" :"Data Extraction", "task_criteria": "Extract the relevant data from the body of text provided the less irrelevant data the better."}, "golden_answer": "Book Title: The Silent Patient\nAuthor: Alex Michaelides\nPublication Year: 2019", "model_id": "openai/gpt-4o-mini", "region": "us-east-2", "inference_profile": "standard", "input_token_cost": 0.00000075, "output_token_cost": 0.00001}
{"text_prompt": "Extract the university name, location, and founding date from this information: 'Stanford University, located in Stanford, California, was founded in 1885 by Leland and Jane Stanford in memory of their only child, Leland Stanford Jr.'", "expected_output_tokens": 250, "task": {"task_type" :"Data Extraction", "task_criteria": "Extract the relevant data from the body of text provided the less irrelevant data the better."}, "golden_answer": "University Name: Stanford University\nLocation: Stanford, California\nFounding Date: 1885", "model_id": "openai/gpt-4o-mini", "region": "us-east-2", "inference_profile": "standard", "input_token_cost": 0.00000075, "output_token_cost": 0.00001}
{"text_prompt": "Extract the smartphone model, storage capacity, and launch price from this specification: 'The iPhone 15 Pro with 256GB of storage was launched in September 2023 at a price point of $1,099, featuring the new A17 Pro chip and titanium frame.'", "expected_output_tokens": 250, "task": {"task_type" :"Data Extraction", "task_criteria": "Extract the relevant data from the body of text provided the less irrelevant data the better."}, "golden_answer": "Smartphone Model: iPhone 15 Pro\nStorage Capacity: 256GB\nLaunch Price: $1,099", "model_id": "openai/gpt-4o-mini", "region": "us-east-2", "inference_profile": "standard", "input_token_cost": 0.00000075, "output_token_cost": 0.00001}
{"text_prompt": "Extract the concert artist, venue, and date from this event description: 'Grammy-winner Taylor Swift will bring her record-breaking Eras Tour to Madison Square Garden on August 12, 2024, with special guest Paramore opening the show.'", "expected_output_tokens": 250, "task": {"task_type" :"Data Extraction", "task_criteria": "Extract the relevant data from the body of text provided the less irrelevant data the better."}, "golden_answer": "Concert Artist: Taylor Swift\nVenue: Madison Square Garden\nDate: August 12, 2024", "model_id": "openai/gpt-4o-mini", "region": "us-east-2", "inference_profile": "standard", "input_token_cost": 0.00000075, "output_token_cost": 0.00001}
{"text_prompt": "Extract the job title, required experience, and salary range from this posting: 'We're looking for a Senior Software Engineer with at least 5 years of experience in cloud infrastructure. The position offers a competitive salary range of $120,000-$150,000 based on experience.'", "expected_output_tokens": 250, "task": {"task_type" :"Data Extraction", "task_criteria": "Extract the relevant data from the body of text provided the less irrelevant data the better."}, "golden_answer": "Job Title: Senior Software Engineer\nRequired Experience: 5 years\nSalary Range: $120,000-$150,000", "model_id": "openai/gpt-4o-mini", "region": "us-east-2", "inference_profile": "standard", "input_token_cost": 0.00000075, "output_token_cost": 0.00001}
{"text_prompt": "Format the following employee data as a markdown table with headers for ID, Name, Department, and Salary: 1, Alice Johnson, Marketing, $75,000; 2, Robert Chen, Engineering, $95,000; 3, Maria Garcia, Finance, $82,000", "expected_output_tokens": 600, "task": {"task_type" :"Data Formatting", "task_criteria": "Format the relevant data from the body of text provided according to the users specifications"}, "golden_answer": "| ID | Name | Department | Salary |\n|----|------|------------|--------|\n| 1 | Alice Johnson | Marketing | $75,000 |\n| 2 | Robert Chen | Engineering | $95,000 |\n| 3 | Maria Garcia | Finance | $82,000 |", "model_id": "openai/gpt-4o-mini", "region": "us-east-2", "inference_profile": "standard", "input_token_cost": 0.00000075, "output_token_cost": 0.00001}
{"text_prompt": "Convert this list of product information into a JSON array: Product: Laptop XPS, Price: $1,299, Stock: 45; Product: Wireless Mouse, Price: $29.99, Stock: 122; Product: 4K Monitor, Price: $349.50, Stock: 37", "expected_output_tokens": 600, "task": {"task_type" :"Data Formatting", "task_criteria": "Format the relevant data from the body of text provided according to the users specifications"}, "golden_answer": "[\n  {\n    \"product\": \"Laptop XPS\",\n    \"price\": \"$1,299\",\n    \"stock\": 45\n  },\n  {\n    \"product\": \"Wireless Mouse\",\n    \"price\": \"$29.99\",\n    \"stock\": 122\n  },\n  {\n    \"product\": \"4K Monitor\",\n    \"price\": \"$349.50\",\n    \"stock\": 37\n  }\n]", "model_id": "openai/gpt-4o-mini", "region": "us-east-2", "inference_profile": "standard", "input_token_cost": 0.00000075, "output_token_cost": 0.00001}
{"text_prompt": "Format the following project timeline milestones as a bulleted list with dates and descriptions: Project Start, January 15, 2024, Initial team assembly; Design Phase, February 10, 2024, Complete wireframes and mockups; Development Sprint 1, March 5, 2024, Core functionality implementation; Testing, April 20, 2024, Quality assurance and bug fixes; Launch, May 30, 2024, Public release and marketing campaign", "expected_output_tokens": 600, "task": {"task_type" :"Data Formatting", "task_criteria": "Format the relevant data from the body of text provided according to the users specifications"}, "golden_answer": "• January 15, 2024: Project Start - Initial team assembly\n• February 10, 2024: Design Phase - Complete wireframes and mockups\n• March 5, 2024: Development Sprint 1 - Core functionality implementation\n• April 20, 2024: Testing - Quality assurance and bug fixes\n• May 30, 2024: Launch - Public release and marketing campaign", "model_id": "openai/gpt-4o-mini", "region": "us-east-2", "inference_profile": "standard", "input_token_cost": 0.00000075, "output_token_cost": 0.00001}
{"text_prompt": "Transform this customer survey data into a CSV format with headers: Name, Age, Rating, Feedback. Include data for: John Smith, 34, 4.5, Very satisfied with service; Emily Wong, 28, 3.0, Product quality could be improved; Michael Brown, 42, 5.0, Excellent customer support; Sarah Kim, 31, 2.5, Delivery was delayed twice", "expected_output_tokens": 600, "task": {"task_type" :"Data Formatting", "task_criteria": "Format the relevant data from the body of text provided according to the users specifications"}, "golden_answer": "Name,Age,Rating,Feedback\nJohn Smith,34,4.5,\"Very satisfied with service\"\nEmily Wong,28,3.0,\"Product quality could be improved\"\nMichael Brown,42,5.0,\"Excellent customer support\"\nSarah Kim,31,2.5,\"Delivery was delayed twice\"", "model_id": "openai/gpt-4o-mini", "region": "us-east-2", "inference_profile": "standard", "input_token_cost": 0.00000075, "output_token_cost": 0.00001}
{"text_prompt": "Format these book references in APA style: 1) Title: The Psychology of Decision Making, Author: Daniel Kahneman, Year: 2011, Publisher: Farrar, Straus and Giroux; 2) Title: Algorithms to Live By, Authors: Brian Christian and Tom Griffiths, Year: 2016, Publisher: Henry Holt and Co.; 3) Title: Sapiens: A Brief History of Humankind, Author: Yuval Noah Harari, Year: 2014, Publisher: Harper", "expected_output_tokens": 600, "task": {"task_type" :"Data Formatting", "task_criteria": "Format the relevant data from the body of text provided according to the users specifications"}, "golden_answer": "Kahneman, D. (2011). The Psychology of Decision Making. Farrar, Straus and Giroux.\n\nChristian, B., & Griffiths, T. (2016). Algorithms to Live By. Henry Holt and Co.\n\nHarari, Y. N. (2014). Sapiens: A Brief History of Humankind. Harper.", "model_id": "openai/gpt-4o-mini", "region": "us-east-2", "inference_profile": "standard", "input_token_cost": 0.00000075, "output_token_cost": 0.00001}
{"text_prompt": "Create an HTML table with the following student exam results: Student: Alex Chen, Math: 94, Science: 88, English: 91; Student: Priya Patel, Math: 85, Science: 92, English: 89; Student: Jordan Taylor, Math: 79, Science: 86, English: 95", "expected_output_tokens": 600, "task": {"task_type" :"Data Formatting", "task_criteria": "Format the relevant data from the body of text provided according to the users specifications"}, "golden_answer": "<table>\n  <thead>\n    <tr>\n      <th>Student</th>\n      <th>Math</th>\n      <th>Science</th>\n      <th>English</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Alex Chen</td>\n      <td>94</td>\n      <td>88</td>\n      <td>91</td>\n    </tr>\n    <tr>\n      <td>Priya Patel</td>\n      <td>85</td>\n      <td>92</td>\n      <td>89</td>\n    </tr>\n    <tr>\n      <td>Jordan Taylor</td>\n      <td>79</td>\n      <td>86</td>\n      <td>95</td>\n    </tr>\n  </tbody>\n</table>", "model_id": "openai/gpt-4o-mini", "region": "us-east-2", "inference_profile": "standard", "input_token_cost": 0.00000075, "output_token_cost": 0.00001}
{"text_prompt": "Format the following city data as YAML: City: San Francisco, Population: 884,363, Area: 46.87 sq mi, Founded: 1776; City: Chicago, Population: 2,746,388, Area: 227.63 sq mi, Founded: 1833; City: Austin, Population: 964,177, Area: 271.8 sq mi, Founded: 1839", "expected_output_tokens": 600, "task": {"task_type" :"Data Formatting", "task_criteria": "Format the relevant data from the body of text provided according to the users specifications"}, "golden_answer": "cities:\n  - name: San Francisco\n    population: 884363\n    area: 46.87\n    area_unit: sq mi\n    founded: 1776\n  - name: Chicago\n    population: 2746388\n    area: 227.63\n    area_unit: sq mi\n    founded: 1833\n  - name: Austin\n    population: 964177\n    area: 271.8\n    area_unit: sq mi\n    founded: 1839", "model_id": "openai/gpt-4o-mini", "region": "us-east-2", "inference_profile": "standard", "input_token_cost": 0.00000075, "output_token_cost": 0.00001}
{"text_prompt": "Create a structured XML document for the following product inventory data: Category: Electronics, Item: Smartphone, Brand: TechX, Model: X20, Price: $699; Category: Electronics, Item: Laptop, Brand: ComputeMax, Model: UltraBook 15, Price: $1299; Category: Appliances, Item: Refrigerator, Brand: CoolTech, Model: FreezeKing 500, Price: $899", "expected_output_tokens": 600, "task": {"task_type" :"Data Formatting", "task_criteria": "Format the relevant data from the body of text provided according to the users specifications"}, "golden_answer": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<inventory>\n  <product category=\"Electronics\">\n    <item>Smartphone</item>\n    <brand>TechX</brand>\n    <model>X20</model>\n    <price>$699</price>\n  </product>\n  <product category=\"Electronics\">\n    <item>Laptop</item>\n    <brand>ComputeMax</brand>\n    <model>UltraBook 15</model>\n    <price>$1299</price>\n  </product>\n  <product category=\"Appliances\">\n    <item>Refrigerator</item>\n    <brand>CoolTech</brand>\n    <model>FreezeKing 500</model>\n    <price>$899</price>\n  </product>\n</inventory>", "model_id": "openai/gpt-4o-mini", "region": "us-east-2", "inference_profile": "standard", "input_token_cost": 0.00000075, "output_token_cost": 0.00001}
{"text_prompt": "Format these contact details into a vCard format: Name: Jennifer Wilson, Title: Marketing Director, Company: Bright Ideas Inc., Email: jwilson@brightideas.com, Phone: (555) 123-4567, Address: 789 Innovation Parkway, Suite 300, San Jose, CA 95110", "expected_output_tokens": 600, "task": {"task_type" :"Data Formatting", "task_criteria": "Format the relevant data from the body of text provided according to the users specifications"}, "golden_answer": "BEGIN:VCARD\nVERSION:3.0\nN:Wilson;Jennifer;;;\nFN:Jennifer Wilson\nTITLE:Marketing Director\nORG:Bright Ideas Inc.\nEMAIL:jwilson@brightideas.com\nTEL;TYPE=WORK,VOICE:(555) 123-4567\nADR;TYPE=WORK:;;789 Innovation Parkway, Suite 300;San Jose;CA;95110;\nEND:VCARD", "model_id": "openai/gpt-4o-mini", "region": "us-east-2", "inference_profile": "standard", "input_token_cost": 0.00000075, "output_token_cost": 0.00001}
{"text_prompt": "Format the following meeting minutes as a properly structured document with sections for attendees, agenda items, discussions, and action items: Meeting: Q3 Planning, Date: July 15, 2024, Attendees: David Kim, Lisa Chen, Marcus Johnson, Priya Singh. Agenda Items: Budget Review, Project Timeline, New Initiatives. Discussions: Budget currently on track with 5% variance, Project timeline delayed by two weeks due to vendor issues, Three new initiatives proposed for Q4. Action Items: David to update budget forecast by July 22, Lisa to contact vendor about timeline concerns, Team to vote on new initiatives by July 30.", "expected_output_tokens": 600, "task": {"task_type" :"Data Formatting", "task_criteria": "Format the relevant data from the body of text provided according to the users specifications"}, "golden_answer": "# Q3 Planning Meeting Minutes\n**Date:** July 15, 2024\n\n## Attendees\n- David Kim\n- Lisa Chen\n- Marcus Johnson\n- Priya Singh\n\n## Agenda Items\n1. Budget Review\n2. Project Timeline\n3. New Initiatives\n\n## Discussions\n- Budget currently on track with 5% variance\n- Project timeline delayed by two weeks due to vendor issues\n- Three new initiatives proposed for Q4\n\n## Action Items\n- [ ] David to update budget forecast by July 22\n- [ ] Lisa to contact vendor about timeline concerns\n- [ ] Team to vote on new initiatives by July 30", "model_id": "openai/gpt-4o-mini", "region": "us-east-2", "inference_profile": "standard", "input_token_cost": 0.00000075, "output_token_cost": 0.00001}
{"text_prompt": "Generate the proper function call as plain arguments dictionary to calculate the distance between points in coordinates x = 3, y = 4 and x = 6 and y = 8 using the function: def calculate_distance(**kwargs):\n    \"\"\"Calculate the Euclidean distance between two points in 2D space.\n    \n    Args:\n        **kwargs: Keyword arguments\n            - x1 (float): X-coordinate of the first point\n            - y1 (float): Y-coordinate of the first point\n            - x2 (float): X-coordinate of the second point\n            - y2 (float): Y-coordinate of the second point\n        \n    Returns:\n        float: The Euclidean distance between the two points\n    \"\"\"\n    required_params = ['x1', 'y1', 'x2', 'y2']\n    for param in required_params:\n        if param not in kwargs:\n            raise ValueError(f\"The '{param}' parameter is required\")\n    \n    x1, y1 = kwargs['x1'], kwargs['y1']\n    x2, y2 = kwargs['x2'], kwargs['y2']\n    \n    distance = ((x2 - x1)**2 + (y2 - y1)**2)**0.5\n    return distance\n\nCalculate the distance between points (3, 4) and (6, 8)", "expected_output_tokens": 250, "task": {"task_type" :"Function Calling", "task_criteria": "For Function Calling: Valid JSON structure with correct function parameters must be provided."}, "golden_answer": "{'x1': 3, 'y1': 4, 'x2': 6, 'y2': 8}", "model_id": "us.meta.llama3-3-70b-instruct-v1:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00072, "output_token_cost": 0.00072}
{"text_prompt": "Generate the proper function call as plain arguments dictionary to validate email address john.doe@example.com using this function: def validate_email(**kwargs):\n    \"\"\"Validate if a string is a proper email address format.\n    \n    Args:\n        **kwargs: Keyword arguments\n            - email (str): The email address to validate\n            - check_domain (bool, optional): Whether to verify domain exists. Defaults to False.\n        \n    Returns:\n        dict: A dictionary with 'is_valid' (bool) and 'reason' (str, if invalid)\n    \"\"\"\n    if 'email' not in kwargs:\n        raise ValueError(\"The 'email' parameter is required\")\n    \n    email = kwargs['email']\n    check_domain = kwargs.get('check_domain', False)\n    \n    # Function implementation details\n    return {'is_valid': True, 'reason': ''}\n\nValidate this email: john.doe@example.com without domain checking", "expected_output_tokens": 250, "task": {"task_type" :"Function Calling", "task_criteria": "For Function Calling: Valid JSON structure with correct function parameters must be provided."}, "golden_answer": "{'email': 'john.doe@example.com', 'check_domain': False}", "model_id": "us.meta.llama3-3-70b-instruct-v1:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00072, "output_token_cost": 0.00072}
{"text_prompt": "Generate the proper function call as plain arguments dictionary to convert 500 USD to EUR using this function: def convert_currency(**kwargs):\n    \"\"\"Convert an amount from one currency to another.\n    \n    Args:\n        **kwargs: Keyword arguments\n            - amount (float): The amount to convert\n            - from_currency (str): The source currency code (e.g., 'USD')\n            - to_currency (str): The target currency code (e.g., 'EUR')\n            - date (str, optional): Date for historical rates in YYYY-MM-DD format\n        \n    Returns:\n        dict: A dictionary with 'converted_amount' and 'rate'\n    \"\"\"\n    required_params = ['amount', 'from_currency', 'to_currency']\n    for param in required_params:\n        if param not in kwargs:\n            raise ValueError(f\"The '{param}' parameter is required\")\n    \n    # Function implementation details\n    return {'converted_amount': 0.0, 'rate': 0.0}\n\nConvert 500 USD to EUR using today's rate", "expected_output_tokens": 250, "task": {"task_type" :"Function Calling", "task_criteria": "For Function Calling: Valid JSON structure with correct function parameters must be provided."}, "golden_answer": "{'amount': 500, 'from_currency': 'USD', 'to_currency': 'EUR'}", "model_id": "us.meta.llama3-3-70b-instruct-v1:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00072, "output_token_cost": 0.00072}
{"text_prompt": "Generate the proper function call as plain arguments dictionary to analyze the sentiment of sentence 'The product exceeded my expectations and arrived ahead of schedule' using this function: def analyze_sentiment(**kwargs):\n    \"\"\"Analyze the sentiment of provided text.\n    \n    Args:\n        **kwargs: Keyword arguments\n            - text (str): The text to analyze\n            - language (str, optional): The language code. Defaults to 'en'.\n            - detailed (bool, optional): Whether to return detailed analysis. Defaults to False.\n        \n    Returns:\n        dict: A dictionary with sentiment scores and analysis\n    \"\"\"\n    if 'text' not in kwargs:\n        raise ValueError(\"The 'text' parameter is required\")\n    \n    # Function implementation details\n    return {'sentiment': 'positive', 'score': 0.8}\n\nAnalyze the sentiment of this review in English with detailed analysis: \"The product exceeded my expectations and arrived ahead of schedule.\"", "expected_output_tokens": 250, "task": {"task_type" :"Function Calling", "task_criteria": "For Function Calling: Valid JSON structure with correct function parameters must be provided."}, "golden_answer": "{'text': 'The product exceeded my expectations and arrived ahead of schedule.', 'language': 'en', 'detailed': True}", "model_id": "us.meta.llama3-3-70b-instruct-v1:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00072, "output_token_cost": 0.00072}
{"text_prompt": "Generate the proper function call as plain arguments dictionary to schedule a meeting using this function: def schedule_meeting(**kwargs):\n    \"\"\"Schedule a meeting on a calendar.\n    \n    Args:\n        **kwargs: Keyword arguments\n            - title (str): Meeting title\n            - start_time (str): Start time in ISO format (YYYY-MM-DDTHH:MM:SS)\n            - duration_minutes (int): Duration in minutes\n            - attendees (list): List of attendee email addresses\n            - location (str, optional): Meeting location or URL\n            - description (str, optional): Meeting description\n        \n    Returns:\n        dict: Meeting details with confirmation ID\n    \"\"\"\n    required_params = ['title', 'start_time', 'duration_minutes', 'attendees']\n    for param in required_params:\n        if param not in kwargs:\n            raise ValueError(f\"The '{param}' parameter is required\")\n    \n    # Function implementation details\n    return {'meeting_id': '12345', 'status': 'scheduled'}\n\nSchedule a project kickoff meeting tomorrow at 2pm for 60 minutes with team@example.com and client@example.com in Conference Room A with the description \"Discuss project timeline and goals\"", "expected_output_tokens": 250, "task": {"task_type" :"Function Calling", "task_criteria": "For Function Calling: Valid JSON structure with correct function parameters must be provided."}, "golden_answer": "{'title': 'Project Kickoff Meeting', 'start_time': '2023-11-15T14:00:00', 'duration_minutes': 60, 'attendees': ['team@example.com', 'client@example.com'], 'location': 'Conference Room A', 'description': 'Discuss project timeline and goals'}", "model_id": "us.meta.llama3-3-70b-instruct-v1:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00072, "output_token_cost": 0.00072}
{"text_prompt": "Generate the proper function call as plain arguments dictionary to calculate BMI for a person who is 175 cm tall and weighs 70 kg using the function: def calculate_bmi(**kwargs):\n    \"\"\"Calculate Body Mass Index (BMI).\n    \n    Args:\n        **kwargs: Keyword arguments\n            - height_cm (float): Height in centimeters\n            - weight_kg (float): Weight in kilograms\n        \n    Returns:\n        float: BMI value\n    \"\"\"", "expected_output_tokens": 250, "task": {"task_type" :"Function Calling", "task_criteria": "For Function Calling: Valid JSON structure with correct function parameters must be provided."}, "golden_answer": "{'height_cm': 175, 'weight_kg': 70}", "model_id": "us.meta.llama3-3-70b-instruct-v1:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00072, "output_token_cost": 0.00072}
{"text_prompt": "Generate the proper function call as plain arguments dictionary to calculate a monthly mortgage payment for a $300,000 loan with 4.5% annual interest rate and 30-year term using the function: def calculate_mortgage_payment(**kwargs):\n    \"\"\"Calculate monthly mortgage payment.\n    \n    Args:\n        **kwargs: Keyword arguments\n            - principal (float): Loan amount in dollars\n            - annual_interest_rate (float): Annual interest rate as a percentage\n            - term_years (int): Length of mortgage in years\n        \n    Returns:\n        float: Monthly payment amount\n    \"\"\"", "expected_output_tokens": 250, "task": {"task_type" :"Function Calling", "task_criteria": "For Function Calling: Valid JSON structure with correct function parameters must be provided."}, "golden_answer": "{'principal': 300000, 'annual_interest_rate': 4.5, 'term_years': 30}", "model_id": "us.meta.llama3-3-70b-instruct-v1:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00072, "output_token_cost": 0.00072}
{"text_prompt": "Generate the proper function call as plain arguments dictionary to create a password with 12 characters, including uppercase letters, lowercase letters, numbers, and special characters using the function: def generate_password(**kwargs):\n    \"\"\"Generate a secure random password.\n    \n    Args:\n        **kwargs: Keyword arguments\n            - length (int): Length of password\n            - include_uppercase (bool): Include uppercase letters\n            - include_lowercase (bool): Include lowercase letters\n            - include_numbers (bool): Include numeric digits\n            - include_special (bool): Include special characters\n        \n    Returns:\n        str: Generated password\n    \"\"\"", "expected_output_tokens": 250, "task": {"task_type" :"Function Calling", "task_criteria": "For Function Calling: Valid JSON structure with correct function parameters must be provided."}, "golden_answer": "{'length': 12, 'include_uppercase': True, 'include_lowercase': True, 'include_numbers': True, 'include_special': True}", "model_id": "us.meta.llama3-3-70b-instruct-v1:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00072, "output_token_cost": 0.00072}
{"text_prompt": "Generate the proper function call as plain arguments dictionary to calculate the distance between New York (40.7128° N, 74.0060° W) and Los Angeles (34.0522° N, 118.2437° W) using the function: def calculate_distance(**kwargs):\n    \"\"\"Calculate the distance between two points using the Haversine formula.\n    \n    Args:\n        **kwargs: Keyword arguments\n            - lat1 (float): Latitude of point 1 in degrees\n            - lon1 (float): Longitude of point 1 in degrees\n            - lat2 (float): Latitude of point 2 in degrees\n            - lon2 (float): Longitude of point 2 in degrees\n        \n    Returns:\n        float: Distance in kilometers\n    \"\"\"", "expected_output_tokens": 250, "task": {"task_type" :"Function Calling", "task_criteria": "For Function Calling: Valid JSON structure with correct function parameters must be provided."}, "golden_answer": "{'lat1': 40.7128, 'lon1': -74.0060, 'lat2': 34.0522, 'lon2': -118.2437}", "model_id": "us.meta.llama3-3-70b-instruct-v1:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00072, "output_token_cost": 0.00072}
{"text_prompt": "Generate the proper function call as plain arguments dictionary to calculate the distance between New York (40.7128° N, 74.0060° W) and Los Angeles (34.0522° N, 118.2437° W) using the function: def calculate_distance(**kwargs):\n    \"\"\"Calculate the distance between two points using the Haversine formula.\n    \n    Args:\n        **kwargs: Keyword arguments\n            - lat1 (float): Latitude of point 1 in degrees\n            - lon1 (float): Longitude of point 1 in degrees\n            - lat2 (float): Latitude of point 2 in degrees\n            - lon2 (float): Longitude of point 2 in degrees\n        \n    Returns:\n        float: Distance in kilometers\n    \"\"\"", "expected_output_tokens": 250, "task": {"task_type" :"Function Calling", "task_criteria": "For Function Calling: Valid JSON structure with correct function parameters must be provided."}, "golden_answer": "{'lat1': 40.7128, 'lon1': -74.0060, 'lat2': 34.0522, 'lon2': -118.2437}", "model_id": "us.meta.llama3-3-70b-instruct-v1:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00072, "output_token_cost": 0.00072}
{"text_prompt": "Extract the company name, CEO, and founding year from this text: 'Quantum Dynamics Ltd. was established in 2015 by Dr. Sarah Johnson, who continues to serve as the CEO. The company specializes in quantum computing solutions.'", "expected_output_tokens": 250, "task": {"task_type" :"Data Extraction", "task_criteria": "Extract the relevant data from the body of text provided the less irrelevant data the better."}, "golden_answer": "Company Name: Quantum Dynamics Ltd.\nCEO: Dr. Sarah Johnson\nFounding Year: 2015", "model_id": "us.meta.llama3-3-70b-instruct-v1:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00072, "output_token_cost": 0.00072}
{"text_prompt": "Extract the product name, price, and release date from this product announcement: 'The new GalaxyBook Pro will be available starting March 15, 2024, at a retail price of $1,299. This premium laptop features a 4K OLED display and 1TB SSD storage.'", "expected_output_tokens": 250, "task": {"task_type" :"Data Extraction", "task_criteria": "Extract the relevant data from the body of text provided the less irrelevant data the better."}, "golden_answer": "Product Name: GalaxyBook Pro\nPrice: $1,299\nRelease Date: March 15, 2024", "model_id": "us.meta.llama3-3-70b-instruct-v1:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00072, "output_token_cost": 0.00072}
{"text_prompt": "Extract the movie title, director, and release year from this review: 'Directed by Christopher Nolan, \"Inception\" (2010) remains one of the most thought-provoking science fiction films of the past decade, blending stunning visuals with a complex narrative about dreams within dreams.'", "expected_output_tokens": 250, "task": {"task_type" :"Data Extraction", "task_criteria": "Extract the relevant data from the body of text provided the less irrelevant data the better."}, "golden_answer": "Movie Title: Inception\nDirector: Christopher Nolan\nRelease Year: 2010", "model_id": "us.meta.llama3-3-70b-instruct-v1:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00072, "output_token_cost": 0.00072}
{"text_prompt": "Extract the conference name, location, and dates from this announcement: 'We are pleased to invite you to the International AI Summit taking place at the Zurich Convention Center from September 5-7, 2024. Early bird registration ends July 31.'", "expected_output_tokens": 250, "task": {"task_type" :"Data Extraction", "task_criteria": "Extract the relevant data from the body of text provided the less irrelevant data the better."}, "golden_answer": "Conference Name: International AI Summit\nLocation: Zurich Convention Center\nDates: September 5-7, 2024", "model_id": "us.meta.llama3-3-70b-instruct-v1:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00072, "output_token_cost": 0.00072}
{"text_prompt": "Extract the restaurant name, cuisine type, and address from this review: 'We had an amazing dinner at La Maison Bleu, a French bistro located at 142 Riverside Avenue. The escargot and coq au vin were authentic and delicious.'", "expected_output_tokens": 250, "task": {"task_type" :"Data Extraction", "task_criteria": "Extract the relevant data from the body of text provided the less irrelevant data the better."}, "golden_answer": "Restaurant Name: La Maison Bleu\nCuisine Type: French\nAddress: 142 Riverside Avenue", "model_id": "us.meta.llama3-3-70b-instruct-v1:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00072, "output_token_cost": 0.00072}
{"text_prompt": "Extract the book title, author, and publication year from this description: 'Published in 2019, \"The Silent Patient\" by Alex Michaelides quickly became a bestseller, captivating readers with its psychological thriller elements and unexpected twist ending.'", "expected_output_tokens": 250, "task": {"task_type" :"Data Extraction", "task_criteria": "Extract the relevant data from the body of text provided the less irrelevant data the better."}, "golden_answer": "Book Title: The Silent Patient\nAuthor: Alex Michaelides\nPublication Year: 2019", "model_id": "us.meta.llama3-3-70b-instruct-v1:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00072, "output_token_cost": 0.00072}
{"text_prompt": "Extract the university name, location, and founding date from this information: 'Stanford University, located in Stanford, California, was founded in 1885 by Leland and Jane Stanford in memory of their only child, Leland Stanford Jr.'", "expected_output_tokens": 250, "task": {"task_type" :"Data Extraction", "task_criteria": "Extract the relevant data from the body of text provided the less irrelevant data the better."}, "golden_answer": "University Name: Stanford University\nLocation: Stanford, California\nFounding Date: 1885", "model_id": "us.meta.llama3-3-70b-instruct-v1:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00072, "output_token_cost": 0.00072}
{"text_prompt": "Extract the smartphone model, storage capacity, and launch price from this specification: 'The iPhone 15 Pro with 256GB of storage was launched in September 2023 at a price point of $1,099, featuring the new A17 Pro chip and titanium frame.'", "expected_output_tokens": 250, "task": {"task_type" :"Data Extraction", "task_criteria": "Extract the relevant data from the body of text provided the less irrelevant data the better."}, "golden_answer": "Smartphone Model: iPhone 15 Pro\nStorage Capacity: 256GB\nLaunch Price: $1,099", "model_id": "us.meta.llama3-3-70b-instruct-v1:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00072, "output_token_cost": 0.00072}
{"text_prompt": "Extract the concert artist, venue, and date from this event description: 'Grammy-winner Taylor Swift will bring her record-breaking Eras Tour to Madison Square Garden on August 12, 2024, with special guest Paramore opening the show.'", "expected_output_tokens": 250, "task": {"task_type" :"Data Extraction", "task_criteria": "Extract the relevant data from the body of text provided the less irrelevant data the better."}, "golden_answer": "Concert Artist: Taylor Swift\nVenue: Madison Square Garden\nDate: August 12, 2024", "model_id": "us.meta.llama3-3-70b-instruct-v1:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00072, "output_token_cost": 0.00072}
{"text_prompt": "Extract the job title, required experience, and salary range from this posting: 'We're looking for a Senior Software Engineer with at least 5 years of experience in cloud infrastructure. The position offers a competitive salary range of $120,000-$150,000 based on experience.'", "expected_output_tokens": 250, "task": {"task_type" :"Data Extraction", "task_criteria": "Extract the relevant data from the body of text provided the less irrelevant data the better."}, "golden_answer": "Job Title: Senior Software Engineer\nRequired Experience: 5 years\nSalary Range: $120,000-$150,000", "model_id": "us.meta.llama3-3-70b-instruct-v1:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00072, "output_token_cost": 0.00072}
{"text_prompt": "Format the following employee data as a markdown table with headers for ID, Name, Department, and Salary: 1, Alice Johnson, Marketing, $75,000; 2, Robert Chen, Engineering, $95,000; 3, Maria Garcia, Finance, $82,000", "expected_output_tokens": 600, "task": {"task_type" :"Data Formatting", "task_criteria": "Format the relevant data from the body of text provided according to the users specifications"}, "golden_answer": "| ID | Name | Department | Salary |\n|----|------|------------|--------|\n| 1 | Alice Johnson | Marketing | $75,000 |\n| 2 | Robert Chen | Engineering | $95,000 |\n| 3 | Maria Garcia | Finance | $82,000 |", "model_id": "us.meta.llama3-3-70b-instruct-v1:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00072, "output_token_cost": 0.00072}
{"text_prompt": "Convert this list of product information into a JSON array: Product: Laptop XPS, Price: $1,299, Stock: 45; Product: Wireless Mouse, Price: $29.99, Stock: 122; Product: 4K Monitor, Price: $349.50, Stock: 37", "expected_output_tokens": 600, "task": {"task_type" :"Data Formatting", "task_criteria": "Format the relevant data from the body of text provided according to the users specifications"}, "golden_answer": "[\n  {\n    \"product\": \"Laptop XPS\",\n    \"price\": \"$1,299\",\n    \"stock\": 45\n  },\n  {\n    \"product\": \"Wireless Mouse\",\n    \"price\": \"$29.99\",\n    \"stock\": 122\n  },\n  {\n    \"product\": \"4K Monitor\",\n    \"price\": \"$349.50\",\n    \"stock\": 37\n  }\n]", "model_id": "us.meta.llama3-3-70b-instruct-v1:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00072, "output_token_cost": 0.00072}
{"text_prompt": "Format the following project timeline milestones as a bulleted list with dates and descriptions: Project Start, January 15, 2024, Initial team assembly; Design Phase, February 10, 2024, Complete wireframes and mockups; Development Sprint 1, March 5, 2024, Core functionality implementation; Testing, April 20, 2024, Quality assurance and bug fixes; Launch, May 30, 2024, Public release and marketing campaign", "expected_output_tokens": 600, "task": {"task_type" :"Data Formatting", "task_criteria": "Format the relevant data from the body of text provided according to the users specifications"}, "golden_answer": "• January 15, 2024: Project Start - Initial team assembly\n• February 10, 2024: Design Phase - Complete wireframes and mockups\n• March 5, 2024: Development Sprint 1 - Core functionality implementation\n• April 20, 2024: Testing - Quality assurance and bug fixes\n• May 30, 2024: Launch - Public release and marketing campaign", "model_id": "us.meta.llama3-3-70b-instruct-v1:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00072, "output_token_cost": 0.00072}
{"text_prompt": "Transform this customer survey data into a CSV format with headers: Name, Age, Rating, Feedback. Include data for: John Smith, 34, 4.5, Very satisfied with service; Emily Wong, 28, 3.0, Product quality could be improved; Michael Brown, 42, 5.0, Excellent customer support; Sarah Kim, 31, 2.5, Delivery was delayed twice", "expected_output_tokens": 600, "task": {"task_type" :"Data Formatting", "task_criteria": "Format the relevant data from the body of text provided according to the users specifications"}, "golden_answer": "Name,Age,Rating,Feedback\nJohn Smith,34,4.5,\"Very satisfied with service\"\nEmily Wong,28,3.0,\"Product quality could be improved\"\nMichael Brown,42,5.0,\"Excellent customer support\"\nSarah Kim,31,2.5,\"Delivery was delayed twice\"", "model_id": "us.meta.llama3-3-70b-instruct-v1:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00072, "output_token_cost": 0.00072}
{"text_prompt": "Format these book references in APA style: 1) Title: The Psychology of Decision Making, Author: Daniel Kahneman, Year: 2011, Publisher: Farrar, Straus and Giroux; 2) Title: Algorithms to Live By, Authors: Brian Christian and Tom Griffiths, Year: 2016, Publisher: Henry Holt and Co.; 3) Title: Sapiens: A Brief History of Humankind, Author: Yuval Noah Harari, Year: 2014, Publisher: Harper", "expected_output_tokens": 600, "task": {"task_type" :"Data Formatting", "task_criteria": "Format the relevant data from the body of text provided according to the users specifications"}, "golden_answer": "Kahneman, D. (2011). The Psychology of Decision Making. Farrar, Straus and Giroux.\n\nChristian, B., & Griffiths, T. (2016). Algorithms to Live By. Henry Holt and Co.\n\nHarari, Y. N. (2014). Sapiens: A Brief History of Humankind. Harper.", "model_id": "us.meta.llama3-3-70b-instruct-v1:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00072, "output_token_cost": 0.00072}
{"text_prompt": "Create an HTML table with the following student exam results: Student: Alex Chen, Math: 94, Science: 88, English: 91; Student: Priya Patel, Math: 85, Science: 92, English: 89; Student: Jordan Taylor, Math: 79, Science: 86, English: 95", "expected_output_tokens": 600, "task": {"task_type" :"Data Formatting", "task_criteria": "Format the relevant data from the body of text provided according to the users specifications"}, "golden_answer": "<table>\n  <thead>\n    <tr>\n      <th>Student</th>\n      <th>Math</th>\n      <th>Science</th>\n      <th>English</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Alex Chen</td>\n      <td>94</td>\n      <td>88</td>\n      <td>91</td>\n    </tr>\n    <tr>\n      <td>Priya Patel</td>\n      <td>85</td>\n      <td>92</td>\n      <td>89</td>\n    </tr>\n    <tr>\n      <td>Jordan Taylor</td>\n      <td>79</td>\n      <td>86</td>\n      <td>95</td>\n    </tr>\n  </tbody>\n</table>", "model_id": "us.meta.llama3-3-70b-instruct-v1:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00072, "output_token_cost": 0.00072}
{"text_prompt": "Format the following city data as YAML: City: San Francisco, Population: 884,363, Area: 46.87 sq mi, Founded: 1776; City: Chicago, Population: 2,746,388, Area: 227.63 sq mi, Founded: 1833; City: Austin, Population: 964,177, Area: 271.8 sq mi, Founded: 1839", "expected_output_tokens": 600, "task": {"task_type" :"Data Formatting", "task_criteria": "Format the relevant data from the body of text provided according to the users specifications"}, "golden_answer": "cities:\n  - name: San Francisco\n    population: 884363\n    area: 46.87\n    area_unit: sq mi\n    founded: 1776\n  - name: Chicago\n    population: 2746388\n    area: 227.63\n    area_unit: sq mi\n    founded: 1833\n  - name: Austin\n    population: 964177\n    area: 271.8\n    area_unit: sq mi\n    founded: 1839", "model_id": "us.meta.llama3-3-70b-instruct-v1:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00072, "output_token_cost": 0.00072}
{"text_prompt": "Create a structured XML document for the following product inventory data: Category: Electronics, Item: Smartphone, Brand: TechX, Model: X20, Price: $699; Category: Electronics, Item: Laptop, Brand: ComputeMax, Model: UltraBook 15, Price: $1299; Category: Appliances, Item: Refrigerator, Brand: CoolTech, Model: FreezeKing 500, Price: $899", "expected_output_tokens": 600, "task": {"task_type" :"Data Formatting", "task_criteria": "Format the relevant data from the body of text provided according to the users specifications"}, "golden_answer": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<inventory>\n  <product category=\"Electronics\">\n    <item>Smartphone</item>\n    <brand>TechX</brand>\n    <model>X20</model>\n    <price>$699</price>\n  </product>\n  <product category=\"Electronics\">\n    <item>Laptop</item>\n    <brand>ComputeMax</brand>\n    <model>UltraBook 15</model>\n    <price>$1299</price>\n  </product>\n  <product category=\"Appliances\">\n    <item>Refrigerator</item>\n    <brand>CoolTech</brand>\n    <model>FreezeKing 500</model>\n    <price>$899</price>\n  </product>\n</inventory>", "model_id": "us.meta.llama3-3-70b-instruct-v1:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00072, "output_token_cost": 0.00072}
{"text_prompt": "Format these contact details into a vCard format: Name: Jennifer Wilson, Title: Marketing Director, Company: Bright Ideas Inc., Email: jwilson@brightideas.com, Phone: (555) 123-4567, Address: 789 Innovation Parkway, Suite 300, San Jose, CA 95110", "expected_output_tokens": 600, "task": {"task_type" :"Data Formatting", "task_criteria": "Format the relevant data from the body of text provided according to the users specifications"}, "golden_answer": "BEGIN:VCARD\nVERSION:3.0\nN:Wilson;Jennifer;;;\nFN:Jennifer Wilson\nTITLE:Marketing Director\nORG:Bright Ideas Inc.\nEMAIL:jwilson@brightideas.com\nTEL;TYPE=WORK,VOICE:(555) 123-4567\nADR;TYPE=WORK:;;789 Innovation Parkway, Suite 300;San Jose;CA;95110;\nEND:VCARD", "model_id": "us.meta.llama3-3-70b-instruct-v1:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00072, "output_token_cost": 0.00072}
{"text_prompt": "Format the following meeting minutes as a properly structured document with sections for attendees, agenda items, discussions, and action items: Meeting: Q3 Planning, Date: July 15, 2024, Attendees: David Kim, Lisa Chen, Marcus Johnson, Priya Singh. Agenda Items: Budget Review, Project Timeline, New Initiatives. Discussions: Budget currently on track with 5% variance, Project timeline delayed by two weeks due to vendor issues, Three new initiatives proposed for Q4. Action Items: David to update budget forecast by July 22, Lisa to contact vendor about timeline concerns, Team to vote on new initiatives by July 30.", "expected_output_tokens": 600, "task": {"task_type" :"Data Formatting", "task_criteria": "Format the relevant data from the body of text provided according to the users specifications"}, "golden_answer": "# Q3 Planning Meeting Minutes\n**Date:** July 15, 2024\n\n## Attendees\n- David Kim\n- Lisa Chen\n- Marcus Johnson\n- Priya Singh\n\n## Agenda Items\n1. Budget Review\n2. Project Timeline\n3. New Initiatives\n\n## Discussions\n- Budget currently on track with 5% variance\n- Project timeline delayed by two weeks due to vendor issues\n- Three new initiatives proposed for Q4\n\n## Action Items\n- [ ] David to update budget forecast by July 22\n- [ ] Lisa to contact vendor about timeline concerns\n- [ ] Team to vote on new initiatives by July 30", "model_id": "us.meta.llama3-3-70b-instruct-v1:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00072, "output_token_cost": 0.00072}
{"text_prompt": "Given the following schema:\nCREATE TABLE products (product_id INT PRIMARY KEY, name VARCHAR(100), category VARCHAR(50), price DECIMAL(10,2));\nCREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(100), email VARCHAR(100), join_date DATE);\nCREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\nCREATE TABLE order_items (item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id));\n\nWrite a SQL query to find the top 5 customers who have spent the most money in the past month, showing their name, email, and total amount spent.",  "expected_output_tokens": 1000,  "task": {"task_type": "TEXT-TO-SQL","task_criteria": "Using the Golden Answer as a guide, generate a correct SQL query that answers the question based on the provided schema without unnecessary complexity or extraneous information"},  "golden_answer": "SELECT c.name, c.email, SUM(o.total_amount) AS total_spent\nFROM customers c\nJOIN orders o ON c.customer_id = o.customer_id\nWHERE o.order_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 MONTH)\nGROUP BY c.customer_id, c.name, c.email\nORDER BY total_spent DESC\nLIMIT 5;",  "model_id": "amazon.nova-pro-v1:0",  "region": "us-east-1",  "inference_profile": "standard",  "input_token_cost": 0.0008,  "output_token_cost": 0.0032}
{"text_prompt": "Given the following schema:\nCREATE TABLE employees (employee_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), hire_date DATE, department_id INT, salary DECIMAL(10,2));\nCREATE TABLE departments (department_id INT PRIMARY KEY, department_name VARCHAR(100), location VARCHAR(100));\nCREATE TABLE projects (project_id INT PRIMARY KEY, project_name VARCHAR(100), start_date DATE, end_date DATE, budget DECIMAL(15,2));\nCREATE TABLE employee_projects (employee_id INT, project_id INT, role VARCHAR(50), hours_worked INT, PRIMARY KEY (employee_id, project_id), FOREIGN KEY (employee_id) REFERENCES employees(employee_id), FOREIGN KEY (project_id) REFERENCES projects(project_id));\n\nWrite a SQL query to find the departments with their average employee salary, but only include departments where the average salary is above the company-wide average salary.",  "expected_output_tokens": 1000,  "task": {"task_type": "TEXT-TO-SQL","task_criteria": "Using the Golden Answer as a guide, generate a correct SQL query that answers the question based on the provided schema without unnecessary complexity or extraneous information"},  "golden_answer": "WITH avg_company_salary AS (\n  SELECT AVG(salary) AS avg_salary\n  FROM employees\n)\nSELECT d.department_name, AVG(e.salary) AS avg_department_salary\nFROM departments d\nJOIN employees e ON d.department_id = e.department_id\nGROUP BY d.department_id, d.department_name\nHAVING AVG(e.salary) > (SELECT avg_salary FROM avg_company_salary)\nORDER BY avg_department_salary DESC;",  "model_id": "amazon.nova-pro-v1:0",  "region": "us-east-1",  "inference_profile": "standard",  "input_token_cost": 0.0008,  "output_token_cost": 0.0032}
{"text_prompt": "Given the following schema:\nCREATE TABLE books (book_id INT PRIMARY KEY, title VARCHAR(200), author_id INT, publisher_id INT, publication_year INT, genre VARCHAR(50), isbn VARCHAR(20), available_copies INT);\nCREATE TABLE authors (author_id INT PRIMARY KEY, name VARCHAR(100), birth_year INT, nationality VARCHAR(50));\nCREATE TABLE publishers (publisher_id INT PRIMARY KEY, name VARCHAR(100), location VARCHAR(100));\nCREATE TABLE members (member_id INT PRIMARY KEY, name VARCHAR(100), email VARCHAR(100), join_date DATE, membership_type VARCHAR(20));\nCREATE TABLE loans (loan_id INT PRIMARY KEY, book_id INT, member_id INT, checkout_date DATE, due_date DATE, return_date DATE, FOREIGN KEY (book_id) REFERENCES books(book_id), FOREIGN KEY (member_id) REFERENCES members(member_id));\n\nWrite a SQL query to find the top 3 most frequently borrowed genres in the past year, along with the count of loans for each genre.",  "expected_output_tokens": 1000,  "task": {"task_type": "TEXT-TO-SQL","task_criteria": "Using the Golden Answer as a guide, generate a correct SQL query that answers the question based on the provided schema without unnecessary complexity or extraneous information"},  "golden_answer": "SELECT b.genre, COUNT(l.loan_id) AS loan_count\nFROM books b\nJOIN loans l ON b.book_id = l.book_id\nWHERE l.checkout_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)\nGROUP BY b.genre\nORDER BY loan_count DESC\nLIMIT 3;",  "model_id": "amazon.nova-pro-v1:0",  "region": "us-east-1",  "inference_profile": "standard",  "input_token_cost": 0.0008,  "output_token_cost": 0.0032}
{"text_prompt": "Given the following schema:\nCREATE TABLE students (student_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), date_of_birth DATE, enrollment_date DATE, major_id INT);\nCREATE TABLE majors (major_id INT PRIMARY KEY, major_name VARCHAR(100), department VARCHAR(100));\nCREATE TABLE courses (course_id INT PRIMARY KEY, course_code VARCHAR(20), course_name VARCHAR(100), credits INT, department VARCHAR(100));\nCREATE TABLE instructors (instructor_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(100), hire_date DATE);\nCREATE TABLE enrollments (enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, instructor_id INT, semester VARCHAR(20), year INT, grade VARCHAR(2), FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (instructor_id) REFERENCES instructors(instructor_id));\n\nWrite a SQL query to find students who have taken all courses offered by their major's department.",  "expected_output_tokens": 1000,  "task": {"task_type": "TEXT-TO-SQL","task_criteria": "Using the Golden Answer as a guide, generate a correct SQL query that answers the question based on the provided schema without unnecessary complexity or extraneous information"},  "golden_answer": "WITH department_course_counts AS (\n  SELECT m.major_id, m.department, COUNT(DISTINCT c.course_id) AS total_courses\n  FROM majors m\n  JOIN courses c ON m.department = c.department\n  GROUP BY m.major_id, m.department\n),\nstudent_course_counts AS (\n  SELECT s.student_id, s.first_name, s.last_name, s.major_id, m.department, COUNT(DISTINCT e.course_id) AS courses_taken\n  FROM students s\n  JOIN majors m ON s.major_id = m.major_id\n  JOIN enrollments e ON s.student_id = e.student_id\n  JOIN courses c ON e.course_id = c.course_id AND m.department = c.department\n  GROUP BY s.student_id, s.first_name, s.last_name, s.major_id, m.department\n)\nSELECT scc.student_id, scc.first_name, scc.last_name\nFROM student_course_counts scc\nJOIN department_course_counts dcc ON scc.major_id = dcc.major_id\nWHERE scc.courses_taken = dcc.total_courses;",  "model_id": "amazon.nova-pro-v1:0",  "region": "us-east-1",  "inference_profile": "standard",  "input_token_cost": 0.0008,  "output_token_cost": 0.0032}
{"text_prompt": "Given the following schema:\nCREATE TABLE patients (patient_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), date_of_birth DATE, gender VARCHAR(10), blood_type VARCHAR(5));\nCREATE TABLE doctors (doctor_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), specialty VARCHAR(100));\nCREATE TABLE visits (visit_id INT PRIMARY KEY, patient_id INT, doctor_id INT, visit_date DATE, diagnosis VARCHAR(200), FOREIGN KEY (patient_id) REFERENCES patients(patient_id), FOREIGN KEY (doctor_id) REFERENCES doctors(doctor_id));\nCREATE TABLE medications (medication_id INT PRIMARY KEY, name VARCHAR(100), manufacturer VARCHAR(100), category VARCHAR(50));\nCREATE TABLE prescriptions (prescription_id INT PRIMARY KEY, visit_id INT, medication_id INT, dosage VARCHAR(50), start_date DATE, end_date DATE, FOREIGN KEY (visit_id) REFERENCES visits(visit_id), FOREIGN KEY (medication_id) REFERENCES medications(medication_id));\n\nWrite a SQL query to find the top 5 most commonly prescribed medications for patients over 65 years old in the last 6 months.",  "expected_output_tokens": 1000,  "task": {"task_type": "TEXT-TO-SQL","task_criteria": "Using the Golden Answer as a guide, generate a correct SQL query that answers the question based on the provided schema without unnecessary complexity or extraneous information"},  "golden_answer": "SELECT m.name AS medication_name, COUNT(p.prescription_id) AS prescription_count\nFROM medications m\nJOIN prescriptions p ON m.medication_id = p.medication_id\nJOIN visits v ON p.visit_id = v.visit_id\nJOIN patients pt ON v.patient_id = pt.patient_id\nWHERE v.visit_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 6 MONTH)\nAND pt.date_of_birth <= DATE_SUB(CURRENT_DATE(), INTERVAL 65 YEAR)\nGROUP BY m.medication_id, m.name\nORDER BY prescription_count DESC\nLIMIT 5;",  "model_id": "amazon.nova-pro-v1:0",  "region": "us-east-1",  "inference_profile": "standard",  "input_token_cost": 0.0008,  "output_token_cost": 0.0032}
{"text_prompt": "Given the following schema:\nCREATE TABLE accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(20), open_date DATE, balance DECIMAL(15,2), status VARCHAR(10));\nCREATE TABLE customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), date_of_birth DATE, city VARCHAR(50), state VARCHAR(2), credit_score INT);\nCREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_date DATETIME, amount DECIMAL(15,2), transaction_type VARCHAR(20), description VARCHAR(200), FOREIGN KEY (account_id) REFERENCES accounts(account_id));\nCREATE TABLE loans (loan_id INT PRIMARY KEY, customer_id INT, loan_type VARCHAR(30), amount DECIMAL(15,2), interest_rate DECIMAL(5,2), start_date DATE, term_months INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nWrite a SQL query to identify customers who might be good candidates for a new credit card offer based on having a high average monthly deposit amount (over $5000) in the last 3 months, good credit scores (above 700), and no existing loans.",  "expected_output_tokens": 1000,  "task": {"task_type": "TEXT-TO-SQL","task_criteria": "Using the Golden Answer as a guide, generate a correct SQL query that answers the question based on the provided schema without unnecessary complexity or extraneous information"},  "golden_answer": "SELECT c.customer_id, c.first_name, c.last_name, c.credit_score, AVG(t.amount) AS avg_monthly_deposit\nFROM customers c\nJOIN accounts a ON c.customer_id = a.customer_id\nJOIN transactions t ON a.account_id = t.account_id\nWHERE t.transaction_type = 'deposit'\nAND t.transaction_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 3 MONTH)\nAND c.credit_score > 700\nAND c.customer_id NOT IN (\n  SELECT DISTINCT customer_id FROM loans\n)\nGROUP BY c.customer_id, c.first_name, c.last_name, c.credit_score\nHAVING AVG(t.amount) > 5000\nORDER BY avg_monthly_deposit DESC;",  "model_id": "amazon.nova-pro-v1:0",  "region": "us-east-1",  "inference_profile": "standard",  "input_token_cost": 0.0008,  "output_token_cost": 0.0032}
{"text_prompt": "Given the following schema:\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), join_date DATE, last_login DATETIME, status VARCHAR(20));\nCREATE TABLE posts (post_id INT PRIMARY KEY, user_id INT, content TEXT, post_date DATETIME, likes INT, shares INT, FOREIGN KEY (user_id) REFERENCES users(user_id));\nCREATE TABLE comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, content TEXT, comment_date DATETIME, likes INT, FOREIGN KEY (post_id) REFERENCES posts(post_id), FOREIGN KEY (user_id) REFERENCES users(user_id));\nCREATE TABLE follows (follower_id INT, followee_id INT, follow_date DATE, PRIMARY KEY (follower_id, followee_id), FOREIGN KEY (follower_id) REFERENCES users(user_id), FOREIGN KEY (followee_id) REFERENCES users(user_id));\n\nWrite a SQL query to find the most engaging users who have created posts that received both high comments and likes (in top 10%) in the past month.",  "expected_output_tokens": 1000,  "task": {"task_type": "TEXT-TO-SQL","task_criteria": "Using the Golden Answer as a guide, generate a correct SQL query that answers the question based on the provided schema without unnecessary complexity or extraneous information"},  "golden_answer": "WITH engagement_metrics AS (\n  SELECT p.user_id,\n         COUNT(DISTINCT p.post_id) AS post_count,\n         SUM(p.likes) AS total_likes,\n         COUNT(DISTINCT c.comment_id) AS comment_count\n  FROM posts p\n  LEFT JOIN comments c ON p.post_id = c.post_id\n  WHERE p.post_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 MONTH)\n  GROUP BY p.user_id\n),\npercentiles AS (\n  SELECT\n    PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY total_likes) AS likes_threshold,\n    PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY comment_count) AS comments_threshold\n  FROM engagement_metrics\n)\nSELECT u.user_id, u.username, e.post_count, e.total_likes, e.comment_count\nFROM users u\nJOIN engagement_metrics e ON u.user_id = e.user_id\nCROSS JOIN percentiles p\nWHERE e.total_likes > p.likes_threshold\nAND e.comment_count > p.comments_threshold\nORDER BY (e.total_likes + e.comment_count) DESC;",  "model_id": "amazon.nova-pro-v1:0",  "region": "us-east-1",  "inference_profile": "standard",  "input_token_cost": 0.0008,  "output_token_cost": 0.0032}
{"text_prompt": "Given the following schema:\nCREATE TABLE hotels (hotel_id INT PRIMARY KEY, name VARCHAR(100), city VARCHAR(50), state VARCHAR(2), stars INT, amenities TEXT);\nCREATE TABLE room_types (type_id INT PRIMARY KEY, hotel_id INT, type_name VARCHAR(50), capacity INT, price_per_night DECIMAL(10,2), FOREIGN KEY (hotel_id) REFERENCES hotels(hotel_id));\nCREATE TABLE guests (guest_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone VARCHAR(20), loyalty_level VARCHAR(20));\nCREATE TABLE reservations (reservation_id INT PRIMARY KEY, guest_id INT, hotel_id INT, room_type_id INT, check_in_date DATE, check_out_date DATE, total_price DECIMAL(10,2), status VARCHAR(20), FOREIGN KEY (guest_id) REFERENCES guests(guest_id), FOREIGN KEY (hotel_id) REFERENCES hotels(hotel_id), FOREIGN KEY (room_type_id) REFERENCES room_types(type_id));\nCREATE TABLE reviews (review_id INT PRIMARY KEY, reservation_id INT, rating INT, comment TEXT, review_date DATE, FOREIGN KEY (reservation_id) REFERENCES reservations(reservation_id));\n\nWrite a SQL query to find hotels with available rooms of any type during a specific date range (June 15-20, 2023) in 'Miami', ordered by average review rating.",  "expected_output_tokens": 1000,  "task": {"task_type": "TEXT-TO-SQL","task_criteria": "Using the Golden Answer as a guide, generate a correct SQL query that answers the question based on the provided schema without unnecessary complexity or extraneous information"},  "golden_answer": "WITH unavailable_rooms AS (\n  SELECT DISTINCT r.hotel_id, r.room_type_id\n  FROM reservations r\n  WHERE (r.check_in_date <= '2023-06-20' AND r.check_out_date >= '2023-06-15')\n  AND r.status != 'cancelled'\n),\navg_ratings AS (\n  SELECT h.hotel_id, AVG(rv.rating) AS avg_rating\n  FROM hotels h\n  LEFT JOIN reservations r ON h.hotel_id = r.hotel_id\n  LEFT JOIN reviews rv ON r.reservation_id = rv.reservation_id\n  GROUP BY h.hotel_id\n)\nSELECT h.hotel_id, h.name, h.stars, ar.avg_rating,\n       COUNT(DISTINCT rt.type_id) AS available_room_types\nFROM hotels h\nJOIN room_types rt ON h.hotel_id = rt.hotel_id\nLEFT JOIN unavailable_rooms ur ON h.hotel_id = ur.hotel_id AND rt.type_id = ur.room_type_id\nLEFT JOIN avg_ratings ar ON h.hotel_id = ar.hotel_id\nWHERE h.city = 'Miami'\nAND ur.hotel_id IS NULL\nGROUP BY h.hotel_id, h.name, h.stars, ar.avg_rating\nHAVING COUNT(DISTINCT rt.type_id) > 0\nORDER BY ar.avg_rating DESC NULLS LAST;",  "model_id": "amazon.nova-pro-v1:0",  "region": "us-east-1",  "inference_profile": "standard",  "input_token_cost": 0.0008,  "output_token_cost": 0.0032}
{"text_prompt": "Given the following schema:\nCREATE TABLE movies (movie_id INT PRIMARY KEY, title VARCHAR(200), release_year INT, runtime_minutes INT, budget DECIMAL(15,2), box_office DECIMAL(15,2), studio VARCHAR(100));\nCREATE TABLE genres (genre_id INT PRIMARY KEY, genre_name VARCHAR(50));\nCREATE TABLE movie_genres (movie_id INT, genre_id INT, PRIMARY KEY (movie_id, genre_id), FOREIGN KEY (movie_id) REFERENCES movies(movie_id), FOREIGN KEY (genre_id) REFERENCES genres(genre_id));\nCREATE TABLE people (person_id INT PRIMARY KEY, name VARCHAR(100), birthdate DATE, nationality VARCHAR(50));\nCREATE TABLE movie_cast (movie_id INT, person_id INT, character_name VARCHAR(100), role_type VARCHAR(50), PRIMARY KEY (movie_id, person_id, character_name), FOREIGN KEY (movie_id) REFERENCES movies(movie_id), FOREIGN KEY (person_id) REFERENCES people(person_id));\nCREATE TABLE movie_crew (movie_id INT, person_id INT, role VARCHAR(50), PRIMARY KEY (movie_id, person_id, role), FOREIGN KEY (movie_id) REFERENCES movies(movie_id), FOREIGN KEY (person_id) REFERENCES people(person_id));\n\nWrite a SQL query to find the most profitable actors who have starred in at least 3 movies in the last decade (since 2013), showing their total box office revenue, average movie rating, and their most common genre.", "expected_output_tokens": 1000,  "task": {"task_type": "TEXT-TO-SQL","task_criteria": "Using the Golden Answer as a guide, generate a correct SQL query that answers the question based on the provided schema without unnecessary complexity or extraneous information"},  "golden_answer": "WITH actor_movies AS (\n  SELECT p.person_id, p.name, m.movie_id, m.title, m.box_office, m.budget\n  FROM people p\n  JOIN movie_cast mc ON p.person_id = mc.person_id\n  JOIN movies m ON mc.movie_id = m.movie_id\n  WHERE mc.role_type = 'lead'\n  AND m.release_year >= 2013\n),\nactor_metrics AS (\n  SELECT \n    am.person_id, \n    am.name,\n    COUNT(DISTINCT am.movie_id) AS movie_count,\n    SUM(am.box_office) AS total_box_office,\n    SUM(am.box_office - am.budget) AS total_profit\n  FROM actor_movies am\n  GROUP BY am.person_id, am.name\n  HAVING COUNT(DISTINCT am.movie_id) >= 3\n),\nactor_genres AS (\n  SELECT \n    am.person_id,\n    g.genre_name,\n    COUNT(*) AS genre_count,\n    ROW_NUMBER() OVER (PARTITION BY am.person_id ORDER BY COUNT(*) DESC) AS genre_rank\n  FROM actor_movies am\n  JOIN movie_genres mg ON am.movie_id = mg.movie_id\n  JOIN genres g ON mg.genre_id = g.genre_id\n  GROUP BY am.person_id, g.genre_name\n)\nSELECT \n  am.person_id,\n  am.name,\n  am.movie_count,\n  am.total_box_office,\n  am.total_profit,\n  ag.genre_name AS most_common_genre\nFROM actor_metrics am\nLEFT JOIN actor_genres ag ON am.person_id = ag.person_id AND ag.genre_rank = 1\nORDER BY am.total_profit DESC\nLIMIT 10;",  "model_id": "amazon.nova-pro-v1:0",  "region": "us-east-1",  "inference_profile": "standard",  "input_token_cost": 0.0008,  "output_token_cost": 0.0032}
{"text_prompt": "Given the following schema:\nCREATE TABLE teams (team_id INT PRIMARY KEY, team_name VARCHAR(100), city VARCHAR(50), founded_year INT, stadium VARCHAR(100), coach VARCHAR(100));\nCREATE TABLE players (player_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), birth_date DATE, nationality VARCHAR(50), position VARCHAR(30), team_id INT, jersey_number INT, FOREIGN KEY (team_id) REFERENCES teams(team_id));\nCREATE TABLE matches (match_id INT PRIMARY KEY, home_team_id INT, away_team_id INT, match_date DATE, season VARCHAR(20), home_score INT, away_score INT, stadium VARCHAR(100), attendance INT, FOREIGN KEY (home_team_id) REFERENCES teams(team_id), FOREIGN KEY (away_team_id) REFERENCES teams(team_id));\nCREATE TABLE goals (goal_id INT PRIMARY KEY, match_id INT, player_id INT, team_id INT, minute INT, is_penalty BOOLEAN, is_own_goal BOOLEAN, FOREIGN KEY (match_id) REFERENCES matches(match_id), FOREIGN KEY (player_id) REFERENCES players(player_id), FOREIGN KEY (team_id) REFERENCES teams(team_id));\nCREATE TABLE injuries (injury_id INT PRIMARY KEY, player_id INT, start_date DATE, end_date DATE, injury_type VARCHAR(100), FOREIGN KEY (player_id) REFERENCES players(player_id));\n\nWrite a SQL query to identify the players with the best scoring efficiency (goals per match played) in the current season, who have played at least 10 matches, including information about their position and nationality.",  "expected_output_tokens": 1000,  "task": {"task_type": "TEXT-TO-SQL","task_criteria": "Using the Golden Answer as a guide, generate a correct SQL query that answers the question based on the provided schema without unnecessary complexity or extraneous information"},  "golden_answer": "WITH player_matches AS (\n  SELECT p.player_id, p.first_name, p.last_name, p.position, p.nationality,         COUNT(DISTINCT m.match_id) AS matches_played\n  FROM players p\n  JOIN teams t ON p.team_id = t.team_id\n  JOIN matches m ON (t.team_id = m.home_team_id OR t.team_id = m.away_team_id)\n  WHERE m.season = (SELECT MAX(season) FROM matches)\n  GROUP BY p.player_id, p.first_name, p.last_name, p.position, p.nationality\n),\nplayer_goals AS (\n  SELECT g.player_id, COUNT(*) AS goals_scored\n  FROM goals g\n  JOIN matches m ON g.match_id = m.match_id\n  WHERE m.season = (SELECT MAX(season) FROM matches)\n  AND g.is_own_goal = FALSE\n  GROUP BY g.player_id\n)\nSELECT \n  pm.player_id,\n  pm.first_name,\n  pm.last_name,\n  pm.position,\n  pm.nationality,\n  pm.matches_played,\n  COALESCE(pg.goals_scored, 0) AS goals_scored,\n  ROUND(COALESCE(pg.goals_scored, 0) * 1.0 / pm.matches_played, 3) AS goals_per_match\nFROM player_matches pm\nLEFT JOIN player_goals pg ON pm.player_id = pg.player_id\nWHERE pm.matches_played >= 10\nORDER BY goals_per_match DESC, goals_scored DESC\nLIMIT 10;",  "model_id": "amazon.nova-pro-v1:0",  "region": "us-east-1",  "inference_profile": "standard",  "input_token_cost": 0.0008,  "output_token_cost": 0.0032}
{"text_prompt": "Given the following schema:\nCREATE TABLE products (product_id INT PRIMARY KEY, name VARCHAR(100), category VARCHAR(50), price DECIMAL(10,2));\nCREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(100), email VARCHAR(100), join_date DATE);\nCREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\nCREATE TABLE order_items (item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id));\n\nWrite a SQL query to find the top 5 customers who have spent the most money in the past month, showing their name, email, and total amount spent.",  "expected_output_tokens": 1000,  "task": {"task_type": "TEXT-TO-SQL","task_criteria": "Using the Golden Answer as a guide, generate a correct SQL query that answers the question based on the provided schema without unnecessary complexity or extraneous information"},  "golden_answer": "SELECT c.name, c.email, SUM(o.total_amount) AS total_spent\nFROM customers c\nJOIN orders o ON c.customer_id = o.customer_id\nWHERE o.order_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 MONTH)\nGROUP BY c.customer_id, c.name, c.email\nORDER BY total_spent DESC\nLIMIT 5;","model_id": "us.anthropic.claude-3-5-haiku-20241022-v1:0", "region": "us-east-2", "inference_profile": "optimized", "input_token_cost": 0.0008, "output_token_cost": 0.004}
{"text_prompt": "Given the following schema:\nCREATE TABLE employees (employee_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), hire_date DATE, department_id INT, salary DECIMAL(10,2));\nCREATE TABLE departments (department_id INT PRIMARY KEY, department_name VARCHAR(100), location VARCHAR(100));\nCREATE TABLE projects (project_id INT PRIMARY KEY, project_name VARCHAR(100), start_date DATE, end_date DATE, budget DECIMAL(15,2));\nCREATE TABLE employee_projects (employee_id INT, project_id INT, role VARCHAR(50), hours_worked INT, PRIMARY KEY (employee_id, project_id), FOREIGN KEY (employee_id) REFERENCES employees(employee_id), FOREIGN KEY (project_id) REFERENCES projects(project_id));\n\nWrite a SQL query to find the departments with their average employee salary, but only include departments where the average salary is above the company-wide average salary.",  "expected_output_tokens": 1000,  "task": {"task_type": "TEXT-TO-SQL","task_criteria": "Using the Golden Answer as a guide, generate a correct SQL query that answers the question based on the provided schema without unnecessary complexity or extraneous information"},  "golden_answer": "WITH avg_company_salary AS (\n  SELECT AVG(salary) AS avg_salary\n  FROM employees\n)\nSELECT d.department_name, AVG(e.salary) AS avg_department_salary\nFROM departments d\nJOIN employees e ON d.department_id = e.department_id\nGROUP BY d.department_id, d.department_name\nHAVING AVG(e.salary) > (SELECT avg_salary FROM avg_company_salary)\nORDER BY avg_department_salary DESC;","model_id": "us.anthropic.claude-3-5-haiku-20241022-v1:0", "region": "us-east-2", "inference_profile": "optimized", "input_token_cost": 0.0008, "output_token_cost": 0.004}
{"text_prompt": "Given the following schema:\nCREATE TABLE books (book_id INT PRIMARY KEY, title VARCHAR(200), author_id INT, publisher_id INT, publication_year INT, genre VARCHAR(50), isbn VARCHAR(20), available_copies INT);\nCREATE TABLE authors (author_id INT PRIMARY KEY, name VARCHAR(100), birth_year INT, nationality VARCHAR(50));\nCREATE TABLE publishers (publisher_id INT PRIMARY KEY, name VARCHAR(100), location VARCHAR(100));\nCREATE TABLE members (member_id INT PRIMARY KEY, name VARCHAR(100), email VARCHAR(100), join_date DATE, membership_type VARCHAR(20));\nCREATE TABLE loans (loan_id INT PRIMARY KEY, book_id INT, member_id INT, checkout_date DATE, due_date DATE, return_date DATE, FOREIGN KEY (book_id) REFERENCES books(book_id), FOREIGN KEY (member_id) REFERENCES members(member_id));\n\nWrite a SQL query to find the top 3 most frequently borrowed genres in the past year, along with the count of loans for each genre.",  "expected_output_tokens": 1000,  "task": {"task_type": "TEXT-TO-SQL","task_criteria": "Using the Golden Answer as a guide, generate a correct SQL query that answers the question based on the provided schema without unnecessary complexity or extraneous information"},  "golden_answer": "SELECT b.genre, COUNT(l.loan_id) AS loan_count\nFROM books b\nJOIN loans l ON b.book_id = l.book_id\nWHERE l.checkout_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)\nGROUP BY b.genre\nORDER BY loan_count DESC\nLIMIT 3;","model_id": "us.anthropic.claude-3-5-haiku-20241022-v1:0", "region": "us-east-2", "inference_profile": "optimized", "input_token_cost": 0.0008, "output_token_cost": 0.004}
{"text_prompt": "Given the following schema:\nCREATE TABLE students (student_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), date_of_birth DATE, enrollment_date DATE, major_id INT);\nCREATE TABLE majors (major_id INT PRIMARY KEY, major_name VARCHAR(100), department VARCHAR(100));\nCREATE TABLE courses (course_id INT PRIMARY KEY, course_code VARCHAR(20), course_name VARCHAR(100), credits INT, department VARCHAR(100));\nCREATE TABLE instructors (instructor_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(100), hire_date DATE);\nCREATE TABLE enrollments (enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, instructor_id INT, semester VARCHAR(20), year INT, grade VARCHAR(2), FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (instructor_id) REFERENCES instructors(instructor_id));\n\nWrite a SQL query to find students who have taken all courses offered by their major's department.",  "expected_output_tokens": 1000,  "task": {"task_type": "TEXT-TO-SQL","task_criteria": "Using the Golden Answer as a guide, generate a correct SQL query that answers the question based on the provided schema without unnecessary complexity or extraneous information"},  "golden_answer": "WITH department_course_counts AS (\n  SELECT m.major_id, m.department, COUNT(DISTINCT c.course_id) AS total_courses\n  FROM majors m\n  JOIN courses c ON m.department = c.department\n  GROUP BY m.major_id, m.department\n),\nstudent_course_counts AS (\n  SELECT s.student_id, s.first_name, s.last_name, s.major_id, m.department, COUNT(DISTINCT e.course_id) AS courses_taken\n  FROM students s\n  JOIN majors m ON s.major_id = m.major_id\n  JOIN enrollments e ON s.student_id = e.student_id\n  JOIN courses c ON e.course_id = c.course_id AND m.department = c.department\n  GROUP BY s.student_id, s.first_name, s.last_name, s.major_id, m.department\n)\nSELECT scc.student_id, scc.first_name, scc.last_name\nFROM student_course_counts scc\nJOIN department_course_counts dcc ON scc.major_id = dcc.major_id\nWHERE scc.courses_taken = dcc.total_courses;","model_id": "us.anthropic.claude-3-5-haiku-20241022-v1:0", "region": "us-east-2", "inference_profile": "optimized", "input_token_cost": 0.0008, "output_token_cost": 0.004}
{"text_prompt": "Given the following schema:\nCREATE TABLE patients (patient_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), date_of_birth DATE, gender VARCHAR(10), blood_type VARCHAR(5));\nCREATE TABLE doctors (doctor_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), specialty VARCHAR(100));\nCREATE TABLE visits (visit_id INT PRIMARY KEY, patient_id INT, doctor_id INT, visit_date DATE, diagnosis VARCHAR(200), FOREIGN KEY (patient_id) REFERENCES patients(patient_id), FOREIGN KEY (doctor_id) REFERENCES doctors(doctor_id));\nCREATE TABLE medications (medication_id INT PRIMARY KEY, name VARCHAR(100), manufacturer VARCHAR(100), category VARCHAR(50));\nCREATE TABLE prescriptions (prescription_id INT PRIMARY KEY, visit_id INT, medication_id INT, dosage VARCHAR(50), start_date DATE, end_date DATE, FOREIGN KEY (visit_id) REFERENCES visits(visit_id), FOREIGN KEY (medication_id) REFERENCES medications(medication_id));\n\nWrite a SQL query to find the top 5 most commonly prescribed medications for patients over 65 years old in the last 6 months.",  "expected_output_tokens": 1000,  "task": {"task_type": "TEXT-TO-SQL","task_criteria": "Using the Golden Answer as a guide, generate a correct SQL query that answers the question based on the provided schema without unnecessary complexity or extraneous information"},  "golden_answer": "SELECT m.name AS medication_name, COUNT(p.prescription_id) AS prescription_count\nFROM medications m\nJOIN prescriptions p ON m.medication_id = p.medication_id\nJOIN visits v ON p.visit_id = v.visit_id\nJOIN patients pt ON v.patient_id = pt.patient_id\nWHERE v.visit_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 6 MONTH)\nAND pt.date_of_birth <= DATE_SUB(CURRENT_DATE(), INTERVAL 65 YEAR)\nGROUP BY m.medication_id, m.name\nORDER BY prescription_count DESC\nLIMIT 5;","model_id": "us.anthropic.claude-3-5-haiku-20241022-v1:0", "region": "us-east-2", "inference_profile": "optimized", "input_token_cost": 0.0008, "output_token_cost": 0.004}
{"text_prompt": "Given the following schema:\nCREATE TABLE accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(20), open_date DATE, balance DECIMAL(15,2), status VARCHAR(10));\nCREATE TABLE customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), date_of_birth DATE, city VARCHAR(50), state VARCHAR(2), credit_score INT);\nCREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_date DATETIME, amount DECIMAL(15,2), transaction_type VARCHAR(20), description VARCHAR(200), FOREIGN KEY (account_id) REFERENCES accounts(account_id));\nCREATE TABLE loans (loan_id INT PRIMARY KEY, customer_id INT, loan_type VARCHAR(30), amount DECIMAL(15,2), interest_rate DECIMAL(5,2), start_date DATE, term_months INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nWrite a SQL query to identify customers who might be good candidates for a new credit card offer based on having a high average monthly deposit amount (over $5000) in the last 3 months, good credit scores (above 700), and no existing loans.",  "expected_output_tokens": 1000,  "task": {"task_type": "TEXT-TO-SQL","task_criteria": "Using the Golden Answer as a guide, generate a correct SQL query that answers the question based on the provided schema without unnecessary complexity or extraneous information"},  "golden_answer": "SELECT c.customer_id, c.first_name, c.last_name, c.credit_score, AVG(t.amount) AS avg_monthly_deposit\nFROM customers c\nJOIN accounts a ON c.customer_id = a.customer_id\nJOIN transactions t ON a.account_id = t.account_id\nWHERE t.transaction_type = 'deposit'\nAND t.transaction_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 3 MONTH)\nAND c.credit_score > 700\nAND c.customer_id NOT IN (\n  SELECT DISTINCT customer_id FROM loans\n)\nGROUP BY c.customer_id, c.first_name, c.last_name, c.credit_score\nHAVING AVG(t.amount) > 5000\nORDER BY avg_monthly_deposit DESC;","model_id": "us.anthropic.claude-3-5-haiku-20241022-v1:0", "region": "us-east-2", "inference_profile": "optimized", "input_token_cost": 0.0008, "output_token_cost": 0.004}
{"text_prompt": "Given the following schema:\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), join_date DATE, last_login DATETIME, status VARCHAR(20));\nCREATE TABLE posts (post_id INT PRIMARY KEY, user_id INT, content TEXT, post_date DATETIME, likes INT, shares INT, FOREIGN KEY (user_id) REFERENCES users(user_id));\nCREATE TABLE comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, content TEXT, comment_date DATETIME, likes INT, FOREIGN KEY (post_id) REFERENCES posts(post_id), FOREIGN KEY (user_id) REFERENCES users(user_id));\nCREATE TABLE follows (follower_id INT, followee_id INT, follow_date DATE, PRIMARY KEY (follower_id, followee_id), FOREIGN KEY (follower_id) REFERENCES users(user_id), FOREIGN KEY (followee_id) REFERENCES users(user_id));\n\nWrite a SQL query to find the most engaging users who have created posts that received both high comments and likes (in top 10%) in the past month.",  "expected_output_tokens": 1000,  "task": {"task_type": "TEXT-TO-SQL","task_criteria": "Using the Golden Answer as a guide, generate a correct SQL query that answers the question based on the provided schema without unnecessary complexity or extraneous information"},  "golden_answer": "WITH engagement_metrics AS (\n  SELECT p.user_id,\n         COUNT(DISTINCT p.post_id) AS post_count,\n         SUM(p.likes) AS total_likes,\n         COUNT(DISTINCT c.comment_id) AS comment_count\n  FROM posts p\n  LEFT JOIN comments c ON p.post_id = c.post_id\n  WHERE p.post_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 MONTH)\n  GROUP BY p.user_id\n),\npercentiles AS (\n  SELECT\n    PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY total_likes) AS likes_threshold,\n    PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY comment_count) AS comments_threshold\n  FROM engagement_metrics\n)\nSELECT u.user_id, u.username, e.post_count, e.total_likes, e.comment_count\nFROM users u\nJOIN engagement_metrics e ON u.user_id = e.user_id\nCROSS JOIN percentiles p\nWHERE e.total_likes > p.likes_threshold\nAND e.comment_count > p.comments_threshold\nORDER BY (e.total_likes + e.comment_count) DESC;","model_id": "us.anthropic.claude-3-5-haiku-20241022-v1:0", "region": "us-east-2", "inference_profile": "optimized", "input_token_cost": 0.0008, "output_token_cost": 0.004}
{"text_prompt": "Given the following schema:\nCREATE TABLE hotels (hotel_id INT PRIMARY KEY, name VARCHAR(100), city VARCHAR(50), state VARCHAR(2), stars INT, amenities TEXT);\nCREATE TABLE room_types (type_id INT PRIMARY KEY, hotel_id INT, type_name VARCHAR(50), capacity INT, price_per_night DECIMAL(10,2), FOREIGN KEY (hotel_id) REFERENCES hotels(hotel_id));\nCREATE TABLE guests (guest_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone VARCHAR(20), loyalty_level VARCHAR(20));\nCREATE TABLE reservations (reservation_id INT PRIMARY KEY, guest_id INT, hotel_id INT, room_type_id INT, check_in_date DATE, check_out_date DATE, total_price DECIMAL(10,2), status VARCHAR(20), FOREIGN KEY (guest_id) REFERENCES guests(guest_id), FOREIGN KEY (hotel_id) REFERENCES hotels(hotel_id), FOREIGN KEY (room_type_id) REFERENCES room_types(type_id));\nCREATE TABLE reviews (review_id INT PRIMARY KEY, reservation_id INT, rating INT, comment TEXT, review_date DATE, FOREIGN KEY (reservation_id) REFERENCES reservations(reservation_id));\n\nWrite a SQL query to find hotels with available rooms of any type during a specific date range (June 15-20, 2023) in 'Miami', ordered by average review rating.",  "expected_output_tokens": 1000,  "task": {"task_type": "TEXT-TO-SQL","task_criteria": "Using the Golden Answer as a guide, generate a correct SQL query that answers the question based on the provided schema without unnecessary complexity or extraneous information"},  "golden_answer": "WITH unavailable_rooms AS (\n  SELECT DISTINCT r.hotel_id, r.room_type_id\n  FROM reservations r\n  WHERE (r.check_in_date <= '2023-06-20' AND r.check_out_date >= '2023-06-15')\n  AND r.status != 'cancelled'\n),\navg_ratings AS (\n  SELECT h.hotel_id, AVG(rv.rating) AS avg_rating\n  FROM hotels h\n  LEFT JOIN reservations r ON h.hotel_id = r.hotel_id\n  LEFT JOIN reviews rv ON r.reservation_id = rv.reservation_id\n  GROUP BY h.hotel_id\n)\nSELECT h.hotel_id, h.name, h.stars, ar.avg_rating,\n       COUNT(DISTINCT rt.type_id) AS available_room_types\nFROM hotels h\nJOIN room_types rt ON h.hotel_id = rt.hotel_id\nLEFT JOIN unavailable_rooms ur ON h.hotel_id = ur.hotel_id AND rt.type_id = ur.room_type_id\nLEFT JOIN avg_ratings ar ON h.hotel_id = ar.hotel_id\nWHERE h.city = 'Miami'\nAND ur.hotel_id IS NULL\nGROUP BY h.hotel_id, h.name, h.stars, ar.avg_rating\nHAVING COUNT(DISTINCT rt.type_id) > 0\nORDER BY ar.avg_rating DESC NULLS LAST;","model_id": "us.anthropic.claude-3-5-haiku-20241022-v1:0", "region": "us-east-2", "inference_profile": "optimized", "input_token_cost": 0.0008, "output_token_cost": 0.004}
{"text_prompt": "Given the following schema:\nCREATE TABLE movies (movie_id INT PRIMARY KEY, title VARCHAR(200), release_year INT, runtime_minutes INT, budget DECIMAL(15,2), box_office DECIMAL(15,2), studio VARCHAR(100));\nCREATE TABLE genres (genre_id INT PRIMARY KEY, genre_name VARCHAR(50));\nCREATE TABLE movie_genres (movie_id INT, genre_id INT, PRIMARY KEY (movie_id, genre_id), FOREIGN KEY (movie_id) REFERENCES movies(movie_id), FOREIGN KEY (genre_id) REFERENCES genres(genre_id));\nCREATE TABLE people (person_id INT PRIMARY KEY, name VARCHAR(100), birthdate DATE, nationality VARCHAR(50));\nCREATE TABLE movie_cast (movie_id INT, person_id INT, character_name VARCHAR(100), role_type VARCHAR(50), PRIMARY KEY (movie_id, person_id, character_name), FOREIGN KEY (movie_id) REFERENCES movies(movie_id), FOREIGN KEY (person_id) REFERENCES people(person_id));\nCREATE TABLE movie_crew (movie_id INT, person_id INT, role VARCHAR(50), PRIMARY KEY (movie_id, person_id, role), FOREIGN KEY (movie_id) REFERENCES movies(movie_id), FOREIGN KEY (person_id) REFERENCES people(person_id));\n\nWrite a SQL query to find the most profitable actors who have starred in at least 3 movies in the last decade (since 2013), showing their total box office revenue, average movie rating, and their most common genre.", "expected_output_tokens": 1000,  "task": {"task_type": "TEXT-TO-SQL","task_criteria": "Using the Golden Answer as a guide, generate a correct SQL query that answers the question based on the provided schema without unnecessary complexity or extraneous information"},  "golden_answer": "WITH actor_movies AS (\n  SELECT p.person_id, p.name, m.movie_id, m.title, m.box_office, m.budget\n  FROM people p\n  JOIN movie_cast mc ON p.person_id = mc.person_id\n  JOIN movies m ON mc.movie_id = m.movie_id\n  WHERE mc.role_type = 'lead'\n  AND m.release_year >= 2013\n),\nactor_metrics AS (\n  SELECT \n    am.person_id, \n    am.name,\n    COUNT(DISTINCT am.movie_id) AS movie_count,\n    SUM(am.box_office) AS total_box_office,\n    SUM(am.box_office - am.budget) AS total_profit\n  FROM actor_movies am\n  GROUP BY am.person_id, am.name\n  HAVING COUNT(DISTINCT am.movie_id) >= 3\n),\nactor_genres AS (\n  SELECT \n    am.person_id,\n    g.genre_name,\n    COUNT(*) AS genre_count,\n    ROW_NUMBER() OVER (PARTITION BY am.person_id ORDER BY COUNT(*) DESC) AS genre_rank\n  FROM actor_movies am\n  JOIN movie_genres mg ON am.movie_id = mg.movie_id\n  JOIN genres g ON mg.genre_id = g.genre_id\n  GROUP BY am.person_id, g.genre_name\n)\nSELECT \n  am.person_id,\n  am.name,\n  am.movie_count,\n  am.total_box_office,\n  am.total_profit,\n  ag.genre_name AS most_common_genre\nFROM actor_metrics am\nLEFT JOIN actor_genres ag ON am.person_id = ag.person_id AND ag.genre_rank = 1\nORDER BY am.total_profit DESC\nLIMIT 10;","model_id": "us.anthropic.claude-3-5-haiku-20241022-v1:0", "region": "us-east-2", "inference_profile": "optimized", "input_token_cost": 0.0008, "output_token_cost": 0.004}
{"text_prompt": "Given the following schema:\nCREATE TABLE teams (team_id INT PRIMARY KEY, team_name VARCHAR(100), city VARCHAR(50), founded_year INT, stadium VARCHAR(100), coach VARCHAR(100));\nCREATE TABLE players (player_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), birth_date DATE, nationality VARCHAR(50), position VARCHAR(30), team_id INT, jersey_number INT, FOREIGN KEY (team_id) REFERENCES teams(team_id));\nCREATE TABLE matches (match_id INT PRIMARY KEY, home_team_id INT, away_team_id INT, match_date DATE, season VARCHAR(20), home_score INT, away_score INT, stadium VARCHAR(100), attendance INT, FOREIGN KEY (home_team_id) REFERENCES teams(team_id), FOREIGN KEY (away_team_id) REFERENCES teams(team_id));\nCREATE TABLE goals (goal_id INT PRIMARY KEY, match_id INT, player_id INT, team_id INT, minute INT, is_penalty BOOLEAN, is_own_goal BOOLEAN, FOREIGN KEY (match_id) REFERENCES matches(match_id), FOREIGN KEY (player_id) REFERENCES players(player_id), FOREIGN KEY (team_id) REFERENCES teams(team_id));\nCREATE TABLE injuries (injury_id INT PRIMARY KEY, player_id INT, start_date DATE, end_date DATE, injury_type VARCHAR(100), FOREIGN KEY (player_id) REFERENCES players(player_id));\n\nWrite a SQL query to identify the players with the best scoring efficiency (goals per match played) in the current season, who have played at least 10 matches, including information about their position and nationality.",  "expected_output_tokens": 1000,  "task": {"task_type": "TEXT-TO-SQL","task_criteria": "Using the Golden Answer as a guide, generate a correct SQL query that answers the question based on the provided schema without unnecessary complexity or extraneous information"},  "golden_answer": "WITH player_matches AS (\n  SELECT p.player_id, p.first_name, p.last_name, p.position, p.nationality,         COUNT(DISTINCT m.match_id) AS matches_played\n  FROM players p\n  JOIN teams t ON p.team_id = t.team_id\n  JOIN matches m ON (t.team_id = m.home_team_id OR t.team_id = m.away_team_id)\n  WHERE m.season = (SELECT MAX(season) FROM matches)\n  GROUP BY p.player_id, p.first_name, p.last_name, p.position, p.nationality\n),\nplayer_goals AS (\n  SELECT g.player_id, COUNT(*) AS goals_scored\n  FROM goals g\n  JOIN matches m ON g.match_id = m.match_id\n  WHERE m.season = (SELECT MAX(season) FROM matches)\n  AND g.is_own_goal = FALSE\n  GROUP BY g.player_id\n)\nSELECT \n  pm.player_id,\n  pm.first_name,\n  pm.last_name,\n  pm.position,\n  pm.nationality,\n  pm.matches_played,\n  COALESCE(pg.goals_scored, 0) AS goals_scored,\n  ROUND(COALESCE(pg.goals_scored, 0) * 1.0 / pm.matches_played, 3) AS goals_per_match\nFROM player_matches pm\nLEFT JOIN player_goals pg ON pm.player_id = pg.player_id\nWHERE pm.matches_played >= 10\nORDER BY goals_per_match DESC, goals_scored DESC\nLIMIT 10;","model_id": "us.anthropic.claude-3-5-haiku-20241022-v1:0", "region": "us-east-2", "inference_profile": "optimized", "input_token_cost": 0.0008, "output_token_cost": 0.004}
{"text_prompt": "Given the following schema:\nCREATE TABLE products (product_id INT PRIMARY KEY, name VARCHAR(100), category VARCHAR(50), price DECIMAL(10,2));\nCREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(100), email VARCHAR(100), join_date DATE);\nCREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\nCREATE TABLE order_items (item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id));\n\nWrite a SQL query to find the top 5 customers who have spent the most money in the past month, showing their name, email, and total amount spent.",  "expected_output_tokens": 1000,  "task": {"task_type": "TEXT-TO-SQL","task_criteria": "Using the Golden Answer as a guide, generate a correct SQL query that answers the question based on the provided schema without unnecessary complexity or extraneous information"},  "golden_answer": "SELECT c.name, c.email, SUM(o.total_amount) AS total_spent\nFROM customers c\nJOIN orders o ON c.customer_id = o.customer_id\nWHERE o.order_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 MONTH)\nGROUP BY c.customer_id, c.name, c.email\nORDER BY total_spent DESC\nLIMIT 5;","model_id": "us.meta.llama3-3-70b-instruct-v1:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00072, "output_token_cost": 0.00072}
{"text_prompt": "Given the following schema:\nCREATE TABLE employees (employee_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), hire_date DATE, department_id INT, salary DECIMAL(10,2));\nCREATE TABLE departments (department_id INT PRIMARY KEY, department_name VARCHAR(100), location VARCHAR(100));\nCREATE TABLE projects (project_id INT PRIMARY KEY, project_name VARCHAR(100), start_date DATE, end_date DATE, budget DECIMAL(15,2));\nCREATE TABLE employee_projects (employee_id INT, project_id INT, role VARCHAR(50), hours_worked INT, PRIMARY KEY (employee_id, project_id), FOREIGN KEY (employee_id) REFERENCES employees(employee_id), FOREIGN KEY (project_id) REFERENCES projects(project_id));\n\nWrite a SQL query to find the departments with their average employee salary, but only include departments where the average salary is above the company-wide average salary.",  "expected_output_tokens": 1000,  "task": {"task_type": "TEXT-TO-SQL","task_criteria": "Using the Golden Answer as a guide, generate a correct SQL query that answers the question based on the provided schema without unnecessary complexity or extraneous information"},  "golden_answer": "WITH avg_company_salary AS (\n  SELECT AVG(salary) AS avg_salary\n  FROM employees\n)\nSELECT d.department_name, AVG(e.salary) AS avg_department_salary\nFROM departments d\nJOIN employees e ON d.department_id = e.department_id\nGROUP BY d.department_id, d.department_name\nHAVING AVG(e.salary) > (SELECT avg_salary FROM avg_company_salary)\nORDER BY avg_department_salary DESC;","model_id": "us.meta.llama3-3-70b-instruct-v1:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00072, "output_token_cost": 0.00072}
{"text_prompt": "Given the following schema:\nCREATE TABLE books (book_id INT PRIMARY KEY, title VARCHAR(200), author_id INT, publisher_id INT, publication_year INT, genre VARCHAR(50), isbn VARCHAR(20), available_copies INT);\nCREATE TABLE authors (author_id INT PRIMARY KEY, name VARCHAR(100), birth_year INT, nationality VARCHAR(50));\nCREATE TABLE publishers (publisher_id INT PRIMARY KEY, name VARCHAR(100), location VARCHAR(100));\nCREATE TABLE members (member_id INT PRIMARY KEY, name VARCHAR(100), email VARCHAR(100), join_date DATE, membership_type VARCHAR(20));\nCREATE TABLE loans (loan_id INT PRIMARY KEY, book_id INT, member_id INT, checkout_date DATE, due_date DATE, return_date DATE, FOREIGN KEY (book_id) REFERENCES books(book_id), FOREIGN KEY (member_id) REFERENCES members(member_id));\n\nWrite a SQL query to find the top 3 most frequently borrowed genres in the past year, along with the count of loans for each genre.",  "expected_output_tokens": 1000,  "task": {"task_type": "TEXT-TO-SQL","task_criteria": "Using the Golden Answer as a guide, generate a correct SQL query that answers the question based on the provided schema without unnecessary complexity or extraneous information"},  "golden_answer": "SELECT b.genre, COUNT(l.loan_id) AS loan_count\nFROM books b\nJOIN loans l ON b.book_id = l.book_id\nWHERE l.checkout_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)\nGROUP BY b.genre\nORDER BY loan_count DESC\nLIMIT 3;","model_id": "us.meta.llama3-3-70b-instruct-v1:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00072, "output_token_cost": 0.00072}
{"text_prompt": "Given the following schema:\nCREATE TABLE students (student_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), date_of_birth DATE, enrollment_date DATE, major_id INT);\nCREATE TABLE majors (major_id INT PRIMARY KEY, major_name VARCHAR(100), department VARCHAR(100));\nCREATE TABLE courses (course_id INT PRIMARY KEY, course_code VARCHAR(20), course_name VARCHAR(100), credits INT, department VARCHAR(100));\nCREATE TABLE instructors (instructor_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(100), hire_date DATE);\nCREATE TABLE enrollments (enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, instructor_id INT, semester VARCHAR(20), year INT, grade VARCHAR(2), FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (instructor_id) REFERENCES instructors(instructor_id));\n\nWrite a SQL query to find students who have taken all courses offered by their major's department.",  "expected_output_tokens": 1000,  "task": {"task_type": "TEXT-TO-SQL","task_criteria": "Using the Golden Answer as a guide, generate a correct SQL query that answers the question based on the provided schema without unnecessary complexity or extraneous information"},  "golden_answer": "WITH department_course_counts AS (\n  SELECT m.major_id, m.department, COUNT(DISTINCT c.course_id) AS total_courses\n  FROM majors m\n  JOIN courses c ON m.department = c.department\n  GROUP BY m.major_id, m.department\n),\nstudent_course_counts AS (\n  SELECT s.student_id, s.first_name, s.last_name, s.major_id, m.department, COUNT(DISTINCT e.course_id) AS courses_taken\n  FROM students s\n  JOIN majors m ON s.major_id = m.major_id\n  JOIN enrollments e ON s.student_id = e.student_id\n  JOIN courses c ON e.course_id = c.course_id AND m.department = c.department\n  GROUP BY s.student_id, s.first_name, s.last_name, s.major_id, m.department\n)\nSELECT scc.student_id, scc.first_name, scc.last_name\nFROM student_course_counts scc\nJOIN department_course_counts dcc ON scc.major_id = dcc.major_id\nWHERE scc.courses_taken = dcc.total_courses;","model_id": "us.meta.llama3-3-70b-instruct-v1:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00072, "output_token_cost": 0.00072}
{"text_prompt": "Given the following schema:\nCREATE TABLE patients (patient_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), date_of_birth DATE, gender VARCHAR(10), blood_type VARCHAR(5));\nCREATE TABLE doctors (doctor_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), specialty VARCHAR(100));\nCREATE TABLE visits (visit_id INT PRIMARY KEY, patient_id INT, doctor_id INT, visit_date DATE, diagnosis VARCHAR(200), FOREIGN KEY (patient_id) REFERENCES patients(patient_id), FOREIGN KEY (doctor_id) REFERENCES doctors(doctor_id));\nCREATE TABLE medications (medication_id INT PRIMARY KEY, name VARCHAR(100), manufacturer VARCHAR(100), category VARCHAR(50));\nCREATE TABLE prescriptions (prescription_id INT PRIMARY KEY, visit_id INT, medication_id INT, dosage VARCHAR(50), start_date DATE, end_date DATE, FOREIGN KEY (visit_id) REFERENCES visits(visit_id), FOREIGN KEY (medication_id) REFERENCES medications(medication_id));\n\nWrite a SQL query to find the top 5 most commonly prescribed medications for patients over 65 years old in the last 6 months.",  "expected_output_tokens": 1000,  "task": {"task_type": "TEXT-TO-SQL","task_criteria": "Using the Golden Answer as a guide, generate a correct SQL query that answers the question based on the provided schema without unnecessary complexity or extraneous information"},  "golden_answer": "SELECT m.name AS medication_name, COUNT(p.prescription_id) AS prescription_count\nFROM medications m\nJOIN prescriptions p ON m.medication_id = p.medication_id\nJOIN visits v ON p.visit_id = v.visit_id\nJOIN patients pt ON v.patient_id = pt.patient_id\nWHERE v.visit_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 6 MONTH)\nAND pt.date_of_birth <= DATE_SUB(CURRENT_DATE(), INTERVAL 65 YEAR)\nGROUP BY m.medication_id, m.name\nORDER BY prescription_count DESC\nLIMIT 5;","model_id": "us.meta.llama3-3-70b-instruct-v1:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00072, "output_token_cost": 0.00072}
{"text_prompt": "Given the following schema:\nCREATE TABLE accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(20), open_date DATE, balance DECIMAL(15,2), status VARCHAR(10));\nCREATE TABLE customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), date_of_birth DATE, city VARCHAR(50), state VARCHAR(2), credit_score INT);\nCREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_date DATETIME, amount DECIMAL(15,2), transaction_type VARCHAR(20), description VARCHAR(200), FOREIGN KEY (account_id) REFERENCES accounts(account_id));\nCREATE TABLE loans (loan_id INT PRIMARY KEY, customer_id INT, loan_type VARCHAR(30), amount DECIMAL(15,2), interest_rate DECIMAL(5,2), start_date DATE, term_months INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nWrite a SQL query to identify customers who might be good candidates for a new credit card offer based on having a high average monthly deposit amount (over $5000) in the last 3 months, good credit scores (above 700), and no existing loans.",  "expected_output_tokens": 1000,  "task": {"task_type": "TEXT-TO-SQL","task_criteria": "Using the Golden Answer as a guide, generate a correct SQL query that answers the question based on the provided schema without unnecessary complexity or extraneous information"},  "golden_answer": "SELECT c.customer_id, c.first_name, c.last_name, c.credit_score, AVG(t.amount) AS avg_monthly_deposit\nFROM customers c\nJOIN accounts a ON c.customer_id = a.customer_id\nJOIN transactions t ON a.account_id = t.account_id\nWHERE t.transaction_type = 'deposit'\nAND t.transaction_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 3 MONTH)\nAND c.credit_score > 700\nAND c.customer_id NOT IN (\n  SELECT DISTINCT customer_id FROM loans\n)\nGROUP BY c.customer_id, c.first_name, c.last_name, c.credit_score\nHAVING AVG(t.amount) > 5000\nORDER BY avg_monthly_deposit DESC;","model_id": "us.meta.llama3-3-70b-instruct-v1:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00072, "output_token_cost": 0.00072}
{"text_prompt": "Given the following schema:\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), join_date DATE, last_login DATETIME, status VARCHAR(20));\nCREATE TABLE posts (post_id INT PRIMARY KEY, user_id INT, content TEXT, post_date DATETIME, likes INT, shares INT, FOREIGN KEY (user_id) REFERENCES users(user_id));\nCREATE TABLE comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, content TEXT, comment_date DATETIME, likes INT, FOREIGN KEY (post_id) REFERENCES posts(post_id), FOREIGN KEY (user_id) REFERENCES users(user_id));\nCREATE TABLE follows (follower_id INT, followee_id INT, follow_date DATE, PRIMARY KEY (follower_id, followee_id), FOREIGN KEY (follower_id) REFERENCES users(user_id), FOREIGN KEY (followee_id) REFERENCES users(user_id));\n\nWrite a SQL query to find the most engaging users who have created posts that received both high comments and likes (in top 10%) in the past month.",  "expected_output_tokens": 1000,  "task": {"task_type": "TEXT-TO-SQL","task_criteria": "Using the Golden Answer as a guide, generate a correct SQL query that answers the question based on the provided schema without unnecessary complexity or extraneous information"},  "golden_answer": "WITH engagement_metrics AS (\n  SELECT p.user_id,\n         COUNT(DISTINCT p.post_id) AS post_count,\n         SUM(p.likes) AS total_likes,\n         COUNT(DISTINCT c.comment_id) AS comment_count\n  FROM posts p\n  LEFT JOIN comments c ON p.post_id = c.post_id\n  WHERE p.post_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 MONTH)\n  GROUP BY p.user_id\n),\npercentiles AS (\n  SELECT\n    PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY total_likes) AS likes_threshold,\n    PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY comment_count) AS comments_threshold\n  FROM engagement_metrics\n)\nSELECT u.user_id, u.username, e.post_count, e.total_likes, e.comment_count\nFROM users u\nJOIN engagement_metrics e ON u.user_id = e.user_id\nCROSS JOIN percentiles p\nWHERE e.total_likes > p.likes_threshold\nAND e.comment_count > p.comments_threshold\nORDER BY (e.total_likes + e.comment_count) DESC;","model_id": "us.meta.llama3-3-70b-instruct-v1:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00072, "output_token_cost": 0.00072}
{"text_prompt": "Given the following schema:\nCREATE TABLE hotels (hotel_id INT PRIMARY KEY, name VARCHAR(100), city VARCHAR(50), state VARCHAR(2), stars INT, amenities TEXT);\nCREATE TABLE room_types (type_id INT PRIMARY KEY, hotel_id INT, type_name VARCHAR(50), capacity INT, price_per_night DECIMAL(10,2), FOREIGN KEY (hotel_id) REFERENCES hotels(hotel_id));\nCREATE TABLE guests (guest_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone VARCHAR(20), loyalty_level VARCHAR(20));\nCREATE TABLE reservations (reservation_id INT PRIMARY KEY, guest_id INT, hotel_id INT, room_type_id INT, check_in_date DATE, check_out_date DATE, total_price DECIMAL(10,2), status VARCHAR(20), FOREIGN KEY (guest_id) REFERENCES guests(guest_id), FOREIGN KEY (hotel_id) REFERENCES hotels(hotel_id), FOREIGN KEY (room_type_id) REFERENCES room_types(type_id));\nCREATE TABLE reviews (review_id INT PRIMARY KEY, reservation_id INT, rating INT, comment TEXT, review_date DATE, FOREIGN KEY (reservation_id) REFERENCES reservations(reservation_id));\n\nWrite a SQL query to find hotels with available rooms of any type during a specific date range (June 15-20, 2023) in 'Miami', ordered by average review rating.",  "expected_output_tokens": 1000,  "task": {"task_type": "TEXT-TO-SQL","task_criteria": "Using the Golden Answer as a guide, generate a correct SQL query that answers the question based on the provided schema without unnecessary complexity or extraneous information"},  "golden_answer": "WITH unavailable_rooms AS (\n  SELECT DISTINCT r.hotel_id, r.room_type_id\n  FROM reservations r\n  WHERE (r.check_in_date <= '2023-06-20' AND r.check_out_date >= '2023-06-15')\n  AND r.status != 'cancelled'\n),\navg_ratings AS (\n  SELECT h.hotel_id, AVG(rv.rating) AS avg_rating\n  FROM hotels h\n  LEFT JOIN reservations r ON h.hotel_id = r.hotel_id\n  LEFT JOIN reviews rv ON r.reservation_id = rv.reservation_id\n  GROUP BY h.hotel_id\n)\nSELECT h.hotel_id, h.name, h.stars, ar.avg_rating,\n       COUNT(DISTINCT rt.type_id) AS available_room_types\nFROM hotels h\nJOIN room_types rt ON h.hotel_id = rt.hotel_id\nLEFT JOIN unavailable_rooms ur ON h.hotel_id = ur.hotel_id AND rt.type_id = ur.room_type_id\nLEFT JOIN avg_ratings ar ON h.hotel_id = ar.hotel_id\nWHERE h.city = 'Miami'\nAND ur.hotel_id IS NULL\nGROUP BY h.hotel_id, h.name, h.stars, ar.avg_rating\nHAVING COUNT(DISTINCT rt.type_id) > 0\nORDER BY ar.avg_rating DESC NULLS LAST;","model_id": "us.meta.llama3-3-70b-instruct-v1:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00072, "output_token_cost": 0.00072}
{"text_prompt": "Given the following schema:\nCREATE TABLE movies (movie_id INT PRIMARY KEY, title VARCHAR(200), release_year INT, runtime_minutes INT, budget DECIMAL(15,2), box_office DECIMAL(15,2), studio VARCHAR(100));\nCREATE TABLE genres (genre_id INT PRIMARY KEY, genre_name VARCHAR(50));\nCREATE TABLE movie_genres (movie_id INT, genre_id INT, PRIMARY KEY (movie_id, genre_id), FOREIGN KEY (movie_id) REFERENCES movies(movie_id), FOREIGN KEY (genre_id) REFERENCES genres(genre_id));\nCREATE TABLE people (person_id INT PRIMARY KEY, name VARCHAR(100), birthdate DATE, nationality VARCHAR(50));\nCREATE TABLE movie_cast (movie_id INT, person_id INT, character_name VARCHAR(100), role_type VARCHAR(50), PRIMARY KEY (movie_id, person_id, character_name), FOREIGN KEY (movie_id) REFERENCES movies(movie_id), FOREIGN KEY (person_id) REFERENCES people(person_id));\nCREATE TABLE movie_crew (movie_id INT, person_id INT, role VARCHAR(50), PRIMARY KEY (movie_id, person_id, role), FOREIGN KEY (movie_id) REFERENCES movies(movie_id), FOREIGN KEY (person_id) REFERENCES people(person_id));\n\nWrite a SQL query to find the most profitable actors who have starred in at least 3 movies in the last decade (since 2013), showing their total box office revenue, average movie rating, and their most common genre.", "expected_output_tokens": 1000,  "task": {"task_type": "TEXT-TO-SQL","task_criteria": "Using the Golden Answer as a guide, generate a correct SQL query that answers the question based on the provided schema without unnecessary complexity or extraneous information"},  "golden_answer": "WITH actor_movies AS (\n  SELECT p.person_id, p.name, m.movie_id, m.title, m.box_office, m.budget\n  FROM people p\n  JOIN movie_cast mc ON p.person_id = mc.person_id\n  JOIN movies m ON mc.movie_id = m.movie_id\n  WHERE mc.role_type = 'lead'\n  AND m.release_year >= 2013\n),\nactor_metrics AS (\n  SELECT \n    am.person_id, \n    am.name,\n    COUNT(DISTINCT am.movie_id) AS movie_count,\n    SUM(am.box_office) AS total_box_office,\n    SUM(am.box_office - am.budget) AS total_profit\n  FROM actor_movies am\n  GROUP BY am.person_id, am.name\n  HAVING COUNT(DISTINCT am.movie_id) >= 3\n),\nactor_genres AS (\n  SELECT \n    am.person_id,\n    g.genre_name,\n    COUNT(*) AS genre_count,\n    ROW_NUMBER() OVER (PARTITION BY am.person_id ORDER BY COUNT(*) DESC) AS genre_rank\n  FROM actor_movies am\n  JOIN movie_genres mg ON am.movie_id = mg.movie_id\n  JOIN genres g ON mg.genre_id = g.genre_id\n  GROUP BY am.person_id, g.genre_name\n)\nSELECT \n  am.person_id,\n  am.name,\n  am.movie_count,\n  am.total_box_office,\n  am.total_profit,\n  ag.genre_name AS most_common_genre\nFROM actor_metrics am\nLEFT JOIN actor_genres ag ON am.person_id = ag.person_id AND ag.genre_rank = 1\nORDER BY am.total_profit DESC\nLIMIT 10;","model_id": "us.meta.llama3-3-70b-instruct-v1:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00072, "output_token_cost": 0.00072}
{"text_prompt": "Given the following schema:\nCREATE TABLE teams (team_id INT PRIMARY KEY, team_name VARCHAR(100), city VARCHAR(50), founded_year INT, stadium VARCHAR(100), coach VARCHAR(100));\nCREATE TABLE players (player_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), birth_date DATE, nationality VARCHAR(50), position VARCHAR(30), team_id INT, jersey_number INT, FOREIGN KEY (team_id) REFERENCES teams(team_id));\nCREATE TABLE matches (match_id INT PRIMARY KEY, home_team_id INT, away_team_id INT, match_date DATE, season VARCHAR(20), home_score INT, away_score INT, stadium VARCHAR(100), attendance INT, FOREIGN KEY (home_team_id) REFERENCES teams(team_id), FOREIGN KEY (away_team_id) REFERENCES teams(team_id));\nCREATE TABLE goals (goal_id INT PRIMARY KEY, match_id INT, player_id INT, team_id INT, minute INT, is_penalty BOOLEAN, is_own_goal BOOLEAN, FOREIGN KEY (match_id) REFERENCES matches(match_id), FOREIGN KEY (player_id) REFERENCES players(player_id), FOREIGN KEY (team_id) REFERENCES teams(team_id));\nCREATE TABLE injuries (injury_id INT PRIMARY KEY, player_id INT, start_date DATE, end_date DATE, injury_type VARCHAR(100), FOREIGN KEY (player_id) REFERENCES players(player_id));\n\nWrite a SQL query to identify the players with the best scoring efficiency (goals per match played) in the current season, who have played at least 10 matches, including information about their position and nationality.",  "expected_output_tokens": 1000,  "task": {"task_type": "TEXT-TO-SQL","task_criteria": "Using the Golden Answer as a guide, generate a correct SQL query that answers the question based on the provided schema without unnecessary complexity or extraneous information"},  "golden_answer": "WITH player_matches AS (\n  SELECT p.player_id, p.first_name, p.last_name, p.position, p.nationality,         COUNT(DISTINCT m.match_id) AS matches_played\n  FROM players p\n  JOIN teams t ON p.team_id = t.team_id\n  JOIN matches m ON (t.team_id = m.home_team_id OR t.team_id = m.away_team_id)\n  WHERE m.season = (SELECT MAX(season) FROM matches)\n  GROUP BY p.player_id, p.first_name, p.last_name, p.position, p.nationality\n),\nplayer_goals AS (\n  SELECT g.player_id, COUNT(*) AS goals_scored\n  FROM goals g\n  JOIN matches m ON g.match_id = m.match_id\n  WHERE m.season = (SELECT MAX(season) FROM matches)\n  AND g.is_own_goal = FALSE\n  GROUP BY g.player_id\n)\nSELECT \n  pm.player_id,\n  pm.first_name,\n  pm.last_name,\n  pm.position,\n  pm.nationality,\n  pm.matches_played,\n  COALESCE(pg.goals_scored, 0) AS goals_scored,\n  ROUND(COALESCE(pg.goals_scored, 0) * 1.0 / pm.matches_played, 3) AS goals_per_match\nFROM player_matches pm\nLEFT JOIN player_goals pg ON pm.player_id = pg.player_id\nWHERE pm.matches_played >= 10\nORDER BY goals_per_match DESC, goals_scored DESC\nLIMIT 10;","model_id": "us.meta.llama3-3-70b-instruct-v1:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00072, "output_token_cost": 0.00072}
{"text_prompt": "Given the following schema:\nCREATE TABLE products (product_id INT PRIMARY KEY, name VARCHAR(100), category VARCHAR(50), price DECIMAL(10,2));\nCREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(100), email VARCHAR(100), join_date DATE);\nCREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\nCREATE TABLE order_items (item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id));\n\nWrite a SQL query to find the top 5 customers who have spent the most money in the past month, showing their name, email, and total amount spent.",  "expected_output_tokens": 1000,  "task": {"task_type": "TEXT-TO-SQL","task_criteria": "Using the Golden Answer as a guide, generate a correct SQL query that answers the question based on the provided schema without unnecessary complexity or extraneous information"},  "golden_answer": "SELECT c.name, c.email, SUM(o.total_amount) AS total_spent\nFROM customers c\nJOIN orders o ON c.customer_id = o.customer_id\nWHERE o.order_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 MONTH)\nGROUP BY c.customer_id, c.name, c.email\nORDER BY total_spent DESC\nLIMIT 5;","model_id": "anthropic.claude-3-5-sonnet-20241022-v2:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.003, "output_token_cost": 0.015}
{"text_prompt": "Given the following schema:\nCREATE TABLE employees (employee_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), hire_date DATE, department_id INT, salary DECIMAL(10,2));\nCREATE TABLE departments (department_id INT PRIMARY KEY, department_name VARCHAR(100), location VARCHAR(100));\nCREATE TABLE projects (project_id INT PRIMARY KEY, project_name VARCHAR(100), start_date DATE, end_date DATE, budget DECIMAL(15,2));\nCREATE TABLE employee_projects (employee_id INT, project_id INT, role VARCHAR(50), hours_worked INT, PRIMARY KEY (employee_id, project_id), FOREIGN KEY (employee_id) REFERENCES employees(employee_id), FOREIGN KEY (project_id) REFERENCES projects(project_id));\n\nWrite a SQL query to find the departments with their average employee salary, but only include departments where the average salary is above the company-wide average salary.",  "expected_output_tokens": 1000,  "task": {"task_type": "TEXT-TO-SQL","task_criteria": "Using the Golden Answer as a guide, generate a correct SQL query that answers the question based on the provided schema without unnecessary complexity or extraneous information"},  "golden_answer": "WITH avg_company_salary AS (\n  SELECT AVG(salary) AS avg_salary\n  FROM employees\n)\nSELECT d.department_name, AVG(e.salary) AS avg_department_salary\nFROM departments d\nJOIN employees e ON d.department_id = e.department_id\nGROUP BY d.department_id, d.department_name\nHAVING AVG(e.salary) > (SELECT avg_salary FROM avg_company_salary)\nORDER BY avg_department_salary DESC;","model_id": "anthropic.claude-3-5-sonnet-20241022-v2:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.003, "output_token_cost": 0.015}
{"text_prompt": "Given the following schema:\nCREATE TABLE books (book_id INT PRIMARY KEY, title VARCHAR(200), author_id INT, publisher_id INT, publication_year INT, genre VARCHAR(50), isbn VARCHAR(20), available_copies INT);\nCREATE TABLE authors (author_id INT PRIMARY KEY, name VARCHAR(100), birth_year INT, nationality VARCHAR(50));\nCREATE TABLE publishers (publisher_id INT PRIMARY KEY, name VARCHAR(100), location VARCHAR(100));\nCREATE TABLE members (member_id INT PRIMARY KEY, name VARCHAR(100), email VARCHAR(100), join_date DATE, membership_type VARCHAR(20));\nCREATE TABLE loans (loan_id INT PRIMARY KEY, book_id INT, member_id INT, checkout_date DATE, due_date DATE, return_date DATE, FOREIGN KEY (book_id) REFERENCES books(book_id), FOREIGN KEY (member_id) REFERENCES members(member_id));\n\nWrite a SQL query to find the top 3 most frequently borrowed genres in the past year, along with the count of loans for each genre.",  "expected_output_tokens": 1000,  "task": {"task_type": "TEXT-TO-SQL","task_criteria": "Using the Golden Answer as a guide, generate a correct SQL query that answers the question based on the provided schema without unnecessary complexity or extraneous information"},  "golden_answer": "SELECT b.genre, COUNT(l.loan_id) AS loan_count\nFROM books b\nJOIN loans l ON b.book_id = l.book_id\nWHERE l.checkout_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)\nGROUP BY b.genre\nORDER BY loan_count DESC\nLIMIT 3;","model_id": "anthropic.claude-3-5-sonnet-20241022-v2:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.003, "output_token_cost": 0.015}
{"text_prompt": "Given the following schema:\nCREATE TABLE students (student_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), date_of_birth DATE, enrollment_date DATE, major_id INT);\nCREATE TABLE majors (major_id INT PRIMARY KEY, major_name VARCHAR(100), department VARCHAR(100));\nCREATE TABLE courses (course_id INT PRIMARY KEY, course_code VARCHAR(20), course_name VARCHAR(100), credits INT, department VARCHAR(100));\nCREATE TABLE instructors (instructor_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(100), hire_date DATE);\nCREATE TABLE enrollments (enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, instructor_id INT, semester VARCHAR(20), year INT, grade VARCHAR(2), FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (instructor_id) REFERENCES instructors(instructor_id));\n\nWrite a SQL query to find students who have taken all courses offered by their major's department.",  "expected_output_tokens": 1000,  "task": {"task_type": "TEXT-TO-SQL","task_criteria": "Using the Golden Answer as a guide, generate a correct SQL query that answers the question based on the provided schema without unnecessary complexity or extraneous information"},  "golden_answer": "WITH department_course_counts AS (\n  SELECT m.major_id, m.department, COUNT(DISTINCT c.course_id) AS total_courses\n  FROM majors m\n  JOIN courses c ON m.department = c.department\n  GROUP BY m.major_id, m.department\n),\nstudent_course_counts AS (\n  SELECT s.student_id, s.first_name, s.last_name, s.major_id, m.department, COUNT(DISTINCT e.course_id) AS courses_taken\n  FROM students s\n  JOIN majors m ON s.major_id = m.major_id\n  JOIN enrollments e ON s.student_id = e.student_id\n  JOIN courses c ON e.course_id = c.course_id AND m.department = c.department\n  GROUP BY s.student_id, s.first_name, s.last_name, s.major_id, m.department\n)\nSELECT scc.student_id, scc.first_name, scc.last_name\nFROM student_course_counts scc\nJOIN department_course_counts dcc ON scc.major_id = dcc.major_id\nWHERE scc.courses_taken = dcc.total_courses;","model_id": "anthropic.claude-3-5-sonnet-20241022-v2:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.003, "output_token_cost": 0.015}
{"text_prompt": "Given the following schema:\nCREATE TABLE patients (patient_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), date_of_birth DATE, gender VARCHAR(10), blood_type VARCHAR(5));\nCREATE TABLE doctors (doctor_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), specialty VARCHAR(100));\nCREATE TABLE visits (visit_id INT PRIMARY KEY, patient_id INT, doctor_id INT, visit_date DATE, diagnosis VARCHAR(200), FOREIGN KEY (patient_id) REFERENCES patients(patient_id), FOREIGN KEY (doctor_id) REFERENCES doctors(doctor_id));\nCREATE TABLE medications (medication_id INT PRIMARY KEY, name VARCHAR(100), manufacturer VARCHAR(100), category VARCHAR(50));\nCREATE TABLE prescriptions (prescription_id INT PRIMARY KEY, visit_id INT, medication_id INT, dosage VARCHAR(50), start_date DATE, end_date DATE, FOREIGN KEY (visit_id) REFERENCES visits(visit_id), FOREIGN KEY (medication_id) REFERENCES medications(medication_id));\n\nWrite a SQL query to find the top 5 most commonly prescribed medications for patients over 65 years old in the last 6 months.",  "expected_output_tokens": 1000,  "task": {"task_type": "TEXT-TO-SQL","task_criteria": "Using the Golden Answer as a guide, generate a correct SQL query that answers the question based on the provided schema without unnecessary complexity or extraneous information"},  "golden_answer": "SELECT m.name AS medication_name, COUNT(p.prescription_id) AS prescription_count\nFROM medications m\nJOIN prescriptions p ON m.medication_id = p.medication_id\nJOIN visits v ON p.visit_id = v.visit_id\nJOIN patients pt ON v.patient_id = pt.patient_id\nWHERE v.visit_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 6 MONTH)\nAND pt.date_of_birth <= DATE_SUB(CURRENT_DATE(), INTERVAL 65 YEAR)\nGROUP BY m.medication_id, m.name\nORDER BY prescription_count DESC\nLIMIT 5;","model_id": "anthropic.claude-3-5-sonnet-20241022-v2:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.003, "output_token_cost": 0.015}
{"text_prompt": "Given the following schema:\nCREATE TABLE accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(20), open_date DATE, balance DECIMAL(15,2), status VARCHAR(10));\nCREATE TABLE customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), date_of_birth DATE, city VARCHAR(50), state VARCHAR(2), credit_score INT);\nCREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_date DATETIME, amount DECIMAL(15,2), transaction_type VARCHAR(20), description VARCHAR(200), FOREIGN KEY (account_id) REFERENCES accounts(account_id));\nCREATE TABLE loans (loan_id INT PRIMARY KEY, customer_id INT, loan_type VARCHAR(30), amount DECIMAL(15,2), interest_rate DECIMAL(5,2), start_date DATE, term_months INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nWrite a SQL query to identify customers who might be good candidates for a new credit card offer based on having a high average monthly deposit amount (over $5000) in the last 3 months, good credit scores (above 700), and no existing loans.",  "expected_output_tokens": 1000,  "task": {"task_type": "TEXT-TO-SQL","task_criteria": "Using the Golden Answer as a guide, generate a correct SQL query that answers the question based on the provided schema without unnecessary complexity or extraneous information"},  "golden_answer": "SELECT c.customer_id, c.first_name, c.last_name, c.credit_score, AVG(t.amount) AS avg_monthly_deposit\nFROM customers c\nJOIN accounts a ON c.customer_id = a.customer_id\nJOIN transactions t ON a.account_id = t.account_id\nWHERE t.transaction_type = 'deposit'\nAND t.transaction_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 3 MONTH)\nAND c.credit_score > 700\nAND c.customer_id NOT IN (\n  SELECT DISTINCT customer_id FROM loans\n)\nGROUP BY c.customer_id, c.first_name, c.last_name, c.credit_score\nHAVING AVG(t.amount) > 5000\nORDER BY avg_monthly_deposit DESC;","model_id": "anthropic.claude-3-5-sonnet-20241022-v2:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.003, "output_token_cost": 0.015}
{"text_prompt": "Given the following schema:\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), join_date DATE, last_login DATETIME, status VARCHAR(20));\nCREATE TABLE posts (post_id INT PRIMARY KEY, user_id INT, content TEXT, post_date DATETIME, likes INT, shares INT, FOREIGN KEY (user_id) REFERENCES users(user_id));\nCREATE TABLE comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, content TEXT, comment_date DATETIME, likes INT, FOREIGN KEY (post_id) REFERENCES posts(post_id), FOREIGN KEY (user_id) REFERENCES users(user_id));\nCREATE TABLE follows (follower_id INT, followee_id INT, follow_date DATE, PRIMARY KEY (follower_id, followee_id), FOREIGN KEY (follower_id) REFERENCES users(user_id), FOREIGN KEY (followee_id) REFERENCES users(user_id));\n\nWrite a SQL query to find the most engaging users who have created posts that received both high comments and likes (in top 10%) in the past month.",  "expected_output_tokens": 1000,  "task": {"task_type": "TEXT-TO-SQL","task_criteria": "Using the Golden Answer as a guide, generate a correct SQL query that answers the question based on the provided schema without unnecessary complexity or extraneous information"},  "golden_answer": "WITH engagement_metrics AS (\n  SELECT p.user_id,\n         COUNT(DISTINCT p.post_id) AS post_count,\n         SUM(p.likes) AS total_likes,\n         COUNT(DISTINCT c.comment_id) AS comment_count\n  FROM posts p\n  LEFT JOIN comments c ON p.post_id = c.post_id\n  WHERE p.post_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 MONTH)\n  GROUP BY p.user_id\n),\npercentiles AS (\n  SELECT\n    PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY total_likes) AS likes_threshold,\n    PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY comment_count) AS comments_threshold\n  FROM engagement_metrics\n)\nSELECT u.user_id, u.username, e.post_count, e.total_likes, e.comment_count\nFROM users u\nJOIN engagement_metrics e ON u.user_id = e.user_id\nCROSS JOIN percentiles p\nWHERE e.total_likes > p.likes_threshold\nAND e.comment_count > p.comments_threshold\nORDER BY (e.total_likes + e.comment_count) DESC;","model_id": "anthropic.claude-3-5-sonnet-20241022-v2:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.003, "output_token_cost": 0.015}
{"text_prompt": "Given the following schema:\nCREATE TABLE hotels (hotel_id INT PRIMARY KEY, name VARCHAR(100), city VARCHAR(50), state VARCHAR(2), stars INT, amenities TEXT);\nCREATE TABLE room_types (type_id INT PRIMARY KEY, hotel_id INT, type_name VARCHAR(50), capacity INT, price_per_night DECIMAL(10,2), FOREIGN KEY (hotel_id) REFERENCES hotels(hotel_id));\nCREATE TABLE guests (guest_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone VARCHAR(20), loyalty_level VARCHAR(20));\nCREATE TABLE reservations (reservation_id INT PRIMARY KEY, guest_id INT, hotel_id INT, room_type_id INT, check_in_date DATE, check_out_date DATE, total_price DECIMAL(10,2), status VARCHAR(20), FOREIGN KEY (guest_id) REFERENCES guests(guest_id), FOREIGN KEY (hotel_id) REFERENCES hotels(hotel_id), FOREIGN KEY (room_type_id) REFERENCES room_types(type_id));\nCREATE TABLE reviews (review_id INT PRIMARY KEY, reservation_id INT, rating INT, comment TEXT, review_date DATE, FOREIGN KEY (reservation_id) REFERENCES reservations(reservation_id));\n\nWrite a SQL query to find hotels with available rooms of any type during a specific date range (June 15-20, 2023) in 'Miami', ordered by average review rating.",  "expected_output_tokens": 1000,  "task": {"task_type": "TEXT-TO-SQL","task_criteria": "Using the Golden Answer as a guide, generate a correct SQL query that answers the question based on the provided schema without unnecessary complexity or extraneous information"},  "golden_answer": "WITH unavailable_rooms AS (\n  SELECT DISTINCT r.hotel_id, r.room_type_id\n  FROM reservations r\n  WHERE (r.check_in_date <= '2023-06-20' AND r.check_out_date >= '2023-06-15')\n  AND r.status != 'cancelled'\n),\navg_ratings AS (\n  SELECT h.hotel_id, AVG(rv.rating) AS avg_rating\n  FROM hotels h\n  LEFT JOIN reservations r ON h.hotel_id = r.hotel_id\n  LEFT JOIN reviews rv ON r.reservation_id = rv.reservation_id\n  GROUP BY h.hotel_id\n)\nSELECT h.hotel_id, h.name, h.stars, ar.avg_rating,\n       COUNT(DISTINCT rt.type_id) AS available_room_types\nFROM hotels h\nJOIN room_types rt ON h.hotel_id = rt.hotel_id\nLEFT JOIN unavailable_rooms ur ON h.hotel_id = ur.hotel_id AND rt.type_id = ur.room_type_id\nLEFT JOIN avg_ratings ar ON h.hotel_id = ar.hotel_id\nWHERE h.city = 'Miami'\nAND ur.hotel_id IS NULL\nGROUP BY h.hotel_id, h.name, h.stars, ar.avg_rating\nHAVING COUNT(DISTINCT rt.type_id) > 0\nORDER BY ar.avg_rating DESC NULLS LAST;","model_id": "anthropic.claude-3-5-sonnet-20241022-v2:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.003, "output_token_cost": 0.015}
{"text_prompt": "Given the following schema:\nCREATE TABLE movies (movie_id INT PRIMARY KEY, title VARCHAR(200), release_year INT, runtime_minutes INT, budget DECIMAL(15,2), box_office DECIMAL(15,2), studio VARCHAR(100));\nCREATE TABLE genres (genre_id INT PRIMARY KEY, genre_name VARCHAR(50));\nCREATE TABLE movie_genres (movie_id INT, genre_id INT, PRIMARY KEY (movie_id, genre_id), FOREIGN KEY (movie_id) REFERENCES movies(movie_id), FOREIGN KEY (genre_id) REFERENCES genres(genre_id));\nCREATE TABLE people (person_id INT PRIMARY KEY, name VARCHAR(100), birthdate DATE, nationality VARCHAR(50));\nCREATE TABLE movie_cast (movie_id INT, person_id INT, character_name VARCHAR(100), role_type VARCHAR(50), PRIMARY KEY (movie_id, person_id, character_name), FOREIGN KEY (movie_id) REFERENCES movies(movie_id), FOREIGN KEY (person_id) REFERENCES people(person_id));\nCREATE TABLE movie_crew (movie_id INT, person_id INT, role VARCHAR(50), PRIMARY KEY (movie_id, person_id, role), FOREIGN KEY (movie_id) REFERENCES movies(movie_id), FOREIGN KEY (person_id) REFERENCES people(person_id));\n\nWrite a SQL query to find the most profitable actors who have starred in at least 3 movies in the last decade (since 2013), showing their total box office revenue, average movie rating, and their most common genre.", "expected_output_tokens": 1000,  "task": {"task_type": "TEXT-TO-SQL","task_criteria": "Using the Golden Answer as a guide, generate a correct SQL query that answers the question based on the provided schema without unnecessary complexity or extraneous information"},  "golden_answer": "WITH actor_movies AS (\n  SELECT p.person_id, p.name, m.movie_id, m.title, m.box_office, m.budget\n  FROM people p\n  JOIN movie_cast mc ON p.person_id = mc.person_id\n  JOIN movies m ON mc.movie_id = m.movie_id\n  WHERE mc.role_type = 'lead'\n  AND m.release_year >= 2013\n),\nactor_metrics AS (\n  SELECT \n    am.person_id, \n    am.name,\n    COUNT(DISTINCT am.movie_id) AS movie_count,\n    SUM(am.box_office) AS total_box_office,\n    SUM(am.box_office - am.budget) AS total_profit\n  FROM actor_movies am\n  GROUP BY am.person_id, am.name\n  HAVING COUNT(DISTINCT am.movie_id) >= 3\n),\nactor_genres AS (\n  SELECT \n    am.person_id,\n    g.genre_name,\n    COUNT(*) AS genre_count,\n    ROW_NUMBER() OVER (PARTITION BY am.person_id ORDER BY COUNT(*) DESC) AS genre_rank\n  FROM actor_movies am\n  JOIN movie_genres mg ON am.movie_id = mg.movie_id\n  JOIN genres g ON mg.genre_id = g.genre_id\n  GROUP BY am.person_id, g.genre_name\n)\nSELECT \n  am.person_id,\n  am.name,\n  am.movie_count,\n  am.total_box_office,\n  am.total_profit,\n  ag.genre_name AS most_common_genre\nFROM actor_metrics am\nLEFT JOIN actor_genres ag ON am.person_id = ag.person_id AND ag.genre_rank = 1\nORDER BY am.total_profit DESC\nLIMIT 10;","model_id": "anthropic.claude-3-5-sonnet-20241022-v2:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.003, "output_token_cost": 0.015}
{"text_prompt": "Given the following schema:\nCREATE TABLE teams (team_id INT PRIMARY KEY, team_name VARCHAR(100), city VARCHAR(50), founded_year INT, stadium VARCHAR(100), coach VARCHAR(100));\nCREATE TABLE players (player_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), birth_date DATE, nationality VARCHAR(50), position VARCHAR(30), team_id INT, jersey_number INT, FOREIGN KEY (team_id) REFERENCES teams(team_id));\nCREATE TABLE matches (match_id INT PRIMARY KEY, home_team_id INT, away_team_id INT, match_date DATE, season VARCHAR(20), home_score INT, away_score INT, stadium VARCHAR(100), attendance INT, FOREIGN KEY (home_team_id) REFERENCES teams(team_id), FOREIGN KEY (away_team_id) REFERENCES teams(team_id));\nCREATE TABLE goals (goal_id INT PRIMARY KEY, match_id INT, player_id INT, team_id INT, minute INT, is_penalty BOOLEAN, is_own_goal BOOLEAN, FOREIGN KEY (match_id) REFERENCES matches(match_id), FOREIGN KEY (player_id) REFERENCES players(player_id), FOREIGN KEY (team_id) REFERENCES teams(team_id));\nCREATE TABLE injuries (injury_id INT PRIMARY KEY, player_id INT, start_date DATE, end_date DATE, injury_type VARCHAR(100), FOREIGN KEY (player_id) REFERENCES players(player_id));\n\nWrite a SQL query to identify the players with the best scoring efficiency (goals per match played) in the current season, who have played at least 10 matches, including information about their position and nationality.",  "expected_output_tokens": 1000,  "task": {"task_type": "TEXT-TO-SQL","task_criteria": "Using the Golden Answer as a guide, generate a correct SQL query that answers the question based on the provided schema without unnecessary complexity or extraneous information"},  "golden_answer": "WITH player_matches AS (\n  SELECT p.player_id, p.first_name, p.last_name, p.position, p.nationality,         COUNT(DISTINCT m.match_id) AS matches_played\n  FROM players p\n  JOIN teams t ON p.team_id = t.team_id\n  JOIN matches m ON (t.team_id = m.home_team_id OR t.team_id = m.away_team_id)\n  WHERE m.season = (SELECT MAX(season) FROM matches)\n  GROUP BY p.player_id, p.first_name, p.last_name, p.position, p.nationality\n),\nplayer_goals AS (\n  SELECT g.player_id, COUNT(*) AS goals_scored\n  FROM goals g\n  JOIN matches m ON g.match_id = m.match_id\n  WHERE m.season = (SELECT MAX(season) FROM matches)\n  AND g.is_own_goal = FALSE\n  GROUP BY g.player_id\n)\nSELECT \n  pm.player_id,\n  pm.first_name,\n  pm.last_name,\n  pm.position,\n  pm.nationality,\n  pm.matches_played,\n  COALESCE(pg.goals_scored, 0) AS goals_scored,\n  ROUND(COALESCE(pg.goals_scored, 0) * 1.0 / pm.matches_played, 3) AS goals_per_match\nFROM player_matches pm\nLEFT JOIN player_goals pg ON pm.player_id = pg.player_id\nWHERE pm.matches_played >= 10\nORDER BY goals_per_match DESC, goals_scored DESC\nLIMIT 10;","model_id": "anthropic.claude-3-5-sonnet-20241022-v2:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.003, "output_token_cost": 0.015}
{"text_prompt": "Given the following schema:\nCREATE TABLE products (product_id INT PRIMARY KEY, name VARCHAR(100), category VARCHAR(50), price DECIMAL(10,2));\nCREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(100), email VARCHAR(100), join_date DATE);\nCREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\nCREATE TABLE order_items (item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id));\n\nWrite a SQL query to find the top 5 customers who have spent the most money in the past month, showing their name, email, and total amount spent.",  "expected_output_tokens": 1000,  "task": {"task_type": "TEXT-TO-SQL","task_criteria": "Using the Golden Answer as a guide, generate a correct SQL query that answers the question based on the provided schema without unnecessary complexity or extraneous information"},  "golden_answer": "SELECT c.name, c.email, SUM(o.total_amount) AS total_spent\nFROM customers c\nJOIN orders o ON c.customer_id = o.customer_id\nWHERE o.order_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 MONTH)\nGROUP BY c.customer_id, c.name, c.email\nORDER BY total_spent DESC\nLIMIT 5;","model_id": "mistral.mixtral-8x7b-instruct-v0:1", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00045, "output_token_cost": 0.0007}
{"text_prompt": "Given the following schema:\nCREATE TABLE employees (employee_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), hire_date DATE, department_id INT, salary DECIMAL(10,2));\nCREATE TABLE departments (department_id INT PRIMARY KEY, department_name VARCHAR(100), location VARCHAR(100));\nCREATE TABLE projects (project_id INT PRIMARY KEY, project_name VARCHAR(100), start_date DATE, end_date DATE, budget DECIMAL(15,2));\nCREATE TABLE employee_projects (employee_id INT, project_id INT, role VARCHAR(50), hours_worked INT, PRIMARY KEY (employee_id, project_id), FOREIGN KEY (employee_id) REFERENCES employees(employee_id), FOREIGN KEY (project_id) REFERENCES projects(project_id));\n\nWrite a SQL query to find the departments with their average employee salary, but only include departments where the average salary is above the company-wide average salary.",  "expected_output_tokens": 1000,  "task": {"task_type": "TEXT-TO-SQL","task_criteria": "Using the Golden Answer as a guide, generate a correct SQL query that answers the question based on the provided schema without unnecessary complexity or extraneous information"},  "golden_answer": "WITH avg_company_salary AS (\n  SELECT AVG(salary) AS avg_salary\n  FROM employees\n)\nSELECT d.department_name, AVG(e.salary) AS avg_department_salary\nFROM departments d\nJOIN employees e ON d.department_id = e.department_id\nGROUP BY d.department_id, d.department_name\nHAVING AVG(e.salary) > (SELECT avg_salary FROM avg_company_salary)\nORDER BY avg_department_salary DESC;","model_id": "mistral.mixtral-8x7b-instruct-v0:1", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00045, "output_token_cost": 0.0007}
{"text_prompt": "Given the following schema:\nCREATE TABLE books (book_id INT PRIMARY KEY, title VARCHAR(200), author_id INT, publisher_id INT, publication_year INT, genre VARCHAR(50), isbn VARCHAR(20), available_copies INT);\nCREATE TABLE authors (author_id INT PRIMARY KEY, name VARCHAR(100), birth_year INT, nationality VARCHAR(50));\nCREATE TABLE publishers (publisher_id INT PRIMARY KEY, name VARCHAR(100), location VARCHAR(100));\nCREATE TABLE members (member_id INT PRIMARY KEY, name VARCHAR(100), email VARCHAR(100), join_date DATE, membership_type VARCHAR(20));\nCREATE TABLE loans (loan_id INT PRIMARY KEY, book_id INT, member_id INT, checkout_date DATE, due_date DATE, return_date DATE, FOREIGN KEY (book_id) REFERENCES books(book_id), FOREIGN KEY (member_id) REFERENCES members(member_id));\n\nWrite a SQL query to find the top 3 most frequently borrowed genres in the past year, along with the count of loans for each genre.",  "expected_output_tokens": 1000,  "task": {"task_type": "TEXT-TO-SQL","task_criteria": "Using the Golden Answer as a guide, generate a correct SQL query that answers the question based on the provided schema without unnecessary complexity or extraneous information"},  "golden_answer": "SELECT b.genre, COUNT(l.loan_id) AS loan_count\nFROM books b\nJOIN loans l ON b.book_id = l.book_id\nWHERE l.checkout_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)\nGROUP BY b.genre\nORDER BY loan_count DESC\nLIMIT 3;","model_id": "mistral.mixtral-8x7b-instruct-v0:1", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00045, "output_token_cost": 0.0007}
{"text_prompt": "Given the following schema:\nCREATE TABLE students (student_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), date_of_birth DATE, enrollment_date DATE, major_id INT);\nCREATE TABLE majors (major_id INT PRIMARY KEY, major_name VARCHAR(100), department VARCHAR(100));\nCREATE TABLE courses (course_id INT PRIMARY KEY, course_code VARCHAR(20), course_name VARCHAR(100), credits INT, department VARCHAR(100));\nCREATE TABLE instructors (instructor_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(100), hire_date DATE);\nCREATE TABLE enrollments (enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, instructor_id INT, semester VARCHAR(20), year INT, grade VARCHAR(2), FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (instructor_id) REFERENCES instructors(instructor_id));\n\nWrite a SQL query to find students who have taken all courses offered by their major's department.",  "expected_output_tokens": 1000,  "task": {"task_type": "TEXT-TO-SQL","task_criteria": "Using the Golden Answer as a guide, generate a correct SQL query that answers the question based on the provided schema without unnecessary complexity or extraneous information"},  "golden_answer": "WITH department_course_counts AS (\n  SELECT m.major_id, m.department, COUNT(DISTINCT c.course_id) AS total_courses\n  FROM majors m\n  JOIN courses c ON m.department = c.department\n  GROUP BY m.major_id, m.department\n),\nstudent_course_counts AS (\n  SELECT s.student_id, s.first_name, s.last_name, s.major_id, m.department, COUNT(DISTINCT e.course_id) AS courses_taken\n  FROM students s\n  JOIN majors m ON s.major_id = m.major_id\n  JOIN enrollments e ON s.student_id = e.student_id\n  JOIN courses c ON e.course_id = c.course_id AND m.department = c.department\n  GROUP BY s.student_id, s.first_name, s.last_name, s.major_id, m.department\n)\nSELECT scc.student_id, scc.first_name, scc.last_name\nFROM student_course_counts scc\nJOIN department_course_counts dcc ON scc.major_id = dcc.major_id\nWHERE scc.courses_taken = dcc.total_courses;","model_id": "mistral.mixtral-8x7b-instruct-v0:1", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00045, "output_token_cost": 0.0007}
{"text_prompt": "Given the following schema:\nCREATE TABLE patients (patient_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), date_of_birth DATE, gender VARCHAR(10), blood_type VARCHAR(5));\nCREATE TABLE doctors (doctor_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), specialty VARCHAR(100));\nCREATE TABLE visits (visit_id INT PRIMARY KEY, patient_id INT, doctor_id INT, visit_date DATE, diagnosis VARCHAR(200), FOREIGN KEY (patient_id) REFERENCES patients(patient_id), FOREIGN KEY (doctor_id) REFERENCES doctors(doctor_id));\nCREATE TABLE medications (medication_id INT PRIMARY KEY, name VARCHAR(100), manufacturer VARCHAR(100), category VARCHAR(50));\nCREATE TABLE prescriptions (prescription_id INT PRIMARY KEY, visit_id INT, medication_id INT, dosage VARCHAR(50), start_date DATE, end_date DATE, FOREIGN KEY (visit_id) REFERENCES visits(visit_id), FOREIGN KEY (medication_id) REFERENCES medications(medication_id));\n\nWrite a SQL query to find the top 5 most commonly prescribed medications for patients over 65 years old in the last 6 months.",  "expected_output_tokens": 1000,  "task": {"task_type": "TEXT-TO-SQL","task_criteria": "Using the Golden Answer as a guide, generate a correct SQL query that answers the question based on the provided schema without unnecessary complexity or extraneous information"},  "golden_answer": "SELECT m.name AS medication_name, COUNT(p.prescription_id) AS prescription_count\nFROM medications m\nJOIN prescriptions p ON m.medication_id = p.medication_id\nJOIN visits v ON p.visit_id = v.visit_id\nJOIN patients pt ON v.patient_id = pt.patient_id\nWHERE v.visit_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 6 MONTH)\nAND pt.date_of_birth <= DATE_SUB(CURRENT_DATE(), INTERVAL 65 YEAR)\nGROUP BY m.medication_id, m.name\nORDER BY prescription_count DESC\nLIMIT 5;","model_id": "mistral.mixtral-8x7b-instruct-v0:1", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00045, "output_token_cost": 0.0007}
{"text_prompt": "Given the following schema:\nCREATE TABLE accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(20), open_date DATE, balance DECIMAL(15,2), status VARCHAR(10));\nCREATE TABLE customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), date_of_birth DATE, city VARCHAR(50), state VARCHAR(2), credit_score INT);\nCREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_date DATETIME, amount DECIMAL(15,2), transaction_type VARCHAR(20), description VARCHAR(200), FOREIGN KEY (account_id) REFERENCES accounts(account_id));\nCREATE TABLE loans (loan_id INT PRIMARY KEY, customer_id INT, loan_type VARCHAR(30), amount DECIMAL(15,2), interest_rate DECIMAL(5,2), start_date DATE, term_months INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nWrite a SQL query to identify customers who might be good candidates for a new credit card offer based on having a high average monthly deposit amount (over $5000) in the last 3 months, good credit scores (above 700), and no existing loans.",  "expected_output_tokens": 1000,  "task": {"task_type": "TEXT-TO-SQL","task_criteria": "Using the Golden Answer as a guide, generate a correct SQL query that answers the question based on the provided schema without unnecessary complexity or extraneous information"},  "golden_answer": "SELECT c.customer_id, c.first_name, c.last_name, c.credit_score, AVG(t.amount) AS avg_monthly_deposit\nFROM customers c\nJOIN accounts a ON c.customer_id = a.customer_id\nJOIN transactions t ON a.account_id = t.account_id\nWHERE t.transaction_type = 'deposit'\nAND t.transaction_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 3 MONTH)\nAND c.credit_score > 700\nAND c.customer_id NOT IN (\n  SELECT DISTINCT customer_id FROM loans\n)\nGROUP BY c.customer_id, c.first_name, c.last_name, c.credit_score\nHAVING AVG(t.amount) > 5000\nORDER BY avg_monthly_deposit DESC;","model_id": "mistral.mixtral-8x7b-instruct-v0:1", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00045, "output_token_cost": 0.0007}
{"text_prompt": "Given the following schema:\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), join_date DATE, last_login DATETIME, status VARCHAR(20));\nCREATE TABLE posts (post_id INT PRIMARY KEY, user_id INT, content TEXT, post_date DATETIME, likes INT, shares INT, FOREIGN KEY (user_id) REFERENCES users(user_id));\nCREATE TABLE comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, content TEXT, comment_date DATETIME, likes INT, FOREIGN KEY (post_id) REFERENCES posts(post_id), FOREIGN KEY (user_id) REFERENCES users(user_id));\nCREATE TABLE follows (follower_id INT, followee_id INT, follow_date DATE, PRIMARY KEY (follower_id, followee_id), FOREIGN KEY (follower_id) REFERENCES users(user_id), FOREIGN KEY (followee_id) REFERENCES users(user_id));\n\nWrite a SQL query to find the most engaging users who have created posts that received both high comments and likes (in top 10%) in the past month.",  "expected_output_tokens": 1000,  "task": {"task_type": "TEXT-TO-SQL","task_criteria": "Generate a correct SQL query that answers the question based on the provided schema without unnecessary complexity or extraneous information"}, "golden_answer": "WITH engagement_metrics AS (\n  SELECT p.user_id,\n         COUNT(DISTINCT p.post_id) AS post_count,\n         SUM(p.likes) AS total_likes,\n         COUNT(DISTINCT c.comment_id) AS comment_count\n  FROM posts p\n  LEFT JOIN comments c ON p.post_id = c.post_id\n  WHERE p.post_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 MONTH)\n  GROUP BY p.user_id\n),\npercentiles AS (\n  SELECT\n    PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY total_likes) AS likes_threshold,\n    PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY comment_count) AS comments_threshold\n  FROM engagement_metrics\n)\nSELECT u.user_id, u.username, e.post_count, e.total_likes, e.comment_count\nFROM users u\nJOIN engagement_metrics e ON u.user_id = e.user_id\nCROSS JOIN percentiles p\nWHERE e.total_likes > p.likes_threshold\nAND e.comment_count > p.comments_threshold\nORDER BY (e.total_likes + e.comment_count) DESC;","model_id": "mistral.mixtral-8x7b-instruct-v0:1", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00045, "output_token_cost": 0.0007}
{"text_prompt": "Given the following schema:\nCREATE TABLE hotels (hotel_id INT PRIMARY KEY, name VARCHAR(100), city VARCHAR(50), state VARCHAR(2), stars INT, amenities TEXT);\nCREATE TABLE room_types (type_id INT PRIMARY KEY, hotel_id INT, type_name VARCHAR(50), capacity INT, price_per_night DECIMAL(10,2), FOREIGN KEY (hotel_id) REFERENCES hotels(hotel_id));\nCREATE TABLE guests (guest_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone VARCHAR(20), loyalty_level VARCHAR(20));\nCREATE TABLE reservations (reservation_id INT PRIMARY KEY, guest_id INT, hotel_id INT, room_type_id INT, check_in_date DATE, check_out_date DATE, total_price DECIMAL(10,2), status VARCHAR(20), FOREIGN KEY (guest_id) REFERENCES guests(guest_id), FOREIGN KEY (hotel_id) REFERENCES hotels(hotel_id), FOREIGN KEY (room_type_id) REFERENCES room_types(type_id));\nCREATE TABLE reviews (review_id INT PRIMARY KEY, reservation_id INT, rating INT, comment TEXT, review_date DATE, FOREIGN KEY (reservation_id) REFERENCES reservations(reservation_id));\n\nWrite a SQL query to find hotels with available rooms of any type during a specific date range (June 15-20, 2023) in 'Miami', ordered by average review rating.",  "expected_output_tokens": 1000,  "task": {"task_type": "TEXT-TO-SQL","task_criteria": "Using the Golden Answer as a guide, generate a correct SQL query that answers the question based on the provided schema without unnecessary complexity or extraneous information"},  "golden_answer": "WITH unavailable_rooms AS (\n  SELECT DISTINCT r.hotel_id, r.room_type_id\n  FROM reservations r\n  WHERE (r.check_in_date <= '2023-06-20' AND r.check_out_date >= '2023-06-15')\n  AND r.status != 'cancelled'\n),\navg_ratings AS (\n  SELECT h.hotel_id, AVG(rv.rating) AS avg_rating\n  FROM hotels h\n  LEFT JOIN reservations r ON h.hotel_id = r.hotel_id\n  LEFT JOIN reviews rv ON r.reservation_id = rv.reservation_id\n  GROUP BY h.hotel_id\n)\nSELECT h.hotel_id, h.name, h.stars, ar.avg_rating,\n       COUNT(DISTINCT rt.type_id) AS available_room_types\nFROM hotels h\nJOIN room_types rt ON h.hotel_id = rt.hotel_id\nLEFT JOIN unavailable_rooms ur ON h.hotel_id = ur.hotel_id AND rt.type_id = ur.room_type_id\nLEFT JOIN avg_ratings ar ON h.hotel_id = ar.hotel_id\nWHERE h.city = 'Miami'\nAND ur.hotel_id IS NULL\nGROUP BY h.hotel_id, h.name, h.stars, ar.avg_rating\nHAVING COUNT(DISTINCT rt.type_id) > 0\nORDER BY ar.avg_rating DESC NULLS LAST;","model_id": "mistral.mixtral-8x7b-instruct-v0:1", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00045, "output_token_cost": 0.0007}
{"text_prompt": "Given the following schema:\nCREATE TABLE movies (movie_id INT PRIMARY KEY, title VARCHAR(200), release_year INT, runtime_minutes INT, budget DECIMAL(15,2), box_office DECIMAL(15,2), studio VARCHAR(100));\nCREATE TABLE genres (genre_id INT PRIMARY KEY, genre_name VARCHAR(50));\nCREATE TABLE movie_genres (movie_id INT, genre_id INT, PRIMARY KEY (movie_id, genre_id), FOREIGN KEY (movie_id) REFERENCES movies(movie_id), FOREIGN KEY (genre_id) REFERENCES genres(genre_id));\nCREATE TABLE people (person_id INT PRIMARY KEY, name VARCHAR(100), birthdate DATE, nationality VARCHAR(50));\nCREATE TABLE movie_cast (movie_id INT, person_id INT, character_name VARCHAR(100), role_type VARCHAR(50), PRIMARY KEY (movie_id, person_id, character_name), FOREIGN KEY (movie_id) REFERENCES movies(movie_id), FOREIGN KEY (person_id) REFERENCES people(person_id));\nCREATE TABLE movie_crew (movie_id INT, person_id INT, role VARCHAR(50), PRIMARY KEY (movie_id, person_id, role), FOREIGN KEY (movie_id) REFERENCES movies(movie_id), FOREIGN KEY (person_id) REFERENCES people(person_id));\n\nWrite a SQL query to find the most profitable actors who have starred in at least 3 movies in the last decade (since 2013), showing their total box office revenue, average movie rating, and their most common genre.", "expected_output_tokens": 1000,  "task": {"task_type": "TEXT-TO-SQL","task_criteria": "Using the Golden Answer as a guide, generate a correct SQL query that answers the question based on the provided schema without unnecessary complexity or extraneous information"},  "golden_answer": "WITH actor_movies AS (\n  SELECT p.person_id, p.name, m.movie_id, m.title, m.box_office, m.budget\n  FROM people p\n  JOIN movie_cast mc ON p.person_id = mc.person_id\n  JOIN movies m ON mc.movie_id = m.movie_id\n  WHERE mc.role_type = 'lead'\n  AND m.release_year >= 2013\n),\nactor_metrics AS (\n  SELECT \n    am.person_id, \n    am.name,\n    COUNT(DISTINCT am.movie_id) AS movie_count,\n    SUM(am.box_office) AS total_box_office,\n    SUM(am.box_office - am.budget) AS total_profit\n  FROM actor_movies am\n  GROUP BY am.person_id, am.name\n  HAVING COUNT(DISTINCT am.movie_id) >= 3\n),\nactor_genres AS (\n  SELECT \n    am.person_id,\n    g.genre_name,\n    COUNT(*) AS genre_count,\n    ROW_NUMBER() OVER (PARTITION BY am.person_id ORDER BY COUNT(*) DESC) AS genre_rank\n  FROM actor_movies am\n  JOIN movie_genres mg ON am.movie_id = mg.movie_id\n  JOIN genres g ON mg.genre_id = g.genre_id\n  GROUP BY am.person_id, g.genre_name\n)\nSELECT \n  am.person_id,\n  am.name,\n  am.movie_count,\n  am.total_box_office,\n  am.total_profit,\n  ag.genre_name AS most_common_genre\nFROM actor_metrics am\nLEFT JOIN actor_genres ag ON am.person_id = ag.person_id AND ag.genre_rank = 1\nORDER BY am.total_profit DESC\nLIMIT 10;","model_id": "mistral.mixtral-8x7b-instruct-v0:1", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00045, "output_token_cost": 0.0007}
{"text_prompt": "Given the following schema:\nCREATE TABLE teams (team_id INT PRIMARY KEY, team_name VARCHAR(100), city VARCHAR(50), founded_year INT, stadium VARCHAR(100), coach VARCHAR(100));\nCREATE TABLE players (player_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), birth_date DATE, nationality VARCHAR(50), position VARCHAR(30), team_id INT, jersey_number INT, FOREIGN KEY (team_id) REFERENCES teams(team_id));\nCREATE TABLE matches (match_id INT PRIMARY KEY, home_team_id INT, away_team_id INT, match_date DATE, season VARCHAR(20), home_score INT, away_score INT, stadium VARCHAR(100), attendance INT, FOREIGN KEY (home_team_id) REFERENCES teams(team_id), FOREIGN KEY (away_team_id) REFERENCES teams(team_id));\nCREATE TABLE goals (goal_id INT PRIMARY KEY, match_id INT, player_id INT, team_id INT, minute INT, is_penalty BOOLEAN, is_own_goal BOOLEAN, FOREIGN KEY (match_id) REFERENCES matches(match_id), FOREIGN KEY (player_id) REFERENCES players(player_id), FOREIGN KEY (team_id) REFERENCES teams(team_id));\nCREATE TABLE injuries (injury_id INT PRIMARY KEY, player_id INT, start_date DATE, end_date DATE, injury_type VARCHAR(100), FOREIGN KEY (player_id) REFERENCES players(player_id));\n\nWrite a SQL query to identify the players with the best scoring efficiency (goals per match played) in the current season, who have played at least 10 matches, including information about their position and nationality.",  "expected_output_tokens": 1000,  "task": {"task_type": "TEXT-TO-SQL","task_criteria": "Using the Golden Answer as a guide, generate a correct SQL query that answers the question based on the provided schema without unnecessary complexity or extraneous information"},  "golden_answer": "WITH player_matches AS (\n  SELECT p.player_id, p.first_name, p.last_name, p.position, p.nationality,         COUNT(DISTINCT m.match_id) AS matches_played\n  FROM players p\n  JOIN teams t ON p.team_id = t.team_id\n  JOIN matches m ON (t.team_id = m.home_team_id OR t.team_id = m.away_team_id)\n  WHERE m.season = (SELECT MAX(season) FROM matches)\n  GROUP BY p.player_id, p.first_name, p.last_name, p.position, p.nationality\n),\nplayer_goals AS (\n  SELECT g.player_id, COUNT(*) AS goals_scored\n  FROM goals g\n  JOIN matches m ON g.match_id = m.match_id\n  WHERE m.season = (SELECT MAX(season) FROM matches)\n  AND g.is_own_goal = FALSE\n  GROUP BY g.player_id\n)\nSELECT \n  pm.player_id,\n  pm.first_name,\n  pm.last_name,\n  pm.position,\n  pm.nationality,\n  pm.matches_played,\n  COALESCE(pg.goals_scored, 0) AS goals_scored,\n  ROUND(COALESCE(pg.goals_scored, 0) * 1.0 / pm.matches_played, 3) AS goals_per_match\nFROM player_matches pm\nLEFT JOIN player_goals pg ON pm.player_id = pg.player_id\nWHERE pm.matches_played >= 10\nORDER BY goals_per_match DESC, goals_scored DESC\nLIMIT 10;","model_id": "mistral.mixtral-8x7b-instruct-v0:1", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00045, "output_token_cost": 0.0007}
{"text_prompt": "Given the following schema:\nCREATE TABLE products (product_id INT PRIMARY KEY, name VARCHAR(100), category VARCHAR(50), price DECIMAL(10,2));\nCREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(100), email VARCHAR(100), join_date DATE);\nCREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\nCREATE TABLE order_items (item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id));\n\nWrite a SQL query to find the top 5 customers who have spent the most money in the past month, showing their name, email, and total amount spent.",  "expected_output_tokens": 1000,  "task": {"task_type": "TEXT-TO-SQL","task_criteria": "Using the Golden Answer as a guide, generate a correct SQL query that answers the question based on the provided schema without unnecessary complexity or extraneous information"},  "golden_answer": "SELECT c.name, c.email, SUM(o.total_amount) AS total_spent\nFROM customers c\nJOIN orders o ON c.customer_id = o.customer_id\nWHERE o.order_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 MONTH)\nGROUP BY c.customer_id, c.name, c.email\nORDER BY total_spent DESC\nLIMIT 5;","model_id": "openai/gpt-4o-mini", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00045, "output_token_cost": 0.0007}
{"text_prompt": "Given the following schema:\nCREATE TABLE employees (employee_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), hire_date DATE, department_id INT, salary DECIMAL(10,2));\nCREATE TABLE departments (department_id INT PRIMARY KEY, department_name VARCHAR(100), location VARCHAR(100));\nCREATE TABLE projects (project_id INT PRIMARY KEY, project_name VARCHAR(100), start_date DATE, end_date DATE, budget DECIMAL(15,2));\nCREATE TABLE employee_projects (employee_id INT, project_id INT, role VARCHAR(50), hours_worked INT, PRIMARY KEY (employee_id, project_id), FOREIGN KEY (employee_id) REFERENCES employees(employee_id), FOREIGN KEY (project_id) REFERENCES projects(project_id));\n\nWrite a SQL query to find the departments with their average employee salary, but only include departments where the average salary is above the company-wide average salary.",  "expected_output_tokens": 1000,  "task": {"task_type": "TEXT-TO-SQL","task_criteria": "Using the Golden Answer as a guide, generate a correct SQL query that answers the question based on the provided schema without unnecessary complexity or extraneous information"},  "golden_answer": "WITH avg_company_salary AS (\n  SELECT AVG(salary) AS avg_salary\n  FROM employees\n)\nSELECT d.department_name, AVG(e.salary) AS avg_department_salary\nFROM departments d\nJOIN employees e ON d.department_id = e.department_id\nGROUP BY d.department_id, d.department_name\nHAVING AVG(e.salary) > (SELECT avg_salary FROM avg_company_salary)\nORDER BY avg_department_salary DESC;","model_id": "openai/gpt-4o-mini", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00045, "output_token_cost": 0.0007}
{"text_prompt": "Given the following schema:\nCREATE TABLE books (book_id INT PRIMARY KEY, title VARCHAR(200), author_id INT, publisher_id INT, publication_year INT, genre VARCHAR(50), isbn VARCHAR(20), available_copies INT);\nCREATE TABLE authors (author_id INT PRIMARY KEY, name VARCHAR(100), birth_year INT, nationality VARCHAR(50));\nCREATE TABLE publishers (publisher_id INT PRIMARY KEY, name VARCHAR(100), location VARCHAR(100));\nCREATE TABLE members (member_id INT PRIMARY KEY, name VARCHAR(100), email VARCHAR(100), join_date DATE, membership_type VARCHAR(20));\nCREATE TABLE loans (loan_id INT PRIMARY KEY, book_id INT, member_id INT, checkout_date DATE, due_date DATE, return_date DATE, FOREIGN KEY (book_id) REFERENCES books(book_id), FOREIGN KEY (member_id) REFERENCES members(member_id));\n\nWrite a SQL query to find the top 3 most frequently borrowed genres in the past year, along with the count of loans for each genre.",  "expected_output_tokens": 1000,  "task": {"task_type": "TEXT-TO-SQL","task_criteria": "Using the Golden Answer as a guide, generate a correct SQL query that answers the question based on the provided schema without unnecessary complexity or extraneous information"},  "golden_answer": "SELECT b.genre, COUNT(l.loan_id) AS loan_count\nFROM books b\nJOIN loans l ON b.book_id = l.book_id\nWHERE l.checkout_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)\nGROUP BY b.genre\nORDER BY loan_count DESC\nLIMIT 3;","model_id": "openai/gpt-4o-mini", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00045, "output_token_cost": 0.0007}
{"text_prompt": "Given the following schema:\nCREATE TABLE students (student_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), date_of_birth DATE, enrollment_date DATE, major_id INT);\nCREATE TABLE majors (major_id INT PRIMARY KEY, major_name VARCHAR(100), department VARCHAR(100));\nCREATE TABLE courses (course_id INT PRIMARY KEY, course_code VARCHAR(20), course_name VARCHAR(100), credits INT, department VARCHAR(100));\nCREATE TABLE instructors (instructor_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(100), hire_date DATE);\nCREATE TABLE enrollments (enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, instructor_id INT, semester VARCHAR(20), year INT, grade VARCHAR(2), FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (instructor_id) REFERENCES instructors(instructor_id));\n\nWrite a SQL query to find students who have taken all courses offered by their major's department.",  "expected_output_tokens": 1000,  "task": {"task_type": "TEXT-TO-SQL","task_criteria": "Using the Golden Answer as a guide, generate a correct SQL query that answers the question based on the provided schema without unnecessary complexity or extraneous information"},  "golden_answer": "WITH department_course_counts AS (\n  SELECT m.major_id, m.department, COUNT(DISTINCT c.course_id) AS total_courses\n  FROM majors m\n  JOIN courses c ON m.department = c.department\n  GROUP BY m.major_id, m.department\n),\nstudent_course_counts AS (\n  SELECT s.student_id, s.first_name, s.last_name, s.major_id, m.department, COUNT(DISTINCT e.course_id) AS courses_taken\n  FROM students s\n  JOIN majors m ON s.major_id = m.major_id\n  JOIN enrollments e ON s.student_id = e.student_id\n  JOIN courses c ON e.course_id = c.course_id AND m.department = c.department\n  GROUP BY s.student_id, s.first_name, s.last_name, s.major_id, m.department\n)\nSELECT scc.student_id, scc.first_name, scc.last_name\nFROM student_course_counts scc\nJOIN department_course_counts dcc ON scc.major_id = dcc.major_id\nWHERE scc.courses_taken = dcc.total_courses;","model_id": "openai/gpt-4o-mini", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00045, "output_token_cost": 0.0007}
{"text_prompt": "Given the following schema:\nCREATE TABLE patients (patient_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), date_of_birth DATE, gender VARCHAR(10), blood_type VARCHAR(5));\nCREATE TABLE doctors (doctor_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), specialty VARCHAR(100));\nCREATE TABLE visits (visit_id INT PRIMARY KEY, patient_id INT, doctor_id INT, visit_date DATE, diagnosis VARCHAR(200), FOREIGN KEY (patient_id) REFERENCES patients(patient_id), FOREIGN KEY (doctor_id) REFERENCES doctors(doctor_id));\nCREATE TABLE medications (medication_id INT PRIMARY KEY, name VARCHAR(100), manufacturer VARCHAR(100), category VARCHAR(50));\nCREATE TABLE prescriptions (prescription_id INT PRIMARY KEY, visit_id INT, medication_id INT, dosage VARCHAR(50), start_date DATE, end_date DATE, FOREIGN KEY (visit_id) REFERENCES visits(visit_id), FOREIGN KEY (medication_id) REFERENCES medications(medication_id));\n\nWrite a SQL query to find the top 5 most commonly prescribed medications for patients over 65 years old in the last 6 months.",  "expected_output_tokens": 1000,  "task": {"task_type": "TEXT-TO-SQL","task_criteria": "Using the Golden Answer as a guide, generate a correct SQL query that answers the question based on the provided schema without unnecessary complexity or extraneous information"},  "golden_answer": "SELECT m.name AS medication_name, COUNT(p.prescription_id) AS prescription_count\nFROM medications m\nJOIN prescriptions p ON m.medication_id = p.medication_id\nJOIN visits v ON p.visit_id = v.visit_id\nJOIN patients pt ON v.patient_id = pt.patient_id\nWHERE v.visit_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 6 MONTH)\nAND pt.date_of_birth <= DATE_SUB(CURRENT_DATE(), INTERVAL 65 YEAR)\nGROUP BY m.medication_id, m.name\nORDER BY prescription_count DESC\nLIMIT 5;","model_id": "openai/gpt-4o-mini", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00045, "output_token_cost": 0.0007}
{"text_prompt": "Given the following schema:\nCREATE TABLE accounts (account_id INT PRIMARY KEY, customer_id INT, account_type VARCHAR(20), open_date DATE, balance DECIMAL(15,2), status VARCHAR(10));\nCREATE TABLE customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), date_of_birth DATE, city VARCHAR(50), state VARCHAR(2), credit_score INT);\nCREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_date DATETIME, amount DECIMAL(15,2), transaction_type VARCHAR(20), description VARCHAR(200), FOREIGN KEY (account_id) REFERENCES accounts(account_id));\nCREATE TABLE loans (loan_id INT PRIMARY KEY, customer_id INT, loan_type VARCHAR(30), amount DECIMAL(15,2), interest_rate DECIMAL(5,2), start_date DATE, term_months INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\n\nWrite a SQL query to identify customers who might be good candidates for a new credit card offer based on having a high average monthly deposit amount (over $5000) in the last 3 months, good credit scores (above 700), and no existing loans.",  "expected_output_tokens": 1000,  "task": {"task_type": "TEXT-TO-SQL","task_criteria": "Using the Golden Answer as a guide, generate a correct SQL query that answers the question based on the provided schema without unnecessary complexity or extraneous information"},  "golden_answer": "SELECT c.customer_id, c.first_name, c.last_name, c.credit_score, AVG(t.amount) AS avg_monthly_deposit\nFROM customers c\nJOIN accounts a ON c.customer_id = a.customer_id\nJOIN transactions t ON a.account_id = t.account_id\nWHERE t.transaction_type = 'deposit'\nAND t.transaction_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 3 MONTH)\nAND c.credit_score > 700\nAND c.customer_id NOT IN (\n  SELECT DISTINCT customer_id FROM loans\n)\nGROUP BY c.customer_id, c.first_name, c.last_name, c.credit_score\nHAVING AVG(t.amount) > 5000\nORDER BY avg_monthly_deposit DESC;","model_id": "openai/gpt-4o-mini", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00045, "output_token_cost": 0.0007}
{"text_prompt": "Given the following schema:\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), join_date DATE, last_login DATETIME, status VARCHAR(20));\nCREATE TABLE posts (post_id INT PRIMARY KEY, user_id INT, content TEXT, post_date DATETIME, likes INT, shares INT, FOREIGN KEY (user_id) REFERENCES users(user_id));\nCREATE TABLE comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, content TEXT, comment_date DATETIME, likes INT, FOREIGN KEY (post_id) REFERENCES posts(post_id), FOREIGN KEY (user_id) REFERENCES users(user_id));\nCREATE TABLE follows (follower_id INT, followee_id INT, follow_date DATE, PRIMARY KEY (follower_id, followee_id), FOREIGN KEY (follower_id) REFERENCES users(user_id), FOREIGN KEY (followee_id) REFERENCES users(user_id));\n\nWrite a SQL query to find the most engaging users who have created posts that received both high comments and likes (in top 10%) in the past month.",  "expected_output_tokens": 1000,  "task": {"task_type": "TEXT-TO-SQL","task_criteria": "Generate a correct SQL query that answers the question based on the provided schema without unnecessary complexity or extraneous information"}, "golden_answer": "WITH engagement_metrics AS (\n  SELECT p.user_id,\n         COUNT(DISTINCT p.post_id) AS post_count,\n         SUM(p.likes) AS total_likes,\n         COUNT(DISTINCT c.comment_id) AS comment_count\n  FROM posts p\n  LEFT JOIN comments c ON p.post_id = c.post_id\n  WHERE p.post_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 MONTH)\n  GROUP BY p.user_id\n),\npercentiles AS (\n  SELECT\n    PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY total_likes) AS likes_threshold,\n    PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY comment_count) AS comments_threshold\n  FROM engagement_metrics\n)\nSELECT u.user_id, u.username, e.post_count, e.total_likes, e.comment_count\nFROM users u\nJOIN engagement_metrics e ON u.user_id = e.user_id\nCROSS JOIN percentiles p\nWHERE e.total_likes > p.likes_threshold\nAND e.comment_count > p.comments_threshold\nORDER BY (e.total_likes + e.comment_count) DESC;","model_id": "openai/gpt-4o-mini", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00045, "output_token_cost": 0.0007}
{"text_prompt": "Given the following schema:\nCREATE TABLE hotels (hotel_id INT PRIMARY KEY, name VARCHAR(100), city VARCHAR(50), state VARCHAR(2), stars INT, amenities TEXT);\nCREATE TABLE room_types (type_id INT PRIMARY KEY, hotel_id INT, type_name VARCHAR(50), capacity INT, price_per_night DECIMAL(10,2), FOREIGN KEY (hotel_id) REFERENCES hotels(hotel_id));\nCREATE TABLE guests (guest_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), phone VARCHAR(20), loyalty_level VARCHAR(20));\nCREATE TABLE reservations (reservation_id INT PRIMARY KEY, guest_id INT, hotel_id INT, room_type_id INT, check_in_date DATE, check_out_date DATE, total_price DECIMAL(10,2), status VARCHAR(20), FOREIGN KEY (guest_id) REFERENCES guests(guest_id), FOREIGN KEY (hotel_id) REFERENCES hotels(hotel_id), FOREIGN KEY (room_type_id) REFERENCES room_types(type_id));\nCREATE TABLE reviews (review_id INT PRIMARY KEY, reservation_id INT, rating INT, comment TEXT, review_date DATE, FOREIGN KEY (reservation_id) REFERENCES reservations(reservation_id));\n\nWrite a SQL query to find hotels with available rooms of any type during a specific date range (June 15-20, 2023) in 'Miami', ordered by average review rating.",  "expected_output_tokens": 1000,  "task": {"task_type": "TEXT-TO-SQL","task_criteria": "Using the Golden Answer as a guide, generate a correct SQL query that answers the question based on the provided schema without unnecessary complexity or extraneous information"},  "golden_answer": "WITH unavailable_rooms AS (\n  SELECT DISTINCT r.hotel_id, r.room_type_id\n  FROM reservations r\n  WHERE (r.check_in_date <= '2023-06-20' AND r.check_out_date >= '2023-06-15')\n  AND r.status != 'cancelled'\n),\navg_ratings AS (\n  SELECT h.hotel_id, AVG(rv.rating) AS avg_rating\n  FROM hotels h\n  LEFT JOIN reservations r ON h.hotel_id = r.hotel_id\n  LEFT JOIN reviews rv ON r.reservation_id = rv.reservation_id\n  GROUP BY h.hotel_id\n)\nSELECT h.hotel_id, h.name, h.stars, ar.avg_rating,\n       COUNT(DISTINCT rt.type_id) AS available_room_types\nFROM hotels h\nJOIN room_types rt ON h.hotel_id = rt.hotel_id\nLEFT JOIN unavailable_rooms ur ON h.hotel_id = ur.hotel_id AND rt.type_id = ur.room_type_id\nLEFT JOIN avg_ratings ar ON h.hotel_id = ar.hotel_id\nWHERE h.city = 'Miami'\nAND ur.hotel_id IS NULL\nGROUP BY h.hotel_id, h.name, h.stars, ar.avg_rating\nHAVING COUNT(DISTINCT rt.type_id) > 0\nORDER BY ar.avg_rating DESC NULLS LAST;","model_id": "openai/gpt-4o-mini", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00045, "output_token_cost": 0.0007}
{"text_prompt": "Given the following schema:\nCREATE TABLE movies (movie_id INT PRIMARY KEY, title VARCHAR(200), release_year INT, runtime_minutes INT, budget DECIMAL(15,2), box_office DECIMAL(15,2), studio VARCHAR(100));\nCREATE TABLE genres (genre_id INT PRIMARY KEY, genre_name VARCHAR(50));\nCREATE TABLE movie_genres (movie_id INT, genre_id INT, PRIMARY KEY (movie_id, genre_id), FOREIGN KEY (movie_id) REFERENCES movies(movie_id), FOREIGN KEY (genre_id) REFERENCES genres(genre_id));\nCREATE TABLE people (person_id INT PRIMARY KEY, name VARCHAR(100), birthdate DATE, nationality VARCHAR(50));\nCREATE TABLE movie_cast (movie_id INT, person_id INT, character_name VARCHAR(100), role_type VARCHAR(50), PRIMARY KEY (movie_id, person_id, character_name), FOREIGN KEY (movie_id) REFERENCES movies(movie_id), FOREIGN KEY (person_id) REFERENCES people(person_id));\nCREATE TABLE movie_crew (movie_id INT, person_id INT, role VARCHAR(50), PRIMARY KEY (movie_id, person_id, role), FOREIGN KEY (movie_id) REFERENCES movies(movie_id), FOREIGN KEY (person_id) REFERENCES people(person_id));\n\nWrite a SQL query to find the most profitable actors who have starred in at least 3 movies in the last decade (since 2013), showing their total box office revenue, average movie rating, and their most common genre.", "expected_output_tokens": 1000,  "task": {"task_type": "TEXT-TO-SQL","task_criteria": "Using the Golden Answer as a guide, generate a correct SQL query that answers the question based on the provided schema without unnecessary complexity or extraneous information"},  "golden_answer": "WITH actor_movies AS (\n  SELECT p.person_id, p.name, m.movie_id, m.title, m.box_office, m.budget\n  FROM people p\n  JOIN movie_cast mc ON p.person_id = mc.person_id\n  JOIN movies m ON mc.movie_id = m.movie_id\n  WHERE mc.role_type = 'lead'\n  AND m.release_year >= 2013\n),\nactor_metrics AS (\n  SELECT \n    am.person_id, \n    am.name,\n    COUNT(DISTINCT am.movie_id) AS movie_count,\n    SUM(am.box_office) AS total_box_office,\n    SUM(am.box_office - am.budget) AS total_profit\n  FROM actor_movies am\n  GROUP BY am.person_id, am.name\n  HAVING COUNT(DISTINCT am.movie_id) >= 3\n),\nactor_genres AS (\n  SELECT \n    am.person_id,\n    g.genre_name,\n    COUNT(*) AS genre_count,\n    ROW_NUMBER() OVER (PARTITION BY am.person_id ORDER BY COUNT(*) DESC) AS genre_rank\n  FROM actor_movies am\n  JOIN movie_genres mg ON am.movie_id = mg.movie_id\n  JOIN genres g ON mg.genre_id = g.genre_id\n  GROUP BY am.person_id, g.genre_name\n)\nSELECT \n  am.person_id,\n  am.name,\n  am.movie_count,\n  am.total_box_office,\n  am.total_profit,\n  ag.genre_name AS most_common_genre\nFROM actor_metrics am\nLEFT JOIN actor_genres ag ON am.person_id = ag.person_id AND ag.genre_rank = 1\nORDER BY am.total_profit DESC\nLIMIT 10;","model_id": "openai/gpt-4o-mini", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00045, "output_token_cost": 0.0007}
{"text_prompt": "Given the following schema:\nCREATE TABLE teams (team_id INT PRIMARY KEY, team_name VARCHAR(100), city VARCHAR(50), founded_year INT, stadium VARCHAR(100), coach VARCHAR(100));\nCREATE TABLE players (player_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), birth_date DATE, nationality VARCHAR(50), position VARCHAR(30), team_id INT, jersey_number INT, FOREIGN KEY (team_id) REFERENCES teams(team_id));\nCREATE TABLE matches (match_id INT PRIMARY KEY, home_team_id INT, away_team_id INT, match_date DATE, season VARCHAR(20), home_score INT, away_score INT, stadium VARCHAR(100), attendance INT, FOREIGN KEY (home_team_id) REFERENCES teams(team_id), FOREIGN KEY (away_team_id) REFERENCES teams(team_id));\nCREATE TABLE goals (goal_id INT PRIMARY KEY, match_id INT, player_id INT, team_id INT, minute INT, is_penalty BOOLEAN, is_own_goal BOOLEAN, FOREIGN KEY (match_id) REFERENCES matches(match_id), FOREIGN KEY (player_id) REFERENCES players(player_id), FOREIGN KEY (team_id) REFERENCES teams(team_id));\nCREATE TABLE injuries (injury_id INT PRIMARY KEY, player_id INT, start_date DATE, end_date DATE, injury_type VARCHAR(100), FOREIGN KEY (player_id) REFERENCES players(player_id));\n\nWrite a SQL query to identify the players with the best scoring efficiency (goals per match played) in the current season, who have played at least 10 matches, including information about their position and nationality.",  "expected_output_tokens": 1000,  "task": {"task_type": "TEXT-TO-SQL","task_criteria": "Using the Golden Answer as a guide, generate a correct SQL query that answers the question based on the provided schema without unnecessary complexity or extraneous information"},  "golden_answer": "WITH player_matches AS (\n  SELECT p.player_id, p.first_name, p.last_name, p.position, p.nationality,         COUNT(DISTINCT m.match_id) AS matches_played\n  FROM players p\n  JOIN teams t ON p.team_id = t.team_id\n  JOIN matches m ON (t.team_id = m.home_team_id OR t.team_id = m.away_team_id)\n  WHERE m.season = (SELECT MAX(season) FROM matches)\n  GROUP BY p.player_id, p.first_name, p.last_name, p.position, p.nationality\n),\nplayer_goals AS (\n  SELECT g.player_id, COUNT(*) AS goals_scored\n  FROM goals g\n  JOIN matches m ON g.match_id = m.match_id\n  WHERE m.season = (SELECT MAX(season) FROM matches)\n  AND g.is_own_goal = FALSE\n  GROUP BY g.player_id\n)\nSELECT \n  pm.player_id,\n  pm.first_name,\n  pm.last_name,\n  pm.position,\n  pm.nationality,\n  pm.matches_played,\n  COALESCE(pg.goals_scored, 0) AS goals_scored,\n  ROUND(COALESCE(pg.goals_scored, 0) * 1.0 / pm.matches_played, 3) AS goals_per_match\nFROM player_matches pm\nLEFT JOIN player_goals pg ON pm.player_id = pg.player_id\nWHERE pm.matches_played >= 10\nORDER BY goals_per_match DESC, goals_scored DESC\nLIMIT 10;","model_id": "openai/gpt-4o-mini", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00045, "output_token_cost": 0.0007}
{"text_prompt": "Summarize the following text: 'Uruguay is a country in South America that borders Argentina and Brazil. With a population of around 3.5 million people, it is known for its stable democracy, progressive social policies, and high quality of life. Uruguay has been consistently ranked as one of the least corrupt countries in Latin America and boasts high rates of literacy and healthcare access.'", "expected_output_tokens": 500, "task": {"task_type": "Summarization", "task_criteria": "Summarize the text provided ensuring that the main message is not diluted nor changed"}, "golden_answer": "Uruguay is a small South American nation bordering Argentina and Brazil with approximately 3.5 million inhabitants. It stands out in Latin America for its stable democratic system, progressive social policies, low corruption levels, and high standards in literacy and healthcare.", "model_id": "openai/gpt-4o-mini", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00045, "output_token_cost": 0.0007}
{"text_prompt": "Summarize the following text: 'Uruguay's economy is largely driven by its agricultural sector, especially beef and wool exports. The country is one of the largest exporters of beef per capita in the world. Additionally, Uruguay has become a technology hub in recent years, with a growing software development industry and nearly universal internet access. The country has also made significant investments in renewable energy, with almost 98% of its electricity now coming from renewable sources, primarily wind and hydroelectric power.'", "expected_output_tokens": 500, "task": {"task_type": "Summarization", "task_criteria": "Summarize the text provided ensuring that the main message is not diluted nor changed"}, "golden_answer": "Uruguay's economy depends heavily on agricultural exports, particularly beef and wool, making it one of the world's largest beef exporters per capita. The country has also developed as a technology center with a growing software industry and widespread internet access. Uruguay has made remarkable progress in renewable energy, with nearly 98% of its electricity generated from sustainable sources like wind and hydroelectric power.", "model_id": "openai/gpt-4o-mini", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00045, "output_token_cost": 0.0007}
{"text_prompt": "Summarize the following text: 'Montevideo, the capital and largest city of Uruguay, is home to nearly half of the country's population. Founded by the Spanish in 1724, the city features a mix of colonial architecture and modern buildings. Its historic Ciudad Vieja (Old Town) contains many preserved buildings from the colonial era. Montevideo is consistently ranked as having the highest quality of life and lowest level of corruption of any city in Latin America. The city's Rambla, a continuous roadway along the coastline, stretches for over 22 kilometers and is a popular gathering place for locals.'", "expected_output_tokens": 500, "task": {"task_type": "Summarization", "task_criteria": "Summarize the text provided ensuring that the main message is not diluted nor changed"}, "golden_answer": "Montevideo, Uruguay's capital and largest city, houses nearly half the country's population and was established by Spanish colonizers in 1724. The city combines colonial and modern architecture, particularly in Ciudad Vieja. It ranks highest in Latin America for quality of life and lowest for corruption. A defining feature is the 22-kilometer Rambla, a coastal roadway popular among residents.", "model_id": "openai/gpt-4o-mini", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00045, "output_token_cost": 0.0007}
{"text_prompt": "Summarize the following text: 'Uruguay was the first country in the world to fully legalize marijuana, with a law passed in 2013 that allows citizens to grow, sell, and consume cannabis. This progressive approach to drug policy is part of a broader trend of liberal social policies in the country. Uruguay was also among the first nations in Latin America to establish a welfare state, secularize the government, grant divorce rights to women, and most recently, legalize same-sex marriage. Despite its small size, Uruguay has often been at the forefront of progressive social reform in the region.'", "expected_output_tokens": 500, "task": {"task_type": "Summarization", "task_criteria": "Summarize the text provided ensuring that the main message is not diluted nor changed"}, "golden_answer": "Uruguay became the world's first country to completely legalize marijuana in 2013, allowing its citizens to grow, sell, and use cannabis. This policy exemplifies the nation's progressive approach, which includes pioneering a welfare state, government secularization, women's divorce rights, and same-sex marriage in Latin America. Despite its small size, Uruguay consistently leads the region in progressive social reforms.", "model_id": "openai/gpt-4o-mini", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00045, "output_token_cost": 0.0007}
{"text_prompt": "Summarize the following text: 'Uruguay has a rich cultural heritage that blends European influences with indigenous traditions. The tango, often associated exclusively with Argentina, also has deep roots in Uruguay, with both countries claiming to be its birthplace. Candombe, an Afro-Uruguayan rhythmic dance and music style, was recognized by UNESCO as a cultural heritage of humanity. The country is also known for its unique tradition of mate drinking, a caffeinated beverage shared among friends and family using a special gourd and metal straw called a bombilla. Literature is another important aspect of Uruguayan culture, with writers like Mario Benedetti and Eduardo Galeano achieving international acclaim.'", "expected_output_tokens": 500, "task": {"task_type": "Summarization", "task_criteria": "Summarize the text provided ensuring that the main message is not diluted nor changed"}, "golden_answer": "Uruguay's cultural heritage combines European and indigenous influences. The country shares claim to the tango's origins with Argentina, while its Afro-Uruguayan Candombe has received UNESCO recognition as cultural heritage. Mate drinking, using a specialized gourd and metal straw (bombilla), represents a distinctive social tradition. Uruguay has also produced internationally acclaimed literary figures such as Mario Benedetti and Eduardo Galeano.", "model_id": "openai/gpt-4o-mini", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00045, "output_token_cost": 0.0007}
{"text_prompt": "Summarize the following text: 'Football (soccer) is by far the most popular sport in Uruguay, with the national team having won the FIFA World Cup twice, in 1930 and 1950. The first World Cup tournament was hosted by Uruguay in 1930, which they won by defeating Argentina in the final. Their second victory in 1950, defeating Brazil in the Maracana Stadium in Rio de Janeiro, is known as the 'Maracanazo' and remains one of the most famous upsets in sports history. Uruguay has also won the Copa América a record 15 times. The passion for football runs deep in Uruguayan culture, with fierce rivalries between the country's two most successful clubs, Peñarol and Nacional.'", "expected_output_tokens": 500, "task": {"task_type": "Summarization", "task_criteria": "Summarize the text provided ensuring that the main message is not diluted nor changed"}, "golden_answer": "Football dominates Uruguayan sports culture, with the national team claiming two World Cup victories: hosting and winning the inaugural 1930 tournament against Argentina, and achieving the famous 'Maracanazo' upset over Brazil in 1950. With a record 15 Copa América titles, football passion in Uruguay is further exemplified by the intense rivalry between the country's leading clubs, Peñarol and Nacional.", "model_id": "openai/gpt-4o-mini", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00045, "output_token_cost": 0.0007}
{"text_prompt": "Summarize the following text: 'Uruguay's beaches are a major tourist attraction, particularly in Punta del Este, known as the 'Monaco of South America' for its luxury resorts and vibrant nightlife. During summer months (December to February), the population of Punta del Este swells from about 10,000 permanent residents to over 100,000 as tourists flock to its beaches. The hand sculpture at Playa Brava, known as 'La Mano' or 'The Hand,' has become an iconic symbol of the city. Further east, José Ignacio has developed from a quiet fishing village into an exclusive, bohemian-chic vacation spot favored by celebrities and the international jet-set.'", "expected_output_tokens": 500, "task": {"task_type": "Summarization", "task_criteria": "Summarize the text provided ensuring that the main message is not diluted nor changed"}, "golden_answer": "Uruguay's beaches are significant tourist destinations, with Punta del Este—nicknamed the 'Monaco of South America'—featuring luxury resorts and active nightlife. The city's population increases tenfold during the summer season, from 10,000 to over 100,000. Its famous 'La Mano' sculpture at Playa Brava has become an iconic landmark. Meanwhile, José Ignacio has transformed from a simple fishing village into an exclusive vacation destination preferred by celebrities and wealthy international travelers.", "model_id": "openai/gpt-4o-mini", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00045, "output_token_cost": 0.0007}
{"text_prompt": "Summarize the following text: 'Uruguay experienced a brutal military dictatorship from 1973 to 1985, during which political opponents were imprisoned, tortured, and sometimes killed or 'disappeared.' This period was part of Operation Condor, a campaign of political repression involving intelligence operations and assassination of opponents, backed by the United States and implemented by right-wing dictatorships in South America. After the return to democracy, Uruguay took steps to address this dark period, eventually repealing an amnesty law that had protected military officers from prosecution. In 2009, former military ruler Gregorio Álvarez was sentenced to 25 years in prison for human rights violations, highlighting the country's commitment to confronting its past.'", "expected_output_tokens": 500, "task": {"task_type": "Summarization", "task_criteria": "Summarize the text provided ensuring that the main message is not diluted nor changed"}, "golden_answer": "From 1973 to 1985, Uruguay endured a harsh military dictatorship that imprisoned, tortured, and killed political opponents as part of the US-backed Operation Condor across South American right-wing regimes. Following democratization, Uruguay worked to address this dark history by eventually revoking an amnesty law that had shielded military personnel from prosecution. The 2009 conviction of former military ruler Gregorio Álvarez to 25 years imprisonment for human rights abuses demonstrated the nation's determination to confront its historical wrongs.", "model_id": "openai/gpt-4o-mini", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00045, "output_token_cost": 0.0007}
{"text_prompt": "Summarize the following text: 'Uruguay has made significant environmental strides in recent decades. The country produces nearly 98% of its electricity from renewable sources, primarily wind and hydroelectric power. This transition to clean energy has been accomplished in less than ten years and without government subsidies, making it a remarkable success story in renewable energy adoption. Uruguay has also implemented progressive waste management policies, including an innovative container deposit system for plastic bottles and strong recycling programs. The country's commitment to environmental protection extends to its agricultural practices, with increasing emphasis on organic and sustainable farming methods. These efforts have earned Uruguay recognition as one of the greenest countries in Latin America.'", "expected_output_tokens": 500, "task": {"task_type": "Summarization", "task_criteria": "Summarize the text provided ensuring that the main message is not diluted nor changed"}, "golden_answer": "Uruguay has achieved impressive environmental progress, particularly by generating almost 98% of its electricity from renewable sources like wind and hydroelectric power—a transformation accomplished within a decade without government subsidies. The country has also implemented advanced waste management systems, including a container deposit program for plastic bottles and comprehensive recycling initiatives. Uruguay's environmental commitment extends to promoting organic and sustainable agricultural practices, establishing it as one of Latin America's environmental leaders.", "model_id": "openai/gpt-4o-mini", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00045, "output_token_cost": 0.0007}
{"text_prompt": "Summarize the following text: 'According to Focus-Economics Uruguay has the highest GDP per capita in Latin America, at approximately $23,088 per person. The country's economic stability is built on a strong institutional framework, respect for democratic processes, and a comprehensive social welfare system. Uruguay weathered the 2008 global financial crisis better than many of its neighbors due to prudent fiscal policies and a diversified economy. Income inequality in Uruguay, as measured by the Gini coefficient, is the lowest in Latin America, though still higher than in most developed countries. The country has a large middle class, comprising about 60% of the population, which has been a stabilizing factor in its social and political development.'", "expected_output_tokens": 500, "task": {"task_type": "Summarization", "task_criteria": "Summarize the text provided ensuring that the main message is not diluted nor changed"}, "golden_answer": "Uruguay boasts South America's highest GDP per capita at approximately $17,000, supported by strong institutions, democratic stability, and comprehensive social welfare. The country successfully navigated the 2008 global financial crisis through sound fiscal management and economic diversification. Uruguay has Latin America's lowest income inequality, though it remains higher than most developed nations. Its substantial middle class, comprising about 60% of the population, contributes significantly to the country's social and political stability.", "model_id": "openai/gpt-4o-mini", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00045, "output_token_cost": 0.0007}
{"text_prompt": "Summarize the following text: 'Uruguay is a country in South America that borders Argentina and Brazil. With a population of around 3.5 million people, it is known for its stable democracy, progressive social policies, and high quality of life. Uruguay has been consistently ranked as one of the least corrupt countries in Latin America and boasts high rates of literacy and healthcare access.'", "expected_output_tokens": 500, "task": {"task_type": "Summarization", "task_criteria": "Summarize the text provided ensuring that the main message is not diluted nor changed"}, "golden_answer": "Uruguay is a small South American nation bordering Argentina and Brazil with approximately 3.5 million inhabitants. It stands out in Latin America for its stable democratic system, progressive social policies, low corruption levels, and high standards in literacy and healthcare.", "model_id": "mistral.mixtral-8x7b-instruct-v0:1", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00045, "output_token_cost": 0.0007}
{"text_prompt": "Summarize the following text: 'Uruguay's economy is largely driven by its agricultural sector, especially beef and wool exports. The country is one of the largest exporters of beef per capita in the world. Additionally, Uruguay has become a technology hub in recent years, with a growing software development industry and nearly universal internet access. The country has also made significant investments in renewable energy, with almost 98% of its electricity now coming from renewable sources, primarily wind and hydroelectric power.'", "expected_output_tokens": 500, "task": {"task_type": "Summarization", "task_criteria": "Summarize the text provided ensuring that the main message is not diluted nor changed"}, "golden_answer": "Uruguay's economy depends heavily on agricultural exports, particularly beef and wool, making it one of the world's largest beef exporters per capita. The country has also developed as a technology center with a growing software industry and widespread internet access. Uruguay has made remarkable progress in renewable energy, with nearly 98% of its electricity generated from sustainable sources like wind and hydroelectric power.", "model_id": "mistral.mixtral-8x7b-instruct-v0:1", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00045, "output_token_cost": 0.0007}
{"text_prompt": "Summarize the following text: 'Montevideo, the capital and largest city of Uruguay, is home to nearly half of the country's population. Founded by the Spanish in 1724, the city features a mix of colonial architecture and modern buildings. Its historic Ciudad Vieja (Old Town) contains many preserved buildings from the colonial era. Montevideo is consistently ranked as having the highest quality of life and lowest level of corruption of any city in Latin America. The city's Rambla, a continuous roadway along the coastline, stretches for over 22 kilometers and is a popular gathering place for locals.'", "expected_output_tokens": 500, "task": {"task_type": "Summarization", "task_criteria": "Summarize the text provided ensuring that the main message is not diluted nor changed"}, "golden_answer": "Montevideo, Uruguay's capital and largest city, houses nearly half the country's population and was established by Spanish colonizers in 1724. The city combines colonial and modern architecture, particularly in Ciudad Vieja. It ranks highest in Latin America for quality of life and lowest for corruption. A defining feature is the 22-kilometer Rambla, a coastal roadway popular among residents.", "model_id": "mistral.mixtral-8x7b-instruct-v0:1", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00045, "output_token_cost": 0.0007}
{"text_prompt": "Summarize the following text: 'Uruguay was the first country in the world to fully legalize marijuana, with a law passed in 2013 that allows citizens to grow, sell, and consume cannabis. This progressive approach to drug policy is part of a broader trend of liberal social policies in the country. Uruguay was also among the first nations in Latin America to establish a welfare state, secularize the government, grant divorce rights to women, and most recently, legalize same-sex marriage. Despite its small size, Uruguay has often been at the forefront of progressive social reform in the region.'", "expected_output_tokens": 500, "task": {"task_type": "Summarization", "task_criteria": "Summarize the text provided ensuring that the main message is not diluted nor changed"}, "golden_answer": "Uruguay became the world's first country to completely legalize marijuana in 2013, allowing its citizens to grow, sell, and use cannabis. This policy exemplifies the nation's progressive approach, which includes pioneering a welfare state, government secularization, women's divorce rights, and same-sex marriage in Latin America. Despite its small size, Uruguay consistently leads the region in progressive social reforms.", "model_id": "mistral.mixtral-8x7b-instruct-v0:1", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00045, "output_token_cost": 0.0007}
{"text_prompt": "Summarize the following text: 'Uruguay has a rich cultural heritage that blends European influences with indigenous traditions. The tango, often associated exclusively with Argentina, also has deep roots in Uruguay, with both countries claiming to be its birthplace. Candombe, an Afro-Uruguayan rhythmic dance and music style, was recognized by UNESCO as a cultural heritage of humanity. The country is also known for its unique tradition of mate drinking, a caffeinated beverage shared among friends and family using a special gourd and metal straw called a bombilla. Literature is another important aspect of Uruguayan culture, with writers like Mario Benedetti and Eduardo Galeano achieving international acclaim.'", "expected_output_tokens": 500, "task": {"task_type": "Summarization", "task_criteria": "Summarize the text provided ensuring that the main message is not diluted nor changed"}, "golden_answer": "Uruguay's cultural heritage combines European and indigenous influences. The country shares claim to the tango's origins with Argentina, while its Afro-Uruguayan Candombe has received UNESCO recognition as cultural heritage. Mate drinking, using a specialized gourd and metal straw (bombilla), represents a distinctive social tradition. Uruguay has also produced internationally acclaimed literary figures such as Mario Benedetti and Eduardo Galeano.", "model_id": "mistral.mixtral-8x7b-instruct-v0:1", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00045, "output_token_cost": 0.0007}
{"text_prompt": "Summarize the following text: 'Football (soccer) is by far the most popular sport in Uruguay, with the national team having won the FIFA World Cup twice, in 1930 and 1950. The first World Cup tournament was hosted by Uruguay in 1930, which they won by defeating Argentina in the final. Their second victory in 1950, defeating Brazil in the Maracana Stadium in Rio de Janeiro, is known as the 'Maracanazo' and remains one of the most famous upsets in sports history. Uruguay has also won the Copa América a record 15 times. The passion for football runs deep in Uruguayan culture, with fierce rivalries between the country's two most successful clubs, Peñarol and Nacional.'", "expected_output_tokens": 500, "task": {"task_type": "Summarization", "task_criteria": "Summarize the text provided ensuring that the main message is not diluted nor changed"}, "golden_answer": "Football dominates Uruguayan sports culture, with the national team claiming two World Cup victories: hosting and winning the inaugural 1930 tournament against Argentina, and achieving the famous 'Maracanazo' upset over Brazil in 1950. With a record 15 Copa América titles, football passion in Uruguay is further exemplified by the intense rivalry between the country's leading clubs, Peñarol and Nacional.", "model_id": "mistral.mixtral-8x7b-instruct-v0:1", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00045, "output_token_cost": 0.0007}
{"text_prompt": "Summarize the following text: 'Uruguay's beaches are a major tourist attraction, particularly in Punta del Este, known as the 'Monaco of South America' for its luxury resorts and vibrant nightlife. During summer months (December to February), the population of Punta del Este swells from about 10,000 permanent residents to over 100,000 as tourists flock to its beaches. The hand sculpture at Playa Brava, known as 'La Mano' or 'The Hand,' has become an iconic symbol of the city. Further east, José Ignacio has developed from a quiet fishing village into an exclusive, bohemian-chic vacation spot favored by celebrities and the international jet-set.'", "expected_output_tokens": 500, "task": {"task_type": "Summarization", "task_criteria": "Summarize the text provided ensuring that the main message is not diluted nor changed"}, "golden_answer": "Uruguay's beaches are significant tourist destinations, with Punta del Este—nicknamed the 'Monaco of South America'—featuring luxury resorts and active nightlife. The city's population increases tenfold during the summer season, from 10,000 to over 100,000. Its famous 'La Mano' sculpture at Playa Brava has become an iconic landmark. Meanwhile, José Ignacio has transformed from a simple fishing village into an exclusive vacation destination preferred by celebrities and wealthy international travelers.", "model_id": "mistral.mixtral-8x7b-instruct-v0:1", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00045, "output_token_cost": 0.0007}
{"text_prompt": "Summarize the following text: 'Uruguay experienced a brutal military dictatorship from 1973 to 1985, during which political opponents were imprisoned, tortured, and sometimes killed or 'disappeared.' This period was part of Operation Condor, a campaign of political repression involving intelligence operations and assassination of opponents, backed by the United States and implemented by right-wing dictatorships in South America. After the return to democracy, Uruguay took steps to address this dark period, eventually repealing an amnesty law that had protected military officers from prosecution. In 2009, former military ruler Gregorio Álvarez was sentenced to 25 years in prison for human rights violations, highlighting the country's commitment to confronting its past.'", "expected_output_tokens": 500, "task": {"task_type": "Summarization", "task_criteria": "Summarize the text provided ensuring that the main message is not diluted nor changed"}, "golden_answer": "From 1973 to 1985, Uruguay endured a harsh military dictatorship that imprisoned, tortured, and killed political opponents as part of the US-backed Operation Condor across South American right-wing regimes. Following democratization, Uruguay worked to address this dark history by eventually revoking an amnesty law that had shielded military personnel from prosecution. The 2009 conviction of former military ruler Gregorio Álvarez to 25 years imprisonment for human rights abuses demonstrated the nation's determination to confront its historical wrongs.", "model_id": "mistral.mixtral-8x7b-instruct-v0:1", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00045, "output_token_cost": 0.0007}
{"text_prompt": "Summarize the following text: 'Uruguay has made significant environmental strides in recent decades. The country produces nearly 98% of its electricity from renewable sources, primarily wind and hydroelectric power. This transition to clean energy has been accomplished in less than ten years and without government subsidies, making it a remarkable success story in renewable energy adoption. Uruguay has also implemented progressive waste management policies, including an innovative container deposit system for plastic bottles and strong recycling programs. The country's commitment to environmental protection extends to its agricultural practices, with increasing emphasis on organic and sustainable farming methods. These efforts have earned Uruguay recognition as one of the greenest countries in Latin America.'", "expected_output_tokens": 500, "task": {"task_type": "Summarization", "task_criteria": "Summarize the text provided ensuring that the main message is not diluted nor changed"}, "golden_answer": "Uruguay has achieved impressive environmental progress, particularly by generating almost 98% of its electricity from renewable sources like wind and hydroelectric power—a transformation accomplished within a decade without government subsidies. The country has also implemented advanced waste management systems, including a container deposit program for plastic bottles and comprehensive recycling initiatives. Uruguay's environmental commitment extends to promoting organic and sustainable agricultural practices, establishing it as one of Latin America's environmental leaders.", "model_id": "mistral.mixtral-8x7b-instruct-v0:1", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00045, "output_token_cost": 0.0007}
{"text_prompt": "Summarize the following text: 'According to Focus-Economics Uruguay has the highest GDP per capita in Latin America, at approximately $23,088 per person. The country's economic stability is built on a strong institutional framework, respect for democratic processes, and a comprehensive social welfare system. Uruguay weathered the 2008 global financial crisis better than many of its neighbors due to prudent fiscal policies and a diversified economy. Income inequality in Uruguay, as measured by the Gini coefficient, is the lowest in Latin America, though still higher than in most developed countries. The country has a large middle class, comprising about 60% of the population, which has been a stabilizing factor in its social and political development.'", "expected_output_tokens": 500, "task": {"task_type": "Summarization", "task_criteria": "Summarize the text provided ensuring that the main message is not diluted nor changed"}, "golden_answer": "Uruguay boasts South America's highest GDP per capita at approximately $17,000, supported by strong institutions, democratic stability, and comprehensive social welfare. The country successfully navigated the 2008 global financial crisis through sound fiscal management and economic diversification. Uruguay has Latin America's lowest income inequality, though it remains higher than most developed nations. Its substantial middle class, comprising about 60% of the population, contributes significantly to the country's social and political stability.", "model_id": "mistral.mixtral-8x7b-instruct-v0:1", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00045, "output_token_cost": 0.0007}
{"text_prompt": "Summarize the following text: 'Uruguay is a country in South America that borders Argentina and Brazil. With a population of around 3.5 million people, it is known for its stable democracy, progressive social policies, and high quality of life. Uruguay has been consistently ranked as one of the least corrupt countries in Latin America and boasts high rates of literacy and healthcare access.'", "expected_output_tokens": 500, "task": {"task_type": "Summarization", "task_criteria": "Summarize the text provided ensuring that the main message is not diluted nor changed"}, "golden_answer": "Uruguay is a small South American nation bordering Argentina and Brazil with approximately 3.5 million inhabitants. It stands out in Latin America for its stable democratic system, progressive social policies, low corruption levels, and high standards in literacy and healthcare.", "model_id": "anthropic.claude-3-5-sonnet-20241022-v2:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.003, "output_token_cost": 0.015}
{"text_prompt": "Summarize the following text: 'Uruguay's economy is largely driven by its agricultural sector, especially beef and wool exports. The country is one of the largest exporters of beef per capita in the world. Additionally, Uruguay has become a technology hub in recent years, with a growing software development industry and nearly universal internet access. The country has also made significant investments in renewable energy, with almost 98% of its electricity now coming from renewable sources, primarily wind and hydroelectric power.'", "expected_output_tokens": 500, "task": {"task_type": "Summarization", "task_criteria": "Summarize the text provided ensuring that the main message is not diluted nor changed"}, "golden_answer": "Uruguay's economy depends heavily on agricultural exports, particularly beef and wool, making it one of the world's largest beef exporters per capita. The country has also developed as a technology center with a growing software industry and widespread internet access. Uruguay has made remarkable progress in renewable energy, with nearly 98% of its electricity generated from sustainable sources like wind and hydroelectric power.", "model_id": "anthropic.claude-3-5-sonnet-20241022-v2:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.003, "output_token_cost": 0.015}
{"text_prompt": "Summarize the following text: 'Montevideo, the capital and largest city of Uruguay, is home to nearly half of the country's population. Founded by the Spanish in 1724, the city features a mix of colonial architecture and modern buildings. Its historic Ciudad Vieja (Old Town) contains many preserved buildings from the colonial era. Montevideo is consistently ranked as having the highest quality of life and lowest level of corruption of any city in Latin America. The city's Rambla, a continuous roadway along the coastline, stretches for over 22 kilometers and is a popular gathering place for locals.'", "expected_output_tokens": 500, "task": {"task_type": "Summarization", "task_criteria": "Summarize the text provided ensuring that the main message is not diluted nor changed"}, "golden_answer": "Montevideo, Uruguay's capital and largest city, houses nearly half the country's population and was established by Spanish colonizers in 1724. The city combines colonial and modern architecture, particularly in Ciudad Vieja. It ranks highest in Latin America for quality of life and lowest for corruption. A defining feature is the 22-kilometer Rambla, a coastal roadway popular among residents.", "model_id": "anthropic.claude-3-5-sonnet-20241022-v2:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.003, "output_token_cost": 0.015}
{"text_prompt": "Summarize the following text: 'Uruguay was the first country in the world to fully legalize marijuana, with a law passed in 2013 that allows citizens to grow, sell, and consume cannabis. This progressive approach to drug policy is part of a broader trend of liberal social policies in the country. Uruguay was also among the first nations in Latin America to establish a welfare state, secularize the government, grant divorce rights to women, and most recently, legalize same-sex marriage. Despite its small size, Uruguay has often been at the forefront of progressive social reform in the region.'", "expected_output_tokens": 500, "task": {"task_type": "Summarization", "task_criteria": "Summarize the text provided ensuring that the main message is not diluted nor changed"}, "golden_answer": "Uruguay became the world's first country to completely legalize marijuana in 2013, allowing its citizens to grow, sell, and use cannabis. This policy exemplifies the nation's progressive approach, which includes pioneering a welfare state, government secularization, women's divorce rights, and same-sex marriage in Latin America. Despite its small size, Uruguay consistently leads the region in progressive social reforms.", "model_id": "anthropic.claude-3-5-sonnet-20241022-v2:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.003, "output_token_cost": 0.015}
{"text_prompt": "Summarize the following text: 'Uruguay has a rich cultural heritage that blends European influences with indigenous traditions. The tango, often associated exclusively with Argentina, also has deep roots in Uruguay, with both countries claiming to be its birthplace. Candombe, an Afro-Uruguayan rhythmic dance and music style, was recognized by UNESCO as a cultural heritage of humanity. The country is also known for its unique tradition of mate drinking, a caffeinated beverage shared among friends and family using a special gourd and metal straw called a bombilla. Literature is another important aspect of Uruguayan culture, with writers like Mario Benedetti and Eduardo Galeano achieving international acclaim.'", "expected_output_tokens": 500, "task": {"task_type": "Summarization", "task_criteria": "Summarize the text provided ensuring that the main message is not diluted nor changed"}, "golden_answer": "Uruguay's cultural heritage combines European and indigenous influences. The country shares claim to the tango's origins with Argentina, while its Afro-Uruguayan Candombe has received UNESCO recognition as cultural heritage. Mate drinking, using a specialized gourd and metal straw (bombilla), represents a distinctive social tradition. Uruguay has also produced internationally acclaimed literary figures such as Mario Benedetti and Eduardo Galeano.", "model_id": "anthropic.claude-3-5-sonnet-20241022-v2:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.003, "output_token_cost": 0.015}
{"text_prompt": "Summarize the following text: 'Football (soccer) is by far the most popular sport in Uruguay, with the national team having won the FIFA World Cup twice, in 1930 and 1950. The first World Cup tournament was hosted by Uruguay in 1930, which they won by defeating Argentina in the final. Their second victory in 1950, defeating Brazil in the Maracana Stadium in Rio de Janeiro, is known as the 'Maracanazo' and remains one of the most famous upsets in sports history. Uruguay has also won the Copa América a record 15 times. The passion for football runs deep in Uruguayan culture, with fierce rivalries between the country's two most successful clubs, Peñarol and Nacional.'", "expected_output_tokens": 500, "task": {"task_type": "Summarization", "task_criteria": "Summarize the text provided ensuring that the main message is not diluted nor changed"}, "golden_answer": "Football dominates Uruguayan sports culture, with the national team claiming two World Cup victories: hosting and winning the inaugural 1930 tournament against Argentina, and achieving the famous 'Maracanazo' upset over Brazil in 1950. With a record 15 Copa América titles, football passion in Uruguay is further exemplified by the intense rivalry between the country's leading clubs, Peñarol and Nacional.", "model_id": "anthropic.claude-3-5-sonnet-20241022-v2:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.003, "output_token_cost": 0.015}
{"text_prompt": "Summarize the following text: 'Uruguay's beaches are a major tourist attraction, particularly in Punta del Este, known as the 'Monaco of South America' for its luxury resorts and vibrant nightlife. During summer months (December to February), the population of Punta del Este swells from about 10,000 permanent residents to over 100,000 as tourists flock to its beaches. The hand sculpture at Playa Brava, known as 'La Mano' or 'The Hand,' has become an iconic symbol of the city. Further east, José Ignacio has developed from a quiet fishing village into an exclusive, bohemian-chic vacation spot favored by celebrities and the international jet-set.'", "expected_output_tokens": 500, "task": {"task_type": "Summarization", "task_criteria": "Summarize the text provided ensuring that the main message is not diluted nor changed"}, "golden_answer": "Uruguay's beaches are significant tourist destinations, with Punta del Este—nicknamed the 'Monaco of South America'—featuring luxury resorts and active nightlife. The city's population increases tenfold during the summer season, from 10,000 to over 100,000. Its famous 'La Mano' sculpture at Playa Brava has become an iconic landmark. Meanwhile, José Ignacio has transformed from a simple fishing village into an exclusive vacation destination preferred by celebrities and wealthy international travelers.", "model_id": "anthropic.claude-3-5-sonnet-20241022-v2:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.003, "output_token_cost": 0.015}
{"text_prompt": "Summarize the following text: 'Uruguay experienced a brutal military dictatorship from 1973 to 1985, during which political opponents were imprisoned, tortured, and sometimes killed or 'disappeared.' This period was part of Operation Condor, a campaign of political repression involving intelligence operations and assassination of opponents, backed by the United States and implemented by right-wing dictatorships in South America. After the return to democracy, Uruguay took steps to address this dark period, eventually repealing an amnesty law that had protected military officers from prosecution. In 2009, former military ruler Gregorio Álvarez was sentenced to 25 years in prison for human rights violations, highlighting the country's commitment to confronting its past.'", "expected_output_tokens": 500, "task": {"task_type": "Summarization", "task_criteria": "Summarize the text provided ensuring that the main message is not diluted nor changed"}, "golden_answer": "From 1973 to 1985, Uruguay endured a harsh military dictatorship that imprisoned, tortured, and killed political opponents as part of the US-backed Operation Condor across South American right-wing regimes. Following democratization, Uruguay worked to address this dark history by eventually revoking an amnesty law that had shielded military personnel from prosecution. The 2009 conviction of former military ruler Gregorio Álvarez to 25 years imprisonment for human rights abuses demonstrated the nation's determination to confront its historical wrongs.", "model_id": "anthropic.claude-3-5-sonnet-20241022-v2:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.003, "output_token_cost": 0.015}
{"text_prompt": "Summarize the following text: 'Uruguay has made significant environmental strides in recent decades. The country produces nearly 98% of its electricity from renewable sources, primarily wind and hydroelectric power. This transition to clean energy has been accomplished in less than ten years and without government subsidies, making it a remarkable success story in renewable energy adoption. Uruguay has also implemented progressive waste management policies, including an innovative container deposit system for plastic bottles and strong recycling programs. The country's commitment to environmental protection extends to its agricultural practices, with increasing emphasis on organic and sustainable farming methods. These efforts have earned Uruguay recognition as one of the greenest countries in Latin America.'", "expected_output_tokens": 500, "task": {"task_type": "Summarization", "task_criteria": "Summarize the text provided ensuring that the main message is not diluted nor changed"}, "golden_answer": "Uruguay has achieved impressive environmental progress, particularly by generating almost 98% of its electricity from renewable sources like wind and hydroelectric power—a transformation accomplished within a decade without government subsidies. The country has also implemented advanced waste management systems, including a container deposit program for plastic bottles and comprehensive recycling initiatives. Uruguay's environmental commitment extends to promoting organic and sustainable agricultural practices, establishing it as one of Latin America's environmental leaders.", "model_id": "anthropic.claude-3-5-sonnet-20241022-v2:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.003, "output_token_cost": 0.015}
{"text_prompt": "Summarize the following text: 'According to Focus-Economics Uruguay has the highest GDP per capita in Latin America, at approximately $23,088 per person. The country's economic stability is built on a strong institutional framework, respect for democratic processes, and a comprehensive social welfare system. Uruguay weathered the 2008 global financial crisis better than many of its neighbors due to prudent fiscal policies and a diversified economy. Income inequality in Uruguay, as measured by the Gini coefficient, is the lowest in Latin America, though still higher than in most developed countries. The country has a large middle class, comprising about 60% of the population, which has been a stabilizing factor in its social and political development.'", "expected_output_tokens": 500, "task": {"task_type": "Summarization", "task_criteria": "Summarize the text provided ensuring that the main message is not diluted nor changed"}, "golden_answer": "Uruguay boasts South America's highest GDP per capita at approximately $17,000, supported by strong institutions, democratic stability, and comprehensive social welfare. The country successfully navigated the 2008 global financial crisis through sound fiscal management and economic diversification. Uruguay has Latin America's lowest income inequality, though it remains higher than most developed nations. Its substantial middle class, comprising about 60% of the population, contributes significantly to the country's social and political stability.", "model_id": "anthropic.claude-3-5-sonnet-20241022-v2:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.003, "output_token_cost": 0.015}
{"text_prompt": "Summarize the following text: 'Uruguay is a country in South America that borders Argentina and Brazil. With a population of around 3.5 million people, it is known for its stable democracy, progressive social policies, and high quality of life. Uruguay has been consistently ranked as one of the least corrupt countries in Latin America and boasts high rates of literacy and healthcare access.'", "expected_output_tokens": 500, "task": {"task_type": "Summarization", "task_criteria": "Summarize the text provided ensuring that the main message is not diluted nor changed"}, "golden_answer": "Uruguay is a small South American nation bordering Argentina and Brazil with approximately 3.5 million inhabitants. It stands out in Latin America for its stable democratic system, progressive social policies, low corruption levels, and high standards in literacy and healthcare.", "model_id": "us.meta.llama3-3-70b-instruct-v1:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00072, "output_token_cost": 0.00072}
{"text_prompt": "Summarize the following text: 'Uruguay's economy is largely driven by its agricultural sector, especially beef and wool exports. The country is one of the largest exporters of beef per capita in the world. Additionally, Uruguay has become a technology hub in recent years, with a growing software development industry and nearly universal internet access. The country has also made significant investments in renewable energy, with almost 98% of its electricity now coming from renewable sources, primarily wind and hydroelectric power.'", "expected_output_tokens": 500, "task": {"task_type": "Summarization", "task_criteria": "Summarize the text provided ensuring that the main message is not diluted nor changed"}, "golden_answer": "Uruguay's economy depends heavily on agricultural exports, particularly beef and wool, making it one of the world's largest beef exporters per capita. The country has also developed as a technology center with a growing software industry and widespread internet access. Uruguay has made remarkable progress in renewable energy, with nearly 98% of its electricity generated from sustainable sources like wind and hydroelectric power.", "model_id": "us.meta.llama3-3-70b-instruct-v1:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00072, "output_token_cost": 0.00072}
{"text_prompt": "Summarize the following text: 'Montevideo, the capital and largest city of Uruguay, is home to nearly half of the country's population. Founded by the Spanish in 1724, the city features a mix of colonial architecture and modern buildings. Its historic Ciudad Vieja (Old Town) contains many preserved buildings from the colonial era. Montevideo is consistently ranked as having the highest quality of life and lowest level of corruption of any city in Latin America. The city's Rambla, a continuous roadway along the coastline, stretches for over 22 kilometers and is a popular gathering place for locals.'", "expected_output_tokens": 500, "task": {"task_type": "Summarization", "task_criteria": "Summarize the text provided ensuring that the main message is not diluted nor changed"}, "golden_answer": "Montevideo, Uruguay's capital and largest city, houses nearly half the country's population and was established by Spanish colonizers in 1724. The city combines colonial and modern architecture, particularly in Ciudad Vieja. It ranks highest in Latin America for quality of life and lowest for corruption. A defining feature is the 22-kilometer Rambla, a coastal roadway popular among residents.", "model_id": "us.meta.llama3-3-70b-instruct-v1:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00072, "output_token_cost": 0.00072}
{"text_prompt": "Summarize the following text: 'Uruguay was the first country in the world to fully legalize marijuana, with a law passed in 2013 that allows citizens to grow, sell, and consume cannabis. This progressive approach to drug policy is part of a broader trend of liberal social policies in the country. Uruguay was also among the first nations in Latin America to establish a welfare state, secularize the government, grant divorce rights to women, and most recently, legalize same-sex marriage. Despite its small size, Uruguay has often been at the forefront of progressive social reform in the region.'", "expected_output_tokens": 500, "task": {"task_type": "Summarization", "task_criteria": "Summarize the text provided ensuring that the main message is not diluted nor changed"}, "golden_answer": "Uruguay became the world's first country to completely legalize marijuana in 2013, allowing its citizens to grow, sell, and use cannabis. This policy exemplifies the nation's progressive approach, which includes pioneering a welfare state, government secularization, women's divorce rights, and same-sex marriage in Latin America. Despite its small size, Uruguay consistently leads the region in progressive social reforms.", "model_id": "us.meta.llama3-3-70b-instruct-v1:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00072, "output_token_cost": 0.00072}
{"text_prompt": "Summarize the following text: 'Uruguay has a rich cultural heritage that blends European influences with indigenous traditions. The tango, often associated exclusively with Argentina, also has deep roots in Uruguay, with both countries claiming to be its birthplace. Candombe, an Afro-Uruguayan rhythmic dance and music style, was recognized by UNESCO as a cultural heritage of humanity. The country is also known for its unique tradition of mate drinking, a caffeinated beverage shared among friends and family using a special gourd and metal straw called a bombilla. Literature is another important aspect of Uruguayan culture, with writers like Mario Benedetti and Eduardo Galeano achieving international acclaim.'", "expected_output_tokens": 500, "task": {"task_type": "Summarization", "task_criteria": "Summarize the text provided ensuring that the main message is not diluted nor changed"}, "golden_answer": "Uruguay's cultural heritage combines European and indigenous influences. The country shares claim to the tango's origins with Argentina, while its Afro-Uruguayan Candombe has received UNESCO recognition as cultural heritage. Mate drinking, using a specialized gourd and metal straw (bombilla), represents a distinctive social tradition. Uruguay has also produced internationally acclaimed literary figures such as Mario Benedetti and Eduardo Galeano.", "model_id": "us.meta.llama3-3-70b-instruct-v1:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00072, "output_token_cost": 0.00072}
{"text_prompt": "Summarize the following text: 'Football (soccer) is by far the most popular sport in Uruguay, with the national team having won the FIFA World Cup twice, in 1930 and 1950. The first World Cup tournament was hosted by Uruguay in 1930, which they won by defeating Argentina in the final. Their second victory in 1950, defeating Brazil in the Maracana Stadium in Rio de Janeiro, is known as the 'Maracanazo' and remains one of the most famous upsets in sports history. Uruguay has also won the Copa América a record 15 times. The passion for football runs deep in Uruguayan culture, with fierce rivalries between the country's two most successful clubs, Peñarol and Nacional.'", "expected_output_tokens": 500, "task": {"task_type": "Summarization", "task_criteria": "Summarize the text provided ensuring that the main message is not diluted nor changed"}, "golden_answer": "Football dominates Uruguayan sports culture, with the national team claiming two World Cup victories: hosting and winning the inaugural 1930 tournament against Argentina, and achieving the famous 'Maracanazo' upset over Brazil in 1950. With a record 15 Copa América titles, football passion in Uruguay is further exemplified by the intense rivalry between the country's leading clubs, Peñarol and Nacional.", "model_id": "us.meta.llama3-3-70b-instruct-v1:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00072, "output_token_cost": 0.00072}
{"text_prompt": "Summarize the following text: 'Uruguay's beaches are a major tourist attraction, particularly in Punta del Este, known as the 'Monaco of South America' for its luxury resorts and vibrant nightlife. During summer months (December to February), the population of Punta del Este swells from about 10,000 permanent residents to over 100,000 as tourists flock to its beaches. The hand sculpture at Playa Brava, known as 'La Mano' or 'The Hand,' has become an iconic symbol of the city. Further east, José Ignacio has developed from a quiet fishing village into an exclusive, bohemian-chic vacation spot favored by celebrities and the international jet-set.'", "expected_output_tokens": 500, "task": {"task_type": "Summarization", "task_criteria": "Summarize the text provided ensuring that the main message is not diluted nor changed"}, "golden_answer": "Uruguay's beaches are significant tourist destinations, with Punta del Este—nicknamed the 'Monaco of South America'—featuring luxury resorts and active nightlife. The city's population increases tenfold during the summer season, from 10,000 to over 100,000. Its famous 'La Mano' sculpture at Playa Brava has become an iconic landmark. Meanwhile, José Ignacio has transformed from a simple fishing village into an exclusive vacation destination preferred by celebrities and wealthy international travelers.", "model_id": "us.meta.llama3-3-70b-instruct-v1:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00072, "output_token_cost": 0.00072}
{"text_prompt": "Summarize the following text: 'Uruguay experienced a brutal military dictatorship from 1973 to 1985, during which political opponents were imprisoned, tortured, and sometimes killed or 'disappeared.' This period was part of Operation Condor, a campaign of political repression involving intelligence operations and assassination of opponents, backed by the United States and implemented by right-wing dictatorships in South America. After the return to democracy, Uruguay took steps to address this dark period, eventually repealing an amnesty law that had protected military officers from prosecution. In 2009, former military ruler Gregorio Álvarez was sentenced to 25 years in prison for human rights violations, highlighting the country's commitment to confronting its past.'", "expected_output_tokens": 500, "task": {"task_type": "Summarization", "task_criteria": "Summarize the text provided ensuring that the main message is not diluted nor changed"}, "golden_answer": "From 1973 to 1985, Uruguay endured a harsh military dictatorship that imprisoned, tortured, and killed political opponents as part of the US-backed Operation Condor across South American right-wing regimes. Following democratization, Uruguay worked to address this dark history by eventually revoking an amnesty law that had shielded military personnel from prosecution. The 2009 conviction of former military ruler Gregorio Álvarez to 25 years imprisonment for human rights abuses demonstrated the nation's determination to confront its historical wrongs.", "model_id": "us.meta.llama3-3-70b-instruct-v1:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00072, "output_token_cost": 0.00072}
{"text_prompt": "Summarize the following text: 'Uruguay has made significant environmental strides in recent decades. The country produces nearly 98% of its electricity from renewable sources, primarily wind and hydroelectric power. This transition to clean energy has been accomplished in less than ten years and without government subsidies, making it a remarkable success story in renewable energy adoption. Uruguay has also implemented progressive waste management policies, including an innovative container deposit system for plastic bottles and strong recycling programs. The country's commitment to environmental protection extends to its agricultural practices, with increasing emphasis on organic and sustainable farming methods. These efforts have earned Uruguay recognition as one of the greenest countries in Latin America.'", "expected_output_tokens": 500, "task": {"task_type": "Summarization", "task_criteria": "Summarize the text provided ensuring that the main message is not diluted nor changed"}, "golden_answer": "Uruguay has achieved impressive environmental progress, particularly by generating almost 98% of its electricity from renewable sources like wind and hydroelectric power—a transformation accomplished within a decade without government subsidies. The country has also implemented advanced waste management systems, including a container deposit program for plastic bottles and comprehensive recycling initiatives. Uruguay's environmental commitment extends to promoting organic and sustainable agricultural practices, establishing it as one of Latin America's environmental leaders.", "model_id": "us.meta.llama3-3-70b-instruct-v1:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00072, "output_token_cost": 0.00072}
{"text_prompt": "Summarize the following text: 'According to Focus-Economics Uruguay has the highest GDP per capita in Latin America, at approximately $23,088 per person. The country's economic stability is built on a strong institutional framework, respect for democratic processes, and a comprehensive social welfare system. Uruguay weathered the 2008 global financial crisis better than many of its neighbors due to prudent fiscal policies and a diversified economy. Income inequality in Uruguay, as measured by the Gini coefficient, is the lowest in Latin America, though still higher than in most developed countries. The country has a large middle class, comprising about 60% of the population, which has been a stabilizing factor in its social and political development.'", "expected_output_tokens": 500, "task": {"task_type": "Summarization", "task_criteria": "Summarize the text provided ensuring that the main message is not diluted nor changed"}, "golden_answer": "Uruguay boasts South America's highest GDP per capita at approximately $17,000, supported by strong institutions, democratic stability, and comprehensive social welfare. The country successfully navigated the 2008 global financial crisis through sound fiscal management and economic diversification. Uruguay has Latin America's lowest income inequality, though it remains higher than most developed nations. Its substantial middle class, comprising about 60% of the population, contributes significantly to the country's social and political stability.", "model_id": "us.meta.llama3-3-70b-instruct-v1:0", "region": "us-west-2", "inference_profile": "standard", "input_token_cost": 0.00072, "output_token_cost": 0.00072}
{"text_prompt": "Summarize the following text: 'Uruguay is a country in South America that borders Argentina and Brazil. With a population of around 3.5 million people, it is known for its stable democracy, progressive social policies, and high quality of life. Uruguay has been consistently ranked as one of the least corrupt countries in Latin America and boasts high rates of literacy and healthcare access.'", "expected_output_tokens": 500, "task": {"task_type": "Summarization", "task_criteria": "Summarize the text provided ensuring that the main message is not diluted nor changed"}, "golden_answer": "Uruguay is a small South American nation bordering Argentina and Brazil with approximately 3.5 million inhabitants. It stands out in Latin America for its stable democratic system, progressive social policies, low corruption levels, and high standards in literacy and healthcare.", "model_id": "us.anthropic.claude-3-5-haiku-20241022-v1:0", "region": "us-east-2", "inference_profile": "standard", "input_token_cost": 0.000001, "output_token_cost": 0.000015}
{"text_prompt": "Summarize the following text: 'Uruguay's economy is largely driven by its agricultural sector, especially beef and wool exports. The country is one of the largest exporters of beef per capita in the world. Additionally, Uruguay has become a technology hub in recent years, with a growing software development industry and nearly universal internet access. The country has also made significant investments in renewable energy, with almost 98% of its electricity now coming from renewable sources, primarily wind and hydroelectric power.'", "expected_output_tokens": 500, "task": {"task_type": "Summarization", "task_criteria": "Summarize the text provided ensuring that the main message is not diluted nor changed"}, "golden_answer": "Uruguay's economy depends heavily on agricultural exports, particularly beef and wool, making it one of the world's largest beef exporters per capita. The country has also developed as a technology center with a growing software industry and widespread internet access. Uruguay has made remarkable progress in renewable energy, with nearly 98% of its electricity generated from sustainable sources like wind and hydroelectric power.", "model_id": "us.anthropic.claude-3-5-haiku-20241022-v1:0", "region": "us-east-2", "inference_profile": "standard", "input_token_cost": 0.000001, "output_token_cost": 0.000015}
{"text_prompt": "Summarize the following text: 'Montevideo, the capital and largest city of Uruguay, is home to nearly half of the country's population. Founded by the Spanish in 1724, the city features a mix of colonial architecture and modern buildings. Its historic Ciudad Vieja (Old Town) contains many preserved buildings from the colonial era. Montevideo is consistently ranked as having the highest quality of life and lowest level of corruption of any city in Latin America. The city's Rambla, a continuous roadway along the coastline, stretches for over 22 kilometers and is a popular gathering place for locals.'", "expected_output_tokens": 500, "task": {"task_type": "Summarization", "task_criteria": "Summarize the text provided ensuring that the main message is not diluted nor changed"}, "golden_answer": "Montevideo, Uruguay's capital and largest city, houses nearly half the country's population and was established by Spanish colonizers in 1724. The city combines colonial and modern architecture, particularly in Ciudad Vieja. It ranks highest in Latin America for quality of life and lowest for corruption. A defining feature is the 22-kilometer Rambla, a coastal roadway popular among residents.", "model_id": "us.anthropic.claude-3-5-haiku-20241022-v1:0", "region": "us-east-2", "inference_profile": "standard", "input_token_cost": 0.000001, "output_token_cost": 0.000015}
{"text_prompt": "Summarize the following text: 'Uruguay was the first country in the world to fully legalize marijuana, with a law passed in 2013 that allows citizens to grow, sell, and consume cannabis. This progressive approach to drug policy is part of a broader trend of liberal social policies in the country. Uruguay was also among the first nations in Latin America to establish a welfare state, secularize the government, grant divorce rights to women, and most recently, legalize same-sex marriage. Despite its small size, Uruguay has often been at the forefront of progressive social reform in the region.'", "expected_output_tokens": 500, "task": {"task_type": "Summarization", "task_criteria": "Summarize the text provided ensuring that the main message is not diluted nor changed"}, "golden_answer": "Uruguay became the world's first country to completely legalize marijuana in 2013, allowing its citizens to grow, sell, and use cannabis. This policy exemplifies the nation's progressive approach, which includes pioneering a welfare state, government secularization, women's divorce rights, and same-sex marriage in Latin America. Despite its small size, Uruguay consistently leads the region in progressive social reforms.", "model_id": "us.anthropic.claude-3-5-haiku-20241022-v1:0", "region": "us-east-2", "inference_profile": "standard", "input_token_cost": 0.000001, "output_token_cost": 0.000015}
{"text_prompt": "Summarize the following text: 'Uruguay has a rich cultural heritage that blends European influences with indigenous traditions. The tango, often associated exclusively with Argentina, also has deep roots in Uruguay, with both countries claiming to be its birthplace. Candombe, an Afro-Uruguayan rhythmic dance and music style, was recognized by UNESCO as a cultural heritage of humanity. The country is also known for its unique tradition of mate drinking, a caffeinated beverage shared among friends and family using a special gourd and metal straw called a bombilla. Literature is another important aspect of Uruguayan culture, with writers like Mario Benedetti and Eduardo Galeano achieving international acclaim.'", "expected_output_tokens": 500, "task": {"task_type": "Summarization", "task_criteria": "Summarize the text provided ensuring that the main message is not diluted nor changed"}, "golden_answer": "Uruguay's cultural heritage combines European and indigenous influences. The country shares claim to the tango's origins with Argentina, while its Afro-Uruguayan Candombe has received UNESCO recognition as cultural heritage. Mate drinking, using a specialized gourd and metal straw (bombilla), represents a distinctive social tradition. Uruguay has also produced internationally acclaimed literary figures such as Mario Benedetti and Eduardo Galeano.", "model_id": "us.anthropic.claude-3-5-haiku-20241022-v1:0", "region": "us-east-2", "inference_profile": "standard", "input_token_cost": 0.000001, "output_token_cost": 0.000015}
{"text_prompt": "Summarize the following text: 'Football (soccer) is by far the most popular sport in Uruguay, with the national team having won the FIFA World Cup twice, in 1930 and 1950. The first World Cup tournament was hosted by Uruguay in 1930, which they won by defeating Argentina in the final. Their second victory in 1950, defeating Brazil in the Maracana Stadium in Rio de Janeiro, is known as the 'Maracanazo' and remains one of the most famous upsets in sports history. Uruguay has also won the Copa América a record 15 times. The passion for football runs deep in Uruguayan culture, with fierce rivalries between the country's two most successful clubs, Peñarol and Nacional.'", "expected_output_tokens": 500, "task": {"task_type": "Summarization", "task_criteria": "Summarize the text provided ensuring that the main message is not diluted nor changed"}, "golden_answer": "Football dominates Uruguayan sports culture, with the national team claiming two World Cup victories: hosting and winning the inaugural 1930 tournament against Argentina, and achieving the famous 'Maracanazo' upset over Brazil in 1950. With a record 15 Copa América titles, football passion in Uruguay is further exemplified by the intense rivalry between the country's leading clubs, Peñarol and Nacional.", "model_id": "us.anthropic.claude-3-5-haiku-20241022-v1:0", "region": "us-east-2", "inference_profile": "standard", "input_token_cost": 0.000001, "output_token_cost": 0.000015}
{"text_prompt": "Summarize the following text: 'Uruguay's beaches are a major tourist attraction, particularly in Punta del Este, known as the 'Monaco of South America' for its luxury resorts and vibrant nightlife. During summer months (December to February), the population of Punta del Este swells from about 10,000 permanent residents to over 100,000 as tourists flock to its beaches. The hand sculpture at Playa Brava, known as 'La Mano' or 'The Hand,' has become an iconic symbol of the city. Further east, José Ignacio has developed from a quiet fishing village into an exclusive, bohemian-chic vacation spot favored by celebrities and the international jet-set.'", "expected_output_tokens": 500, "task": {"task_type": "Summarization", "task_criteria": "Summarize the text provided ensuring that the main message is not diluted nor changed"}, "golden_answer": "Uruguay's beaches are significant tourist destinations, with Punta del Este—nicknamed the 'Monaco of South America'—featuring luxury resorts and active nightlife. The city's population increases tenfold during the summer season, from 10,000 to over 100,000. Its famous 'La Mano' sculpture at Playa Brava has become an iconic landmark. Meanwhile, José Ignacio has transformed from a simple fishing village into an exclusive vacation destination preferred by celebrities and wealthy international travelers.", "model_id": "us.anthropic.claude-3-5-haiku-20241022-v1:0", "region": "us-east-2", "inference_profile": "standard", "input_token_cost": 0.000001, "output_token_cost": 0.000015}
{"text_prompt": "Summarize the following text: 'Uruguay experienced a brutal military dictatorship from 1973 to 1985, during which political opponents were imprisoned, tortured, and sometimes killed or 'disappeared.' This period was part of Operation Condor, a campaign of political repression involving intelligence operations and assassination of opponents, backed by the United States and implemented by right-wing dictatorships in South America. After the return to democracy, Uruguay took steps to address this dark period, eventually repealing an amnesty law that had protected military officers from prosecution. In 2009, former military ruler Gregorio Álvarez was sentenced to 25 years in prison for human rights violations, highlighting the country's commitment to confronting its past.'", "expected_output_tokens": 500, "task": {"task_type": "Summarization", "task_criteria": "Summarize the text provided ensuring that the main message is not diluted nor changed"}, "golden_answer": "From 1973 to 1985, Uruguay endured a harsh military dictatorship that imprisoned, tortured, and killed political opponents as part of the US-backed Operation Condor across South American right-wing regimes. Following democratization, Uruguay worked to address this dark history by eventually revoking an amnesty law that had shielded military personnel from prosecution. The 2009 conviction of former military ruler Gregorio Álvarez to 25 years imprisonment for human rights abuses demonstrated the nation's determination to confront its historical wrongs.", "model_id": "us.anthropic.claude-3-5-haiku-20241022-v1:0", "region": "us-east-2", "inference_profile": "standard", "input_token_cost": 0.000001, "output_token_cost": 0.000015}
{"text_prompt": "Summarize the following text: 'Uruguay has made significant environmental strides in recent decades. The country produces nearly 98% of its electricity from renewable sources, primarily wind and hydroelectric power. This transition to clean energy has been accomplished in less than ten years and without government subsidies, making it a remarkable success story in renewable energy adoption. Uruguay has also implemented progressive waste management policies, including an innovative container deposit system for plastic bottles and strong recycling programs. The country's commitment to environmental protection extends to its agricultural practices, with increasing emphasis on organic and sustainable farming methods. These efforts have earned Uruguay recognition as one of the greenest countries in Latin America.'", "expected_output_tokens": 500, "task": {"task_type": "Summarization", "task_criteria": "Summarize the text provided ensuring that the main message is not diluted nor changed"}, "golden_answer": "Uruguay has achieved impressive environmental progress, particularly by generating almost 98% of its electricity from renewable sources like wind and hydroelectric power—a transformation accomplished within a decade without government subsidies. The country has also implemented advanced waste management systems, including a container deposit program for plastic bottles and comprehensive recycling initiatives. Uruguay's environmental commitment extends to promoting organic and sustainable agricultural practices, establishing it as one of Latin America's environmental leaders.", "model_id": "us.anthropic.claude-3-5-haiku-20241022-v1:0", "region": "us-east-2", "inference_profile": "standard", "input_token_cost": 0.000001, "output_token_cost": 0.000015}
{"text_prompt": "Summarize the following text: 'According to Focus-Economics Uruguay has the highest GDP per capita in Latin America, at approximately $23,088 per person. The country's economic stability is built on a strong institutional framework, respect for democratic processes, and a comprehensive social welfare system. Uruguay weathered the 2008 global financial crisis better than many of its neighbors due to prudent fiscal policies and a diversified economy. Income inequality in Uruguay, as measured by the Gini coefficient, is the lowest in Latin America, though still higher than in most developed countries. The country has a large middle class, comprising about 60% of the population, which has been a stabilizing factor in its social and political development.'", "expected_output_tokens": 500, "task": {"task_type": "Summarization", "task_criteria": "Summarize the text provided ensuring that the main message is not diluted nor changed"}, "golden_answer": "Uruguay boasts South America's highest GDP per capita at approximately $17,000, supported by strong institutions, democratic stability, and comprehensive social welfare. The country successfully navigated the 2008 global financial crisis through sound fiscal management and economic diversification. Uruguay has Latin America's lowest income inequality, though it remains higher than most developed nations. Its substantial middle class, comprising about 60% of the population, contributes significantly to the country's social and political stability.", "model_id": "us.anthropic.claude-3-5-haiku-20241022-v1:0", "region": "us-east-2", "inference_profile": "standard", "input_token_cost": 0.000001, "output_token_cost": 0.000015}
{"text_prompt": "Summarize the following text: 'Uruguay is a country in South America that borders Argentina and Brazil. With a population of around 3.5 million people, it is known for its stable democracy, progressive social policies, and high quality of life. Uruguay has been consistently ranked as one of the least corrupt countries in Latin America and boasts high rates of literacy and healthcare access.'", "expected_output_tokens": 500, "task": {"task_type": "Summarization", "task_criteria": "Summarize the text provided ensuring that the main message is not diluted nor changed"}, "golden_answer": "Uruguay is a small South American nation bordering Argentina and Brazil with approximately 3.5 million inhabitants. It stands out in Latin America for its stable democratic system, progressive social policies, low corruption levels, and high standards in literacy and healthcare.", "model_id": "amazon.nova-pro-v1:0", "region": "us-east-1", "inference_profile": "standard", "input_token_cost": 0.0008, "output_token_cost": 0.0032}
{"text_prompt": "Summarize the following text: 'Uruguay's economy is largely driven by its agricultural sector, especially beef and wool exports. The country is one of the largest exporters of beef per capita in the world. Additionally, Uruguay has become a technology hub in recent years, with a growing software development industry and nearly universal internet access. The country has also made significant investments in renewable energy, with almost 98% of its electricity now coming from renewable sources, primarily wind and hydroelectric power.'", "expected_output_tokens": 500, "task": {"task_type": "Summarization", "task_criteria": "Summarize the text provided ensuring that the main message is not diluted nor changed"}, "golden_answer": "Uruguay's economy depends heavily on agricultural exports, particularly beef and wool, making it one of the world's largest beef exporters per capita. The country has also developed as a technology center with a growing software industry and widespread internet access. Uruguay has made remarkable progress in renewable energy, with nearly 98% of its electricity generated from sustainable sources like wind and hydroelectric power.", "model_id": "amazon.nova-pro-v1:0", "region": "us-east-1", "inference_profile": "standard", "input_token_cost": 0.0008, "output_token_cost": 0.0032}
{"text_prompt": "Summarize the following text: 'Montevideo, the capital and largest city of Uruguay, is home to nearly half of the country's population. Founded by the Spanish in 1724, the city features a mix of colonial architecture and modern buildings. Its historic Ciudad Vieja (Old Town) contains many preserved buildings from the colonial era. Montevideo is consistently ranked as having the highest quality of life and lowest level of corruption of any city in Latin America. The city's Rambla, a continuous roadway along the coastline, stretches for over 22 kilometers and is a popular gathering place for locals.'", "expected_output_tokens": 500, "task": {"task_type": "Summarization", "task_criteria": "Summarize the text provided ensuring that the main message is not diluted nor changed"}, "golden_answer": "Montevideo, Uruguay's capital and largest city, houses nearly half the country's population and was established by Spanish colonizers in 1724. The city combines colonial and modern architecture, particularly in Ciudad Vieja. It ranks highest in Latin America for quality of life and lowest for corruption. A defining feature is the 22-kilometer Rambla, a coastal roadway popular among residents.", "model_id": "amazon.nova-pro-v1:0", "region": "us-east-1", "inference_profile": "standard", "input_token_cost": 0.0008, "output_token_cost": 0.0032}
{"text_prompt": "Summarize the following text: 'Uruguay was the first country in the world to fully legalize marijuana, with a law passed in 2013 that allows citizens to grow, sell, and consume cannabis. This progressive approach to drug policy is part of a broader trend of liberal social policies in the country. Uruguay was also among the first nations in Latin America to establish a welfare state, secularize the government, grant divorce rights to women, and most recently, legalize same-sex marriage. Despite its small size, Uruguay has often been at the forefront of progressive social reform in the region.'", "expected_output_tokens": 500, "task": {"task_type": "Summarization", "task_criteria": "Summarize the text provided ensuring that the main message is not diluted nor changed"}, "golden_answer": "Uruguay became the world's first country to completely legalize marijuana in 2013, allowing its citizens to grow, sell, and use cannabis. This policy exemplifies the nation's progressive approach, which includes pioneering a welfare state, government secularization, women's divorce rights, and same-sex marriage in Latin America. Despite its small size, Uruguay consistently leads the region in progressive social reforms.", "model_id": "amazon.nova-pro-v1:0", "region": "us-east-1", "inference_profile": "standard", "input_token_cost": 0.0008, "output_token_cost": 0.0032}
{"text_prompt": "Summarize the following text: 'Uruguay has a rich cultural heritage that blends European influences with indigenous traditions. The tango, often associated exclusively with Argentina, also has deep roots in Uruguay, with both countries claiming to be its birthplace. Candombe, an Afro-Uruguayan rhythmic dance and music style, was recognized by UNESCO as a cultural heritage of humanity. The country is also known for its unique tradition of mate drinking, a caffeinated beverage shared among friends and family using a special gourd and metal straw called a bombilla. Literature is another important aspect of Uruguayan culture, with writers like Mario Benedetti and Eduardo Galeano achieving international acclaim.'", "expected_output_tokens": 500, "task": {"task_type": "Summarization", "task_criteria": "Summarize the text provided ensuring that the main message is not diluted nor changed"}, "golden_answer": "Uruguay's cultural heritage combines European and indigenous influences. The country shares claim to the tango's origins with Argentina, while its Afro-Uruguayan Candombe has received UNESCO recognition as cultural heritage. Mate drinking, using a specialized gourd and metal straw (bombilla), represents a distinctive social tradition. Uruguay has also produced internationally acclaimed literary figures such as Mario Benedetti and Eduardo Galeano.", "model_id": "amazon.nova-pro-v1:0", "region": "us-east-1", "inference_profile": "standard", "input_token_cost": 0.0008, "output_token_cost": 0.0032}
{"text_prompt": "Summarize the following text: 'Football (soccer) is by far the most popular sport in Uruguay, with the national team having won the FIFA World Cup twice, in 1930 and 1950. The first World Cup tournament was hosted by Uruguay in 1930, which they won by defeating Argentina in the final. Their second victory in 1950, defeating Brazil in the Maracana Stadium in Rio de Janeiro, is known as the 'Maracanazo' and remains one of the most famous upsets in sports history. Uruguay has also won the Copa América a record 15 times. The passion for football runs deep in Uruguayan culture, with fierce rivalries between the country's two most successful clubs, Peñarol and Nacional.'", "expected_output_tokens": 500, "task": {"task_type": "Summarization", "task_criteria": "Summarize the text provided ensuring that the main message is not diluted nor changed"}, "golden_answer": "Football dominates Uruguayan sports culture, with the national team claiming two World Cup victories: hosting and winning the inaugural 1930 tournament against Argentina, and achieving the famous 'Maracanazo' upset over Brazil in 1950. With a record 15 Copa América titles, football passion in Uruguay is further exemplified by the intense rivalry between the country's leading clubs, Peñarol and Nacional.", "model_id": "amazon.nova-pro-v1:0", "region": "us-east-1", "inference_profile": "standard", "input_token_cost": 0.0008, "output_token_cost": 0.0032}
{"text_prompt": "Summarize the following text: 'Uruguay's beaches are a major tourist attraction, particularly in Punta del Este, known as the 'Monaco of South America' for its luxury resorts and vibrant nightlife. During summer months (December to February), the population of Punta del Este swells from about 10,000 permanent residents to over 100,000 as tourists flock to its beaches. The hand sculpture at Playa Brava, known as 'La Mano' or 'The Hand,' has become an iconic symbol of the city. Further east, José Ignacio has developed from a quiet fishing village into an exclusive, bohemian-chic vacation spot favored by celebrities and the international jet-set.'", "expected_output_tokens": 500, "task": {"task_type": "Summarization", "task_criteria": "Summarize the text provided ensuring that the main message is not diluted nor changed"}, "golden_answer": "Uruguay's beaches are significant tourist destinations, with Punta del Este—nicknamed the 'Monaco of South America'—featuring luxury resorts and active nightlife. The city's population increases tenfold during the summer season, from 10,000 to over 100,000. Its famous 'La Mano' sculpture at Playa Brava has become an iconic landmark. Meanwhile, José Ignacio has transformed from a simple fishing village into an exclusive vacation destination preferred by celebrities and wealthy international travelers.", "model_id": "amazon.nova-pro-v1:0", "region": "us-east-1", "inference_profile": "standard", "input_token_cost": 0.0008, "output_token_cost": 0.0032}
{"text_prompt": "Summarize the following text: 'Uruguay experienced a brutal military dictatorship from 1973 to 1985, during which political opponents were imprisoned, tortured, and sometimes killed or 'disappeared.' This period was part of Operation Condor, a campaign of political repression involving intelligence operations and assassination of opponents, backed by the United States and implemented by right-wing dictatorships in South America. After the return to democracy, Uruguay took steps to address this dark period, eventually repealing an amnesty law that had protected military officers from prosecution. In 2009, former military ruler Gregorio Álvarez was sentenced to 25 years in prison for human rights violations, highlighting the country's commitment to confronting its past.'", "expected_output_tokens": 500, "task": {"task_type": "Summarization", "task_criteria": "Summarize the text provided ensuring that the main message is not diluted nor changed"}, "golden_answer": "From 1973 to 1985, Uruguay endured a harsh military dictatorship that imprisoned, tortured, and killed political opponents as part of the US-backed Operation Condor across South American right-wing regimes. Following democratization, Uruguay worked to address this dark history by eventually revoking an amnesty law that had shielded military personnel from prosecution. The 2009 conviction of former military ruler Gregorio Álvarez to 25 years imprisonment for human rights abuses demonstrated the nation's determination to confront its historical wrongs.", "model_id": "amazon.nova-pro-v1:0", "region": "us-east-1", "inference_profile": "standard", "input_token_cost": 0.0008, "output_token_cost": 0.0032}
{"text_prompt": "Summarize the following text: 'Uruguay has made significant environmental strides in recent decades. The country produces nearly 98% of its electricity from renewable sources, primarily wind and hydroelectric power. This transition to clean energy has been accomplished in less than ten years and without government subsidies, making it a remarkable success story in renewable energy adoption. Uruguay has also implemented progressive waste management policies, including an innovative container deposit system for plastic bottles and strong recycling programs. The country's commitment to environmental protection extends to its agricultural practices, with increasing emphasis on organic and sustainable farming methods. These efforts have earned Uruguay recognition as one of the greenest countries in Latin America.'", "expected_output_tokens": 500, "task": {"task_type": "Summarization", "task_criteria": "Summarize the text provided ensuring that the main message is not diluted nor changed"}, "golden_answer": "Uruguay has achieved impressive environmental progress, particularly by generating almost 98% of its electricity from renewable sources like wind and hydroelectric power—a transformation accomplished within a decade without government subsidies. The country has also implemented advanced waste management systems, including a container deposit program for plastic bottles and comprehensive recycling initiatives. Uruguay's environmental commitment extends to promoting organic and sustainable agricultural practices, establishing it as one of Latin America's environmental leaders.", "model_id": "amazon.nova-pro-v1:0", "region": "us-east-1", "inference_profile": "standard", "input_token_cost": 0.0008, "output_token_cost": 0.0032}
{"text_prompt": "Summarize the following text: 'According to Focus-Economics Uruguay has the highest GDP per capita in Latin America, at approximately $23,088 per person. The country's economic stability is built on a strong institutional framework, respect for democratic processes, and a comprehensive social welfare system. Uruguay weathered the 2008 global financial crisis better than many of its neighbors due to prudent fiscal policies and a diversified economy. Income inequality in Uruguay, as measured by the Gini coefficient, is the lowest in Latin America, though still higher than in most developed countries. The country has a large middle class, comprising about 60% of the population, which has been a stabilizing factor in its social and political development.'", "expected_output_tokens": 500, "task": {"task_type": "Summarization", "task_criteria": "Summarize the text provided ensuring that the main message is not diluted nor changed"}, "golden_answer": "Uruguay boasts South America's highest GDP per capita at approximately $17,000, supported by strong institutions, democratic stability, and comprehensive social welfare. The country successfully navigated the 2008 global financial crisis through sound fiscal management and economic diversification. Uruguay has Latin America's lowest income inequality, though it remains higher than most developed nations. Its substantial middle class, comprising about 60% of the population, contributes significantly to the country's social and political stability.", "model_id": "amazon.nova-pro-v1:0", "region": "us-east-1", "inference_profile": "standard", "input_token_cost": 0.0008, "output_token_cost": 0.0032}