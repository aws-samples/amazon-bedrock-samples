AWSTemplateFormatVersion: "2010-09-09"

Description: Lambda Layer for boto3 Amazon Bedrock SDK extensions - requires access to Amazon Bedrock Service, currently in limited preview.

Resources:

  ## Lambda Function Bedrock

  BedrockFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - bedrock.amazonaws.com
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'bedrock:*'
                Resource: '*'
          PolicyName: BedrockPolicy

  BedrockFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Runtime: python3.10
      Role: !GetAtt 'BedrockFunctionRole.Arn'
      Timeout: 900
      MemorySize: 512
      Environment:
        Variables:
          AWS_REGION_BEDROCK: !Ref 'AWS::Region'
      Code:
        ZipFile: |
          import boto3
          from botocore.config import Config
          import json
          import os
          import traceback
          
          # Lambda client
          bedrock_region = os.environ.get("AWS_REGION_BEDROCK", None)
          
          # Bedrock client
          bedrock = boto3.client(
              service_name="bedrock-runtime"
          )
          
          def invoke_bedrock(provider, model_id, payload, embeddings=False):
              response = bedrock.invoke_model(
                  body=payload,
                  modelId=model_id,
                  accept="application/json",
                  contentType="application/json",
              )
              if response["ResponseMetadata"]["HTTPStatusCode"] == 200:
                  # Get text reponse from the model
                  return prepare_output(provider, response, embeddings)
          
              else:
                  raise Exception(
                      "Bedrock API call failed with status "
                      + str(response["ResponseMetadata"]["HTTPStatusCode"])
                  )
          
          def prepare_input(provider, prompt, model_kwargs, embeddings=False):
              try:
                  if not embeddings:
                    input_body = {**model_kwargs}
                  
                  if provider == "anthropic" or provider == "ai21":
                      input_body["prompt"] = prompt
                  elif provider == "amazon":
                      input_body = dict()
                      input_body["inputText"] = prompt
                      
                      if not embeddings:
                        input_body["textGenerationConfig"] = {**model_kwargs}
                  else:
                      input_body["inputText"] = prompt
          
                  if provider == "anthropic" and "max_tokens_to_sample" not in input_body:
                      input_body["max_tokens_to_sample"] = 256
              
                  return input_body
              except Exception as e:
                  stacktrace = traceback.format_exc()
                  
                  print(stacktrace)
                  raise e
          
          def prepare_output(provider, response, embeddings=False):
              try:
                  if provider == "anthropic":
                      response_body = json.loads(response.get("body").read().decode())
                      return response_body.get("completion")
                  else:
                      response_body = json.loads(response.get("body").read())
                  
                  if not embeddings:
                      if provider == "ai21":
                          return response_body.get("completions")[0].get("data").get("text")
                      else:
                          return response_body.get("results")[0].get("outputText")
                  else:
                      return response_body.get("embedding")
              except Exception as e:
                  stacktrace = traceback.format_exc()
                  
                  print(stacktrace)
                  raise e
          
          def lambda_handler(event, context):
              try:
                  print(event)
                  model_id = event["headers"]["model_id"]
                  
                  if "embeddings" in event["headers"] and event["headers"]["embeddings"] in ["True", "true"]:
                    embeddings = True
                  else:
                    embeddings = False
                  
                  provider = model_id.split(".")[0]
          
                  print("Model ID: ", model_id)
                  print("Provider: ", provider)
          
                  body = json.loads(event["body"])
          
                  print("Input body: ", body)
          
                  bedrock_body = prepare_input(provider, body["inputs"], body["parameters"] if "parameters" in body else {}, embeddings)
          
                  print("Bedrock body: ", bedrock_body)
          
                  response = invoke_bedrock(
                      provider=provider,
                      model_id=model_id,
                      payload=json.dumps(bedrock_body),
                      embeddings=embeddings
                  )
          
                  return {"statusCode": 200, "body": json.dumps([{"generated_text": response}])}
          
              except Exception as e:
                  stacktrace = traceback.format_exc()
              
                  print(stacktrace)
                  return {"statusCode": 500, "body": json.dumps([{"generated_text": stacktrace}])}

  ## API Gateway

  APIGatewayRestApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: bedrock-api-gateway

  APIGatewayCloudWatchRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - !Join
          - ''
          - - 'arn:'
            - !Ref 'AWS::Partition'
            - ':iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs'
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain

  APIGatewayAccount:
    Type: 'AWS::ApiGateway::Account'
    Properties:
      CloudWatchRoleArn: !GetAtt
        - APIGatewayCloudWatchRole
        - Arn
    DependsOn:
      - APIGatewayRestApi
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain

  APIGatewayDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref APIGatewayRestApi
      Description: Automatically created by the RestApi construct
    DependsOn:
      - APIGatewayAnyProxy
      - APIGatewayResourceProxy
      - APIGatewayAnyProxy2

  APIGatewayStageProd:
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      RestApiId: !Ref APIGatewayRestApi
      DeploymentId: !Ref APIGatewayDeployment
      StageName: prod
    DependsOn:
      - APIGatewayAccount

  APIGatewayResourceProxy:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt
        - APIGatewayRestApi
        - RootResourceId
      PathPart: '{proxy+}'
      RestApiId: !Ref APIGatewayRestApi

  APIGatewayAnyAnyAPIFunctionPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref >-
        BedrockFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:'
          - !Ref 'AWS::Partition'
          - ':execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref APIGatewayRestApi
          - /
          - !Ref APIGatewayStageProd
          - /*/*

  APIGatewayAnyAnyAPITestFunctionPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref >-
        BedrockFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:'
          - !Ref 'AWS::Partition'
          - ':execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref APIGatewayRestApi
          - /test-invoke-stage/*/*

  APIGatewayAnyProxy:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: ANY
      ResourceId: !Ref APIGatewayResourceProxy
      RestApiId: !Ref APIGatewayRestApi
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ''
          - - 'arn:'
            - !Ref 'AWS::Partition'
            - ':apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt BedrockFunction.Arn
            - /invocations

  APIGatewayAnyAPIFunctionPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref >-
        BedrockFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:'
          - !Ref 'AWS::Partition'
          - ':execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref APIGatewayRestApi
          - /
          - !Ref APIGatewayStageProd
          - /*/

  APIGatewayAnyAPITestFunctionPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref >-
        BedrockFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:'
          - !Ref 'AWS::Partition'
          - ':execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref APIGatewayRestApi
          - /test-invoke-stage/*/

  APIGatewayAnyProxy2:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: ANY
      ResourceId: !GetAtt
        - APIGatewayRestApi
        - RootResourceId
      RestApiId: !Ref APIGatewayRestApi
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ''
          - - 'arn:'
            - !Ref 'AWS::Partition'
            - ':apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt BedrockFunction.Arn
            - /invocations

Outputs:
  APIGatewayEndpoint:
    Value: !Join
      - ''
      - - 'https://'
        - !Ref APIGatewayRestApi
        - .execute-api.
        - !Ref 'AWS::Region'
        - .
        - !Ref 'AWS::URLSuffix'
        - /
        - !Ref APIGatewayStageProd
        - /
  APIUrl:
    Value: !Join
      - ''
      - - 'https://'
        - !Ref APIGatewayRestApi
        - .execute-api.
        - !Ref 'AWS::Region'
        - .
        - !Ref 'AWS::URLSuffix'
        - /
        - !Ref APIGatewayStageProd
        - /