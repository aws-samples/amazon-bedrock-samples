AWSTemplateFormatVersion: 2010-09-09
Description: Basic VPC Infrastructure
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: 'VPCConfig'
        Parameters:
        - Vpccidr
        - PublicSubnetAcidr
        - PublicSubnetBcidr
        - PrivateSubnetAcidr
        - PrivateSubnetBcidr
      - Label:
          default: 'EnvironmentConfig'
        Parameters:
        - EnvironmentName
Mappings:
  # Cloudfront Mappings
  ELBRegionMap:
    'us-east-1':
      ELBAccountId: '127311923021'
    'us-west-2':
      ELBAccountId: '797873946194'
      
Parameters:
  Vpccidr:
    Description: Please enter the IP range (CIDR notation) for the VPC
    Type: String
    Default: 10.0.0.0/16

  PublicSubnetAcidr:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.0.0.0/24

  PublicSubnetBcidr:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.0.1.0/24

  PrivateSubnetAcidr:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.0.2.0/24

  PrivateSubnetBcidr:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.0.3.0/24
  
  EnvironmentName:
    Description: Unique name to distinguish different web application min chars 1 and max chars 4
    Type: String
    MinLength: 1
    MaxLength: 4

Resources:
  # ECS Cluster
  StreamlitCluster:
    Type: AWS::ECS::Cluster
    DependsOn: StreamlitECSRoleCustomResource
    Properties:
      ClusterName: !Join ['-', ['StreamlitCluster', !Ref EnvironmentName]]
      ClusterSettings:
        - Name: containerInsights
          Value: enabled

  # Logs Policy
  LogsPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      ManagedPolicyName: 'LogsPolicy'
      Path: /
      ManagedPolicyName: !Sub "LogsPolicy${EnvironmentName}"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
              - 'logs:PutRetentionPolicy'
            Resource: '*'
  
  # Logging bucket
  LoggingBucket: 
    Type: "AWS::S3::Bucket"
    DeletionPolicy: Retain
    Properties:
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  LoggingBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    DeletionPolicy: Retain
    Properties:
      Bucket: !Ref LoggingBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - 's3:PutObject'
            Effect: Allow
            Principal:
              Service: logging.s3.amazonaws.com
            Resource: 
              - !Sub arn:aws:s3:::${LoggingBucket}/*
          - Action:
              - 's3:PutObject'
            Effect: Allow
            Principal:
              AWS: !Sub 
                    - arn:aws:iam::${ElbAccount}:root
                    - {ElbAccount: !FindInMap [ELBRegionMap, !Ref 'AWS::Region', ELBAccountId]}
            Resource: 
              - !Sub arn:aws:s3:::${LoggingBucket}/alb/logs/AWSLogs/${AWS::AccountId}/*
          - Action:
              - 's3:*'
            Effect: Deny
            Resource: 
              - !Sub arn:aws:s3:::${LoggingBucket}/*
              - !Sub arn:aws:s3:::${LoggingBucket}
            Principal: "*"
            Condition:
              Bool:
                'aws:SecureTransport': 'false'

  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref Vpccidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: 'VPC'
  
  VPCLogGroup:
    DeletionPolicy: Retain
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: 7
      
  VPCLogRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: vpc-flow-logs.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !GetAtt LogsPolicy.PolicyArn
  
  VPCFlowLog:
    Type: "AWS::EC2::FlowLog"
    Properties:
      ResourceId: !Ref VPC
      ResourceType: VPC
      TrafficType: ALL
      LogGroupName: !Ref VPCLogGroup
      DeliverLogsPermissionArn: !GetAtt VPCLogRole.Arn
  
  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: InternetGateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # Create a Subnet
  PublicSubnetA:  
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PublicSubnetAcidr
      VpcId: !Ref VPC
      AvailabilityZone: !Select 
                          - 0
                          - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value: PublicSubnetA

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PublicSubnetBcidr
      VpcId: !Ref VPC
      AvailabilityZone: !Select 
                          - 1
                          - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value: PublicSubnetB

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PrivateSubnetAcidr
      VpcId: !Ref VPC
      AvailabilityZone: !Select 
                          - 0
                          - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value: PrivateSubnetA

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PrivateSubnetBcidr
      VpcId: !Ref VPC
      AvailabilityZone: !Select 
                          - 1
                          - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value: PrivateSubnetB

  # NAT Gateway
  NatGatewayAEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGatewayBEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGatewayA:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayAEIP.AllocationId
      SubnetId: !Ref PublicSubnetA

  NatGatewayB:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayBEIP.AllocationId
      SubnetId: !Ref PublicSubnetB
  
  # Public Route Table 
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PublicRouteTable
  
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetA

  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetB

  # Private Route Table
  PrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PrivateRouteTableA

  DefaultPrivateRouteA:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayA

  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      SubnetId: !Ref PrivateSubnetA

  PrivateRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PrivateRouteTableB

  DefaultPrivateRouteB:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayB

  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      SubnetId: !Ref PrivateSubnetB
Outputs:
  VPC:
    Description: "VPC"
    Value: !Ref VPC
    Export:
      Name: Basic-VPC
  
  LogsPolicy:
    Description: "LogsPolicy"
    Value: !GetAtt LogsPolicy.PolicyArn
    Export:
      Name: Basic-LogsPolicy
  
  LoggingBucket:
    Description: "LoggingBucket"
    Value: !Ref LoggingBucket
    Export:
      Name: Basic-LoggingBucket
  
  LoggingBucketPolicy:
    Description: "LoggingBucketPolicy"
    Value: !Ref LoggingBucketPolicy
    Export:
      Name: Basic-LoggingBucketPolicy
  
  PublicSubnetA:
    Description: "PublicSubnetA"
    Value: !Ref PublicSubnetA
    Export:
      Name: Basic-PublicSubnetA

  PublicSubnetB:
    Description: "PublicSubnetB"
    Value: !Ref PublicSubnetB
    Export:
      Name: Basic-PublicSubnetB

  PrivateSubnetA:
    Description: "PrivateSubnetA"
    Value: !Ref PrivateSubnetA
    Export:
      Name: Basic-PrivateSubnetA

  PrivateSubnetB:
    Description: "PrivateSubnetB"
    Value: !Ref PrivateSubnetB
    Export:
      Name: Basic-PrivateSubnetB
  
  StreamlitCluster:
    Description: "StreamlitCluster"
    Value: !Ref StreamlitCluster
    Export:
      Name: StreamlitCluster