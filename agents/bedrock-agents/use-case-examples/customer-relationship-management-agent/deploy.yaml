AWSTemplateFormatVersion: 2010-09-09
Description: Infrastructure for the Fargate ECS Cluster.

Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Container Configuration'
      Parameters:
      - Cpu
      - Memory
      - StreamLitImageURI
      - ContainerPort
    - Label:
        default: 'Environment Configuration'
      Parameters:
      - EnvironmentName
    - Label:
        default: 'Autoscaling'
      Parameters:
      - Task
      - Min
      - Max
      - Tv
    - Label:
        default: 'Infrastructure'
      Parameters:
      - StreamlitCluster
      - StreamlitLogsPolicyArn
      - StreamlitPublicSubnetA
      - StreamlitPublicSubnetB
      - StreamlitPrivateSubnetA
      - StreamlitPrivateSubnetB
      - LoggingBucketName

Parameters:

  StreamlitCluster:
    Description: StreamlitCluster
    Type: String 

  StreamLitImageURI:
    Description: Image URI
    Type: String
    Default: <AccountID>.dkr.ecr.<Region>.amazonaws.com/<ImageName>:<Tag>
  
  Cpu:
    Description: "CPU of Fargate Task. Make sure you put valid Memory and CPU pair, refer: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-cpu:~:text=requires%3A%20Replacement-,Cpu,-The%20number%20of"
    Type: Number
    Default: 512
    AllowedValues:
      - 256
      - 512
      - 1024
      - 2048
      - 4096
  
  Memory:
    Description: "Memory of Fargate Task.  Make sure you put valid Memory and CPU pair, refer: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-cpu:~:text=requires%3A%20Replacement-,Cpu,-The%20number%20of"
    Type: Number
    Default: 1024
    AllowedValues:
      - 512
      - 1024
      - 2048
      - 3072
      - 4096
      - 5120
      - 6144
      - 7168
      - 8192
      - 16384
      - 30720

  Task:
    Description: Desired Docker task count
    Type: Number
    Default: 2
  
  Min:
    Description: Minimum containers for Autoscaling. Should be less than or equal to DesiredTaskCount
    Type: Number
    Default: 2
  
  Max:
    Description: Maximum containers for Autoscaling. Should be greater than or equal to DesiredTaskCount
    Type: Number
    Default: 2
  
  Tv:
    Description: CPU Utilization Target
    Type: Number
    Default: 80

  EnvironmentName:
    Description: Unique name to distinguish different web application min chars 1 and max chars 4
    Type: String
    MinLength: 1
    MaxLength: 4

  StreamlitLogsPolicyArn:
    Description: Logs Policy Arn
    Type: String   
  
  StreamlitPublicSubnetA:
      Description: Task private subnet A
      Type: String

  StreamlitPublicSubnetB:
      Description: Task private subnet A
      Type: String

  StreamlitPrivateSubnetA:
    Description: Task private subnet A
    Type: String
  
  StreamlitPrivateSubnetB:
    Description: Task private subnet B
    Type: String

  LoggingBucketName:
    Description: Name of Logging Bucket
    Type: String  

  StreamlitVPC:
    Description: Id of VPC created
    Type: String  

  ContainerPort:
    Description: Port for Docker host and container
    Type: Number
    Default: 80

Mappings:
  # Cloudfront Mappings
  CFRegionMap:
    'us-east-1':
      PrefixListCloudFront: 'pl-3b927c52'
    'us-west-2':
      PrefixListCloudFront: 'pl-82a045eb'

Resources:
  # Task
  StreamlitExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['-', ['StreamlitExecutionRole', !Ref EnvironmentName]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'

  StreamlitECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['-', ['StreamlitECSTaskRole', !Ref EnvironmentName]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'TaskSSMPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - "ssm:GetParameter"
                Resource:
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/streamlitapp/${EnvironmentName}/*"
              - Effect: 'Allow'
                Action:
                  - "kms:Decrypt"
                Resource:
                  - !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/alias/aws/ssm"
              - Effect: 'Allow'
                Action:
                  - 'bedrock:InvokeAgent'
                Resource:
                  - '*'
                  
  StreamlitLogGroup:
    DeletionPolicy: Retain
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
  
  StreamlitTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties: 
      Family: !Join ['-', ['StreamlitTaskDefinition', !Ref EnvironmentName]]
      Memory: !Ref Memory
      Cpu: !Ref Cpu
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - 'FARGATE'
      RuntimePlatform:
        OperatingSystemFamily: LINUX   
      TaskRoleArn: !GetAtt StreamlitECSTaskRole.Arn
      ExecutionRoleArn: !GetAtt StreamlitExecutionRole.Arn
      ContainerDefinitions: 
        - Name: !Join ['-', ['ContainerDefinition', !Ref EnvironmentName]]
          LogConfiguration:
            LogDriver: "awslogs"
            Options: 
              awslogs-group: !Ref StreamlitLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: "ecs"
          Image: !Ref StreamLitImageURI
          PortMappings:
            - AppProtocol: "http"
              ContainerPort: !Ref ContainerPort
              HostPort: !Ref ContainerPort
              Name: !Join ['-', ['streamlit', !Ref ContainerPort, 'tcp']]
              Protocol: "tcp"

  StreamlitECSService:
    DependsOn: 
      - StreamlitApplicationLoadBalancer
      - StreamlitALBListenerRule
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Join ['-', ['StreamlitECSService', !Ref EnvironmentName]]
      Cluster: !Ref StreamlitCluster
      TaskDefinition: !Ref StreamlitTaskDefinition
      DesiredCount: !Ref Task
      LaunchType: FARGATE
      NetworkConfiguration: 
        AwsvpcConfiguration:
          Subnets:
            - !Ref StreamlitPrivateSubnetA
            - !Ref StreamlitPrivateSubnetB
          SecurityGroups:
            - !Ref StreamlitContainerSecurityGroup
      LoadBalancers:
        - ContainerName: !Join ['-', ['ContainerDefinition', !Ref EnvironmentName]]
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref StreamlitContainerTargetGroup
  
  # AutoScaling
  StreamlitAutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !Ref Min
      MaxCapacity: !Ref Max
      ResourceId: !Join ['/', [service, !Ref StreamlitCluster, !GetAtt StreamlitECSService.Name]]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService
  
  StreamlitAutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Join ['', [AutoScalingPolicy, !Ref EnvironmentName]]
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref StreamlitAutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 10
        ScaleOutCooldown: 10
        # Keep things at or lower than 50% CPU utilization, for example
        TargetValue: !Ref Tv

    # Security Group
  
  # Security Group
  StreamlitALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to the internet
      VpcId: !Ref StreamlitVPC
      Tags:
        - Key: Name
          Value: !Join ['-', ['StreamlitALBSecurityGroup', !Ref EnvironmentName]]
  
  ALBSGDefaultOutBoundRule:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt StreamlitALBSecurityGroup.GroupId
      IpProtocol: "-1"
      CidrIp: 0.0.0.0/0
      Description: Deny all outbound traffic by default

  ALBSGOutBoundRule:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt StreamlitALBSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: !Ref ContainerPort 
      ToPort: !Ref ContainerPort
      CidrIp: 0.0.0.0/0
      Description: Allow container port outbound
  
  ALBSGInBoundRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt StreamlitALBSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: !Ref ContainerPort 
      ToPort: !Ref ContainerPort
      SourcePrefixListId: !FindInMap ['CFRegionMap', !Ref 'AWS::Region', 'PrefixListCloudFront']
      Description: Allow container port from CloudFront 
  
  StreamlitContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow container traffic from ALB
      VpcId: !Ref StreamlitVPC
      Tags:
        - Key: Name
          Value: !Join ['-', ['StreamlitContainerSecurityGroup', !Ref EnvironmentName]]

  ContainerSGDefaultOutBoundRule:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt StreamlitContainerSecurityGroup.GroupId
      IpProtocol: "-1"
      CidrIp: 0.0.0.0/0
      Description: Deny all outbound traffic by default

  ContainerSGOutBoundRule:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt StreamlitContainerSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: !Ref ContainerPort 
      ToPort: !Ref ContainerPort
      CidrIp: 0.0.0.0/0
      Description: Allow container port outbound
  
  ContainerSGInBoundRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt StreamlitContainerSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: !Ref ContainerPort 
      ToPort: !Ref ContainerPort
      SourceSecurityGroupId: !Ref StreamlitALBSecurityGroup
      Description: Allow Container port from ALB SG
  
  # Load Balancer
  StreamlitContainerTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      Port: 80
      Protocol: "HTTP"
      TargetType: ip
      VpcId: !Ref StreamlitVPC
      Name: !Join ['-', ['StreamlitContainerTG', !Ref EnvironmentName]]


  StreamlitApplicationLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name: !Join ['-', ['StreamlitALB', !Ref EnvironmentName]]
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: true
        - Key: access_logs.s3.bucket
          Value: !Ref LoggingBucketName
        - Key: access_logs.s3.prefix
          Value: alb/logs
        - Key: load_balancing.cross_zone.enabled
          Value: true
      Scheme: internet-facing
      Type: application
      Subnets: 
        - !Ref StreamlitPublicSubnetA
        - !Ref StreamlitPublicSubnetB
      SecurityGroups: 
        - !Ref StreamlitALBSecurityGroup
      IpAddressType: ipv4

  StreamlitHTTPListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      LoadBalancerArn: !Ref StreamlitApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions: 
        - FixedResponseConfig:
            ContentType: text/plain
            MessageBody: Access denied
            StatusCode: 403
          Type: fixed-response
  
  StreamlitALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties: 
      Actions: 
        - Type: forward
          TargetGroupArn: !Ref StreamlitContainerTargetGroup
      Conditions: 
        - Field: http-header
          HttpHeaderConfig:
            HttpHeaderName: X-Custom-Header
            Values: 
              - !Join ['-', [!Sub "${AWS::StackName}", !Sub "${AWS::AccountId}"]]
      ListenerArn: !Ref StreamlitHTTPListener
      Priority: 1

  # Cloudfront
  Distribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig: 
        Origins: 
          - ConnectionAttempts: 3
            ConnectionTimeout: 10
            DomainName: !GetAtt StreamlitApplicationLoadBalancer.DNSName
            Id: !Ref StreamlitApplicationLoadBalancer
            OriginCustomHeaders:
               - HeaderName: X-Custom-Header
                 HeaderValue: !Join ['-', [!Sub "${AWS::StackName}", !Sub "${AWS::AccountId}"]]
            CustomOriginConfig:
              HTTPPort: '80'
              OriginProtocolPolicy: 'http-only'
        DefaultCacheBehavior: 
          ForwardedValues:
            Cookies:
              Forward: whitelist
              WhitelistedNames: [token]
            QueryString: true
            QueryStringCacheKeys: [code]
          Compress: true
          ViewerProtocolPolicy: 'https-only'
          AllowedMethods: 
            - "HEAD"
            - "DELETE"
            - "POST"
            - "GET"
            - "OPTIONS"
            - "PUT"
            - "PATCH"
          CachedMethods: 
            - "HEAD"
            - "GET"
          CachePolicyId: "658327ea-f89d-4fab-a63d-7e88639e58f6"
          OriginRequestPolicyId: "216adef6-5c7f-47e4-b989-5492eafa07d3"
          TargetOriginId: !Ref StreamlitApplicationLoadBalancer
        PriceClass: "PriceClass_All"
        Enabled: true                  
        HttpVersion: "http2"
        IPV6Enabled: true
        Logging: 
          Bucket: !Sub '${LoggingBucketName}.s3.amazonaws.com'
          IncludeCookies: true
          Prefix: !Sub distribution-${EnvironmentName}-logs/
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
          MinimumProtocolVersion: TLSv1.2_2018
        # WebACLId: !GetAtt CloudFrontWebACL.Arn
      Tags:
        - Key: CloudfrontStreamlitApp
          Value: !Sub ${AWS::StackName}-Cloudfront

Outputs:
  CloudfrontURL:
    Description: "CloudFront URL"
    Value: !GetAtt Distribution.DomainName
  
  CloudfrontID:
    Description: "CloudFront ID"
    Value: !Ref Distribution